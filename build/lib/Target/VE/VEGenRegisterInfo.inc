/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass VEMCRegisterClasses[];

namespace VE {
enum {
  NoRegister,
  IC = 1,
  PMMR = 2,
  PSW = 3,
  SAR = 4,
  USRCC = 5,
  VIX = 6,
  VL = 7,
  PMC0 = 8,
  PMC1 = 9,
  PMC2 = 10,
  PMC3 = 11,
  PMC4 = 12,
  PMC5 = 13,
  PMC6 = 14,
  PMC7 = 15,
  PMC8 = 16,
  PMC9 = 17,
  PMC10 = 18,
  PMC11 = 19,
  PMC12 = 20,
  PMC13 = 21,
  PMC14 = 22,
  PMCR0 = 23,
  PMCR1 = 24,
  PMCR2 = 25,
  PMCR3 = 26,
  Q0 = 27,
  Q1 = 28,
  Q2 = 29,
  Q3 = 30,
  Q4 = 31,
  Q5 = 32,
  Q6 = 33,
  Q7 = 34,
  Q8 = 35,
  Q9 = 36,
  Q10 = 37,
  Q11 = 38,
  Q12 = 39,
  Q13 = 40,
  Q14 = 41,
  Q15 = 42,
  Q16 = 43,
  Q17 = 44,
  Q18 = 45,
  Q19 = 46,
  Q20 = 47,
  Q21 = 48,
  Q22 = 49,
  Q23 = 50,
  Q24 = 51,
  Q25 = 52,
  Q26 = 53,
  Q27 = 54,
  Q28 = 55,
  Q29 = 56,
  Q30 = 57,
  Q31 = 58,
  SF0 = 59,
  SF1 = 60,
  SF2 = 61,
  SF3 = 62,
  SF4 = 63,
  SF5 = 64,
  SF6 = 65,
  SF7 = 66,
  SF8 = 67,
  SF9 = 68,
  SF10 = 69,
  SF11 = 70,
  SF12 = 71,
  SF13 = 72,
  SF14 = 73,
  SF15 = 74,
  SF16 = 75,
  SF17 = 76,
  SF18 = 77,
  SF19 = 78,
  SF20 = 79,
  SF21 = 80,
  SF22 = 81,
  SF23 = 82,
  SF24 = 83,
  SF25 = 84,
  SF26 = 85,
  SF27 = 86,
  SF28 = 87,
  SF29 = 88,
  SF30 = 89,
  SF31 = 90,
  SF32 = 91,
  SF33 = 92,
  SF34 = 93,
  SF35 = 94,
  SF36 = 95,
  SF37 = 96,
  SF38 = 97,
  SF39 = 98,
  SF40 = 99,
  SF41 = 100,
  SF42 = 101,
  SF43 = 102,
  SF44 = 103,
  SF45 = 104,
  SF46 = 105,
  SF47 = 106,
  SF48 = 107,
  SF49 = 108,
  SF50 = 109,
  SF51 = 110,
  SF52 = 111,
  SF53 = 112,
  SF54 = 113,
  SF55 = 114,
  SF56 = 115,
  SF57 = 116,
  SF58 = 117,
  SF59 = 118,
  SF60 = 119,
  SF61 = 120,
  SF62 = 121,
  SF63 = 122,
  SW0 = 123,
  SW1 = 124,
  SW2 = 125,
  SW3 = 126,
  SW4 = 127,
  SW5 = 128,
  SW6 = 129,
  SW7 = 130,
  SW8 = 131,
  SW9 = 132,
  SW10 = 133,
  SW11 = 134,
  SW12 = 135,
  SW13 = 136,
  SW14 = 137,
  SW15 = 138,
  SW16 = 139,
  SW17 = 140,
  SW18 = 141,
  SW19 = 142,
  SW20 = 143,
  SW21 = 144,
  SW22 = 145,
  SW23 = 146,
  SW24 = 147,
  SW25 = 148,
  SW26 = 149,
  SW27 = 150,
  SW28 = 151,
  SW29 = 152,
  SW30 = 153,
  SW31 = 154,
  SW32 = 155,
  SW33 = 156,
  SW34 = 157,
  SW35 = 158,
  SW36 = 159,
  SW37 = 160,
  SW38 = 161,
  SW39 = 162,
  SW40 = 163,
  SW41 = 164,
  SW42 = 165,
  SW43 = 166,
  SW44 = 167,
  SW45 = 168,
  SW46 = 169,
  SW47 = 170,
  SW48 = 171,
  SW49 = 172,
  SW50 = 173,
  SW51 = 174,
  SW52 = 175,
  SW53 = 176,
  SW54 = 177,
  SW55 = 178,
  SW56 = 179,
  SW57 = 180,
  SW58 = 181,
  SW59 = 182,
  SW60 = 183,
  SW61 = 184,
  SW62 = 185,
  SW63 = 186,
  SX0 = 187,
  SX1 = 188,
  SX2 = 189,
  SX3 = 190,
  SX4 = 191,
  SX5 = 192,
  SX6 = 193,
  SX7 = 194,
  SX8 = 195,
  SX9 = 196,
  SX10 = 197,
  SX11 = 198,
  SX12 = 199,
  SX13 = 200,
  SX14 = 201,
  SX15 = 202,
  SX16 = 203,
  SX17 = 204,
  SX18 = 205,
  SX19 = 206,
  SX20 = 207,
  SX21 = 208,
  SX22 = 209,
  SX23 = 210,
  SX24 = 211,
  SX25 = 212,
  SX26 = 213,
  SX27 = 214,
  SX28 = 215,
  SX29 = 216,
  SX30 = 217,
  SX31 = 218,
  SX32 = 219,
  SX33 = 220,
  SX34 = 221,
  SX35 = 222,
  SX36 = 223,
  SX37 = 224,
  SX38 = 225,
  SX39 = 226,
  SX40 = 227,
  SX41 = 228,
  SX42 = 229,
  SX43 = 230,
  SX44 = 231,
  SX45 = 232,
  SX46 = 233,
  SX47 = 234,
  SX48 = 235,
  SX49 = 236,
  SX50 = 237,
  SX51 = 238,
  SX52 = 239,
  SX53 = 240,
  SX54 = 241,
  SX55 = 242,
  SX56 = 243,
  SX57 = 244,
  SX58 = 245,
  SX59 = 246,
  SX60 = 247,
  SX61 = 248,
  SX62 = 249,
  SX63 = 250,
  V0 = 251,
  V1 = 252,
  V2 = 253,
  V3 = 254,
  V4 = 255,
  V5 = 256,
  V6 = 257,
  V7 = 258,
  V8 = 259,
  V9 = 260,
  V10 = 261,
  V11 = 262,
  V12 = 263,
  V13 = 264,
  V14 = 265,
  V15 = 266,
  V16 = 267,
  V17 = 268,
  V18 = 269,
  V19 = 270,
  V20 = 271,
  V21 = 272,
  V22 = 273,
  V23 = 274,
  V24 = 275,
  V25 = 276,
  V26 = 277,
  V27 = 278,
  V28 = 279,
  V29 = 280,
  V30 = 281,
  V31 = 282,
  V32 = 283,
  V33 = 284,
  V34 = 285,
  V35 = 286,
  V36 = 287,
  V37 = 288,
  V38 = 289,
  V39 = 290,
  V40 = 291,
  V41 = 292,
  V42 = 293,
  V43 = 294,
  V44 = 295,
  V45 = 296,
  V46 = 297,
  V47 = 298,
  V48 = 299,
  V49 = 300,
  V50 = 301,
  V51 = 302,
  V52 = 303,
  V53 = 304,
  V54 = 305,
  V55 = 306,
  V56 = 307,
  V57 = 308,
  V58 = 309,
  V59 = 310,
  V60 = 311,
  V61 = 312,
  V62 = 313,
  V63 = 314,
  VM0 = 315,
  VM1 = 316,
  VM2 = 317,
  VM3 = 318,
  VM4 = 319,
  VM5 = 320,
  VM6 = 321,
  VM7 = 322,
  VM8 = 323,
  VM9 = 324,
  VM10 = 325,
  VM11 = 326,
  VM12 = 327,
  VM13 = 328,
  VM14 = 329,
  VM15 = 330,
  VMP0 = 331,
  VMP1 = 332,
  VMP2 = 333,
  VMP3 = 334,
  VMP4 = 335,
  VMP5 = 336,
  VMP6 = 337,
  VMP7 = 338,
  NUM_TARGET_REGS // 339
};
} // end namespace VE

// Register classes

namespace VE {
enum {
  F32RegClassID = 0,
  I32RegClassID = 1,
  VLSRegClassID = 2,
  I64RegClassID = 3,
  MISCRegClassID = 4,
  F128RegClassID = 5,
  VMRegClassID = 6,
  VM512RegClassID = 7,
  VM512_with_sub_vm_evenRegClassID = 8,
  V64RegClassID = 9,

};
} // end namespace VE


// Register alternate name indices

namespace VE {
enum {
  AsmName,	// 0
  NoRegAltName,	// 1
  NUM_TARGET_REG_ALT_NAMES = 2
};
} // end namespace VE


// Subregister indices

namespace VE {
enum : uint16_t {
  NoSubRegister,
  sub_even,	// 1
  sub_f32,	// 2
  sub_i32,	// 3
  sub_odd,	// 4
  sub_vm_even,	// 5
  sub_vm_odd,	// 6
  sub_odd_then_sub_f32,	// 7
  sub_odd_then_sub_i32,	// 8
  NUM_TARGET_SUBREGS
};
} // end namespace VE

// Register pressure sets enum.
namespace VE {
enum RegisterPressureSets {
  VLS = 0,
  VM512 = 1,
  VM = 2,
  VM_with_VM512 = 3,
  MISC = 4,
  F32 = 5,
  V64 = 6,
};
} // end namespace VE

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const MCPhysReg VERegDiffLists[] = {
  /* 0 */ 65028, 1, 0,
  /* 3 */ 65508, 1, 0,
  /* 6 */ 65521, 1, 0,
  /* 9 */ 65522, 1, 0,
  /* 12 */ 65523, 1, 0,
  /* 15 */ 65524, 1, 0,
  /* 18 */ 65525, 1, 0,
  /* 21 */ 65526, 1, 0,
  /* 24 */ 65527, 1, 0,
  /* 27 */ 8, 0,
  /* 29 */ 9, 0,
  /* 31 */ 10, 0,
  /* 33 */ 11, 0,
  /* 35 */ 12, 0,
  /* 37 */ 13, 0,
  /* 39 */ 14, 0,
  /* 41 */ 15, 0,
  /* 43 */ 64, 65344, 0,
  /* 46 */ 128, 65344, 0,
  /* 49 */ 64, 65345, 0,
  /* 52 */ 128, 65345, 0,
  /* 55 */ 64, 65346, 0,
  /* 58 */ 128, 65346, 0,
  /* 61 */ 64, 65347, 0,
  /* 64 */ 128, 65347, 0,
  /* 67 */ 64, 65348, 0,
  /* 70 */ 128, 65348, 0,
  /* 73 */ 64, 65349, 0,
  /* 76 */ 128, 65349, 0,
  /* 79 */ 64, 65350, 0,
  /* 82 */ 128, 65350, 0,
  /* 85 */ 64, 65351, 0,
  /* 88 */ 128, 65351, 0,
  /* 91 */ 64, 65352, 0,
  /* 94 */ 128, 65352, 0,
  /* 97 */ 64, 65353, 0,
  /* 100 */ 128, 65353, 0,
  /* 103 */ 64, 65354, 0,
  /* 106 */ 128, 65354, 0,
  /* 109 */ 64, 65355, 0,
  /* 112 */ 128, 65355, 0,
  /* 115 */ 64, 65356, 0,
  /* 118 */ 128, 65356, 0,
  /* 121 */ 64, 65357, 0,
  /* 124 */ 128, 65357, 0,
  /* 127 */ 64, 65358, 0,
  /* 130 */ 128, 65358, 0,
  /* 133 */ 64, 65359, 0,
  /* 136 */ 128, 65359, 0,
  /* 139 */ 64, 65360, 0,
  /* 142 */ 128, 65360, 0,
  /* 145 */ 64, 65361, 0,
  /* 148 */ 128, 65361, 0,
  /* 151 */ 64, 65362, 0,
  /* 154 */ 128, 65362, 0,
  /* 157 */ 64, 65363, 0,
  /* 160 */ 128, 65363, 0,
  /* 163 */ 64, 65364, 0,
  /* 166 */ 128, 65364, 0,
  /* 169 */ 64, 65365, 0,
  /* 172 */ 128, 65365, 0,
  /* 175 */ 64, 65366, 0,
  /* 178 */ 128, 65366, 0,
  /* 181 */ 64, 65367, 0,
  /* 184 */ 128, 65367, 0,
  /* 187 */ 64, 65368, 0,
  /* 190 */ 128, 65368, 0,
  /* 193 */ 64, 65369, 0,
  /* 196 */ 128, 65369, 0,
  /* 199 */ 64, 65370, 0,
  /* 202 */ 128, 65370, 0,
  /* 205 */ 64, 65371, 0,
  /* 208 */ 128, 65371, 0,
  /* 211 */ 64, 65372, 0,
  /* 214 */ 128, 65372, 0,
  /* 217 */ 64, 65373, 0,
  /* 220 */ 128, 65373, 0,
  /* 223 */ 64, 65374, 0,
  /* 226 */ 128, 65374, 0,
  /* 229 */ 64, 65375, 0,
  /* 232 */ 128, 65375, 0,
  /* 235 */ 64, 65376, 0,
  /* 238 */ 128, 65376, 0,
  /* 241 */ 65439, 0,
  /* 243 */ 160, 65472, 65472, 129, 65472, 65472, 0,
  /* 250 */ 161, 65472, 65472, 129, 65472, 65472, 0,
  /* 257 */ 162, 65472, 65472, 129, 65472, 65472, 0,
  /* 264 */ 163, 65472, 65472, 129, 65472, 65472, 0,
  /* 271 */ 164, 65472, 65472, 129, 65472, 65472, 0,
  /* 278 */ 165, 65472, 65472, 129, 65472, 65472, 0,
  /* 285 */ 166, 65472, 65472, 129, 65472, 65472, 0,
  /* 292 */ 167, 65472, 65472, 129, 65472, 65472, 0,
  /* 299 */ 168, 65472, 65472, 129, 65472, 65472, 0,
  /* 306 */ 169, 65472, 65472, 129, 65472, 65472, 0,
  /* 313 */ 170, 65472, 65472, 129, 65472, 65472, 0,
  /* 320 */ 171, 65472, 65472, 129, 65472, 65472, 0,
  /* 327 */ 172, 65472, 65472, 129, 65472, 65472, 0,
  /* 334 */ 173, 65472, 65472, 129, 65472, 65472, 0,
  /* 341 */ 174, 65472, 65472, 129, 65472, 65472, 0,
  /* 348 */ 175, 65472, 65472, 129, 65472, 65472, 0,
  /* 355 */ 176, 65472, 65472, 129, 65472, 65472, 0,
  /* 362 */ 177, 65472, 65472, 129, 65472, 65472, 0,
  /* 369 */ 178, 65472, 65472, 129, 65472, 65472, 0,
  /* 376 */ 179, 65472, 65472, 129, 65472, 65472, 0,
  /* 383 */ 180, 65472, 65472, 129, 65472, 65472, 0,
  /* 390 */ 181, 65472, 65472, 129, 65472, 65472, 0,
  /* 397 */ 182, 65472, 65472, 129, 65472, 65472, 0,
  /* 404 */ 183, 65472, 65472, 129, 65472, 65472, 0,
  /* 411 */ 184, 65472, 65472, 129, 65472, 65472, 0,
  /* 418 */ 185, 65472, 65472, 129, 65472, 65472, 0,
  /* 425 */ 186, 65472, 65472, 129, 65472, 65472, 0,
  /* 432 */ 187, 65472, 65472, 129, 65472, 65472, 0,
  /* 439 */ 188, 65472, 65472, 129, 65472, 65472, 0,
  /* 446 */ 189, 65472, 65472, 129, 65472, 65472, 0,
  /* 453 */ 190, 65472, 65472, 129, 65472, 65472, 0,
  /* 460 */ 191, 65472, 65472, 129, 65472, 65472, 0,
  /* 467 */ 65503, 0,
  /* 469 */ 65535, 0,
};

extern const LaneBitmask VELaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x0000000000000000), LaneBitmask::getAll(),
  /* 2 */ LaneBitmask(0x0000000000000003), LaneBitmask::getAll(),
  /* 4 */ LaneBitmask(0x0000000000000004), LaneBitmask(0x0000000000000008), LaneBitmask::getAll(),
  /* 7 */ LaneBitmask(0x0000000000000003), LaneBitmask(0x0000000000000030), LaneBitmask::getAll(),
};

extern const uint16_t VESubRegIdxLists[] = {
  /* 0 */ 3, 2, 0,
  /* 3 */ 5, 6, 0,
  /* 6 */ 1, 3, 2, 4, 8, 7, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits VESubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 64 },	// sub_even
  { 0, 32 },	// sub_f32
  { 32, 32 },	// sub_i32
  { 64, 64 },	// sub_odd
  { 0, 256 },	// sub_vm_even
  { 256, 256 },	// sub_vm_odd
  { 64, 32 },	// sub_odd_then_sub_f32
  { 96, 32 },	// sub_odd_then_sub_i32
};

extern const char VERegStrings[] = {
  /* 0 */ 'P', 'M', 'C', '1', '0', 0,
  /* 6 */ 'S', 'F', '1', '0', 0,
  /* 11 */ 'V', 'M', '1', '0', 0,
  /* 16 */ 'Q', '1', '0', 0,
  /* 20 */ 'V', '1', '0', 0,
  /* 24 */ 'S', 'W', '1', '0', 0,
  /* 29 */ 'S', 'X', '1', '0', 0,
  /* 34 */ 'S', 'F', '2', '0', 0,
  /* 39 */ 'Q', '2', '0', 0,
  /* 43 */ 'V', '2', '0', 0,
  /* 47 */ 'S', 'W', '2', '0', 0,
  /* 52 */ 'S', 'X', '2', '0', 0,
  /* 57 */ 'S', 'F', '3', '0', 0,
  /* 62 */ 'Q', '3', '0', 0,
  /* 66 */ 'V', '3', '0', 0,
  /* 70 */ 'S', 'W', '3', '0', 0,
  /* 75 */ 'S', 'X', '3', '0', 0,
  /* 80 */ 'S', 'F', '4', '0', 0,
  /* 85 */ 'V', '4', '0', 0,
  /* 89 */ 'S', 'W', '4', '0', 0,
  /* 94 */ 'S', 'X', '4', '0', 0,
  /* 99 */ 'S', 'F', '5', '0', 0,
  /* 104 */ 'V', '5', '0', 0,
  /* 108 */ 'S', 'W', '5', '0', 0,
  /* 113 */ 'S', 'X', '5', '0', 0,
  /* 118 */ 'S', 'F', '6', '0', 0,
  /* 123 */ 'V', '6', '0', 0,
  /* 127 */ 'S', 'W', '6', '0', 0,
  /* 132 */ 'S', 'X', '6', '0', 0,
  /* 137 */ 'P', 'M', 'C', '0', 0,
  /* 142 */ 'S', 'F', '0', 0,
  /* 146 */ 'V', 'M', '0', 0,
  /* 150 */ 'V', 'M', 'P', '0', 0,
  /* 155 */ 'Q', '0', 0,
  /* 158 */ 'P', 'M', 'C', 'R', '0', 0,
  /* 164 */ 'V', '0', 0,
  /* 167 */ 'S', 'W', '0', 0,
  /* 171 */ 'S', 'X', '0', 0,
  /* 175 */ 'P', 'M', 'C', '1', '1', 0,
  /* 181 */ 'S', 'F', '1', '1', 0,
  /* 186 */ 'V', 'M', '1', '1', 0,
  /* 191 */ 'Q', '1', '1', 0,
  /* 195 */ 'V', '1', '1', 0,
  /* 199 */ 'S', 'W', '1', '1', 0,
  /* 204 */ 'S', 'X', '1', '1', 0,
  /* 209 */ 'S', 'F', '2', '1', 0,
  /* 214 */ 'Q', '2', '1', 0,
  /* 218 */ 'V', '2', '1', 0,
  /* 222 */ 'S', 'W', '2', '1', 0,
  /* 227 */ 'S', 'X', '2', '1', 0,
  /* 232 */ 'S', 'F', '3', '1', 0,
  /* 237 */ 'Q', '3', '1', 0,
  /* 241 */ 'V', '3', '1', 0,
  /* 245 */ 'S', 'W', '3', '1', 0,
  /* 250 */ 'S', 'X', '3', '1', 0,
  /* 255 */ 'S', 'F', '4', '1', 0,
  /* 260 */ 'V', '4', '1', 0,
  /* 264 */ 'S', 'W', '4', '1', 0,
  /* 269 */ 'S', 'X', '4', '1', 0,
  /* 274 */ 'S', 'F', '5', '1', 0,
  /* 279 */ 'V', '5', '1', 0,
  /* 283 */ 'S', 'W', '5', '1', 0,
  /* 288 */ 'S', 'X', '5', '1', 0,
  /* 293 */ 'S', 'F', '6', '1', 0,
  /* 298 */ 'V', '6', '1', 0,
  /* 302 */ 'S', 'W', '6', '1', 0,
  /* 307 */ 'S', 'X', '6', '1', 0,
  /* 312 */ 'P', 'M', 'C', '1', 0,
  /* 317 */ 'S', 'F', '1', 0,
  /* 321 */ 'V', 'M', '1', 0,
  /* 325 */ 'V', 'M', 'P', '1', 0,
  /* 330 */ 'Q', '1', 0,
  /* 333 */ 'P', 'M', 'C', 'R', '1', 0,
  /* 339 */ 'V', '1', 0,
  /* 342 */ 'S', 'W', '1', 0,
  /* 346 */ 'S', 'X', '1', 0,
  /* 350 */ 'P', 'M', 'C', '1', '2', 0,
  /* 356 */ 'S', 'F', '1', '2', 0,
  /* 361 */ 'V', 'M', '1', '2', 0,
  /* 366 */ 'Q', '1', '2', 0,
  /* 370 */ 'V', '1', '2', 0,
  /* 374 */ 'S', 'W', '1', '2', 0,
  /* 379 */ 'S', 'X', '1', '2', 0,
  /* 384 */ 'S', 'F', '2', '2', 0,
  /* 389 */ 'Q', '2', '2', 0,
  /* 393 */ 'V', '2', '2', 0,
  /* 397 */ 'S', 'W', '2', '2', 0,
  /* 402 */ 'S', 'X', '2', '2', 0,
  /* 407 */ 'S', 'F', '3', '2', 0,
  /* 412 */ 'V', '3', '2', 0,
  /* 416 */ 'S', 'W', '3', '2', 0,
  /* 421 */ 'S', 'X', '3', '2', 0,
  /* 426 */ 'S', 'F', '4', '2', 0,
  /* 431 */ 'V', '4', '2', 0,
  /* 435 */ 'S', 'W', '4', '2', 0,
  /* 440 */ 'S', 'X', '4', '2', 0,
  /* 445 */ 'S', 'F', '5', '2', 0,
  /* 450 */ 'V', '5', '2', 0,
  /* 454 */ 'S', 'W', '5', '2', 0,
  /* 459 */ 'S', 'X', '5', '2', 0,
  /* 464 */ 'S', 'F', '6', '2', 0,
  /* 469 */ 'V', '6', '2', 0,
  /* 473 */ 'S', 'W', '6', '2', 0,
  /* 478 */ 'S', 'X', '6', '2', 0,
  /* 483 */ 'P', 'M', 'C', '2', 0,
  /* 488 */ 'S', 'F', '2', 0,
  /* 492 */ 'V', 'M', '2', 0,
  /* 496 */ 'V', 'M', 'P', '2', 0,
  /* 501 */ 'Q', '2', 0,
  /* 504 */ 'P', 'M', 'C', 'R', '2', 0,
  /* 510 */ 'V', '2', 0,
  /* 513 */ 'S', 'W', '2', 0,
  /* 517 */ 'S', 'X', '2', 0,
  /* 521 */ 'P', 'M', 'C', '1', '3', 0,
  /* 527 */ 'S', 'F', '1', '3', 0,
  /* 532 */ 'V', 'M', '1', '3', 0,
  /* 537 */ 'Q', '1', '3', 0,
  /* 541 */ 'V', '1', '3', 0,
  /* 545 */ 'S', 'W', '1', '3', 0,
  /* 550 */ 'S', 'X', '1', '3', 0,
  /* 555 */ 'S', 'F', '2', '3', 0,
  /* 560 */ 'Q', '2', '3', 0,
  /* 564 */ 'V', '2', '3', 0,
  /* 568 */ 'S', 'W', '2', '3', 0,
  /* 573 */ 'S', 'X', '2', '3', 0,
  /* 578 */ 'S', 'F', '3', '3', 0,
  /* 583 */ 'V', '3', '3', 0,
  /* 587 */ 'S', 'W', '3', '3', 0,
  /* 592 */ 'S', 'X', '3', '3', 0,
  /* 597 */ 'S', 'F', '4', '3', 0,
  /* 602 */ 'V', '4', '3', 0,
  /* 606 */ 'S', 'W', '4', '3', 0,
  /* 611 */ 'S', 'X', '4', '3', 0,
  /* 616 */ 'S', 'F', '5', '3', 0,
  /* 621 */ 'V', '5', '3', 0,
  /* 625 */ 'S', 'W', '5', '3', 0,
  /* 630 */ 'S', 'X', '5', '3', 0,
  /* 635 */ 'S', 'F', '6', '3', 0,
  /* 640 */ 'V', '6', '3', 0,
  /* 644 */ 'S', 'W', '6', '3', 0,
  /* 649 */ 'S', 'X', '6', '3', 0,
  /* 654 */ 'P', 'M', 'C', '3', 0,
  /* 659 */ 'S', 'F', '3', 0,
  /* 663 */ 'V', 'M', '3', 0,
  /* 667 */ 'V', 'M', 'P', '3', 0,
  /* 672 */ 'Q', '3', 0,
  /* 675 */ 'P', 'M', 'C', 'R', '3', 0,
  /* 681 */ 'V', '3', 0,
  /* 684 */ 'S', 'W', '3', 0,
  /* 688 */ 'S', 'X', '3', 0,
  /* 692 */ 'P', 'M', 'C', '1', '4', 0,
  /* 698 */ 'S', 'F', '1', '4', 0,
  /* 703 */ 'V', 'M', '1', '4', 0,
  /* 708 */ 'Q', '1', '4', 0,
  /* 712 */ 'V', '1', '4', 0,
  /* 716 */ 'S', 'W', '1', '4', 0,
  /* 721 */ 'S', 'X', '1', '4', 0,
  /* 726 */ 'S', 'F', '2', '4', 0,
  /* 731 */ 'Q', '2', '4', 0,
  /* 735 */ 'V', '2', '4', 0,
  /* 739 */ 'S', 'W', '2', '4', 0,
  /* 744 */ 'S', 'X', '2', '4', 0,
  /* 749 */ 'S', 'F', '3', '4', 0,
  /* 754 */ 'V', '3', '4', 0,
  /* 758 */ 'S', 'W', '3', '4', 0,
  /* 763 */ 'S', 'X', '3', '4', 0,
  /* 768 */ 'S', 'F', '4', '4', 0,
  /* 773 */ 'V', '4', '4', 0,
  /* 777 */ 'S', 'W', '4', '4', 0,
  /* 782 */ 'S', 'X', '4', '4', 0,
  /* 787 */ 'S', 'F', '5', '4', 0,
  /* 792 */ 'V', '5', '4', 0,
  /* 796 */ 'S', 'W', '5', '4', 0,
  /* 801 */ 'S', 'X', '5', '4', 0,
  /* 806 */ 'P', 'M', 'C', '4', 0,
  /* 811 */ 'S', 'F', '4', 0,
  /* 815 */ 'V', 'M', '4', 0,
  /* 819 */ 'V', 'M', 'P', '4', 0,
  /* 824 */ 'Q', '4', 0,
  /* 827 */ 'V', '4', 0,
  /* 830 */ 'S', 'W', '4', 0,
  /* 834 */ 'S', 'X', '4', 0,
  /* 838 */ 'S', 'F', '1', '5', 0,
  /* 843 */ 'V', 'M', '1', '5', 0,
  /* 848 */ 'Q', '1', '5', 0,
  /* 852 */ 'V', '1', '5', 0,
  /* 856 */ 'S', 'W', '1', '5', 0,
  /* 861 */ 'S', 'X', '1', '5', 0,
  /* 866 */ 'S', 'F', '2', '5', 0,
  /* 871 */ 'Q', '2', '5', 0,
  /* 875 */ 'V', '2', '5', 0,
  /* 879 */ 'S', 'W', '2', '5', 0,
  /* 884 */ 'S', 'X', '2', '5', 0,
  /* 889 */ 'S', 'F', '3', '5', 0,
  /* 894 */ 'V', '3', '5', 0,
  /* 898 */ 'S', 'W', '3', '5', 0,
  /* 903 */ 'S', 'X', '3', '5', 0,
  /* 908 */ 'S', 'F', '4', '5', 0,
  /* 913 */ 'V', '4', '5', 0,
  /* 917 */ 'S', 'W', '4', '5', 0,
  /* 922 */ 'S', 'X', '4', '5', 0,
  /* 927 */ 'S', 'F', '5', '5', 0,
  /* 932 */ 'V', '5', '5', 0,
  /* 936 */ 'S', 'W', '5', '5', 0,
  /* 941 */ 'S', 'X', '5', '5', 0,
  /* 946 */ 'P', 'M', 'C', '5', 0,
  /* 951 */ 'S', 'F', '5', 0,
  /* 955 */ 'V', 'M', '5', 0,
  /* 959 */ 'V', 'M', 'P', '5', 0,
  /* 964 */ 'Q', '5', 0,
  /* 967 */ 'V', '5', 0,
  /* 970 */ 'S', 'W', '5', 0,
  /* 974 */ 'S', 'X', '5', 0,
  /* 978 */ 'S', 'F', '1', '6', 0,
  /* 983 */ 'Q', '1', '6', 0,
  /* 987 */ 'V', '1', '6', 0,
  /* 991 */ 'S', 'W', '1', '6', 0,
  /* 996 */ 'S', 'X', '1', '6', 0,
  /* 1001 */ 'S', 'F', '2', '6', 0,
  /* 1006 */ 'Q', '2', '6', 0,
  /* 1010 */ 'V', '2', '6', 0,
  /* 1014 */ 'S', 'W', '2', '6', 0,
  /* 1019 */ 'S', 'X', '2', '6', 0,
  /* 1024 */ 'S', 'F', '3', '6', 0,
  /* 1029 */ 'V', '3', '6', 0,
  /* 1033 */ 'S', 'W', '3', '6', 0,
  /* 1038 */ 'S', 'X', '3', '6', 0,
  /* 1043 */ 'S', 'F', '4', '6', 0,
  /* 1048 */ 'V', '4', '6', 0,
  /* 1052 */ 'S', 'W', '4', '6', 0,
  /* 1057 */ 'S', 'X', '4', '6', 0,
  /* 1062 */ 'S', 'F', '5', '6', 0,
  /* 1067 */ 'V', '5', '6', 0,
  /* 1071 */ 'S', 'W', '5', '6', 0,
  /* 1076 */ 'S', 'X', '5', '6', 0,
  /* 1081 */ 'P', 'M', 'C', '6', 0,
  /* 1086 */ 'S', 'F', '6', 0,
  /* 1090 */ 'V', 'M', '6', 0,
  /* 1094 */ 'V', 'M', 'P', '6', 0,
  /* 1099 */ 'Q', '6', 0,
  /* 1102 */ 'V', '6', 0,
  /* 1105 */ 'S', 'W', '6', 0,
  /* 1109 */ 'S', 'X', '6', 0,
  /* 1113 */ 'S', 'F', '1', '7', 0,
  /* 1118 */ 'Q', '1', '7', 0,
  /* 1122 */ 'V', '1', '7', 0,
  /* 1126 */ 'S', 'W', '1', '7', 0,
  /* 1131 */ 'S', 'X', '1', '7', 0,
  /* 1136 */ 'S', 'F', '2', '7', 0,
  /* 1141 */ 'Q', '2', '7', 0,
  /* 1145 */ 'V', '2', '7', 0,
  /* 1149 */ 'S', 'W', '2', '7', 0,
  /* 1154 */ 'S', 'X', '2', '7', 0,
  /* 1159 */ 'S', 'F', '3', '7', 0,
  /* 1164 */ 'V', '3', '7', 0,
  /* 1168 */ 'S', 'W', '3', '7', 0,
  /* 1173 */ 'S', 'X', '3', '7', 0,
  /* 1178 */ 'S', 'F', '4', '7', 0,
  /* 1183 */ 'V', '4', '7', 0,
  /* 1187 */ 'S', 'W', '4', '7', 0,
  /* 1192 */ 'S', 'X', '4', '7', 0,
  /* 1197 */ 'S', 'F', '5', '7', 0,
  /* 1202 */ 'V', '5', '7', 0,
  /* 1206 */ 'S', 'W', '5', '7', 0,
  /* 1211 */ 'S', 'X', '5', '7', 0,
  /* 1216 */ 'P', 'M', 'C', '7', 0,
  /* 1221 */ 'S', 'F', '7', 0,
  /* 1225 */ 'V', 'M', '7', 0,
  /* 1229 */ 'V', 'M', 'P', '7', 0,
  /* 1234 */ 'Q', '7', 0,
  /* 1237 */ 'V', '7', 0,
  /* 1240 */ 'S', 'W', '7', 0,
  /* 1244 */ 'S', 'X', '7', 0,
  /* 1248 */ 'S', 'F', '1', '8', 0,
  /* 1253 */ 'Q', '1', '8', 0,
  /* 1257 */ 'V', '1', '8', 0,
  /* 1261 */ 'S', 'W', '1', '8', 0,
  /* 1266 */ 'S', 'X', '1', '8', 0,
  /* 1271 */ 'S', 'F', '2', '8', 0,
  /* 1276 */ 'Q', '2', '8', 0,
  /* 1280 */ 'V', '2', '8', 0,
  /* 1284 */ 'S', 'W', '2', '8', 0,
  /* 1289 */ 'S', 'X', '2', '8', 0,
  /* 1294 */ 'S', 'F', '3', '8', 0,
  /* 1299 */ 'V', '3', '8', 0,
  /* 1303 */ 'S', 'W', '3', '8', 0,
  /* 1308 */ 'S', 'X', '3', '8', 0,
  /* 1313 */ 'S', 'F', '4', '8', 0,
  /* 1318 */ 'V', '4', '8', 0,
  /* 1322 */ 'S', 'W', '4', '8', 0,
  /* 1327 */ 'S', 'X', '4', '8', 0,
  /* 1332 */ 'S', 'F', '5', '8', 0,
  /* 1337 */ 'V', '5', '8', 0,
  /* 1341 */ 'S', 'W', '5', '8', 0,
  /* 1346 */ 'S', 'X', '5', '8', 0,
  /* 1351 */ 'P', 'M', 'C', '8', 0,
  /* 1356 */ 'S', 'F', '8', 0,
  /* 1360 */ 'V', 'M', '8', 0,
  /* 1364 */ 'Q', '8', 0,
  /* 1367 */ 'V', '8', 0,
  /* 1370 */ 'S', 'W', '8', 0,
  /* 1374 */ 'S', 'X', '8', 0,
  /* 1378 */ 'S', 'F', '1', '9', 0,
  /* 1383 */ 'Q', '1', '9', 0,
  /* 1387 */ 'V', '1', '9', 0,
  /* 1391 */ 'S', 'W', '1', '9', 0,
  /* 1396 */ 'S', 'X', '1', '9', 0,
  /* 1401 */ 'S', 'F', '2', '9', 0,
  /* 1406 */ 'Q', '2', '9', 0,
  /* 1410 */ 'V', '2', '9', 0,
  /* 1414 */ 'S', 'W', '2', '9', 0,
  /* 1419 */ 'S', 'X', '2', '9', 0,
  /* 1424 */ 'S', 'F', '3', '9', 0,
  /* 1429 */ 'V', '3', '9', 0,
  /* 1433 */ 'S', 'W', '3', '9', 0,
  /* 1438 */ 'S', 'X', '3', '9', 0,
  /* 1443 */ 'S', 'F', '4', '9', 0,
  /* 1448 */ 'V', '4', '9', 0,
  /* 1452 */ 'S', 'W', '4', '9', 0,
  /* 1457 */ 'S', 'X', '4', '9', 0,
  /* 1462 */ 'S', 'F', '5', '9', 0,
  /* 1467 */ 'V', '5', '9', 0,
  /* 1471 */ 'S', 'W', '5', '9', 0,
  /* 1476 */ 'S', 'X', '5', '9', 0,
  /* 1481 */ 'P', 'M', 'C', '9', 0,
  /* 1486 */ 'S', 'F', '9', 0,
  /* 1490 */ 'V', 'M', '9', 0,
  /* 1494 */ 'Q', '9', 0,
  /* 1497 */ 'V', '9', 0,
  /* 1500 */ 'S', 'W', '9', 0,
  /* 1504 */ 'S', 'X', '9', 0,
  /* 1508 */ 'U', 'S', 'R', 'C', 'C', 0,
  /* 1514 */ 'I', 'C', 0,
  /* 1517 */ 'V', 'L', 0,
  /* 1520 */ 'S', 'A', 'R', 0,
  /* 1524 */ 'P', 'M', 'M', 'R', 0,
  /* 1529 */ 'P', 'S', 'W', 0,
  /* 1533 */ 'V', 'I', 'X', 0,
  0
};

extern const MCRegisterDesc VERegDesc[] = { // Descriptors
  { 5, 0, 0, 0, 0, 0 },
  { 1514, 2, 2, 2, 7505, 0 },
  { 1524, 2, 2, 2, 7505, 0 },
  { 1529, 2, 2, 2, 7505, 0 },
  { 1520, 2, 2, 2, 7505, 0 },
  { 1508, 2, 2, 2, 7505, 0 },
  { 1533, 2, 2, 2, 7505, 0 },
  { 1517, 2, 2, 2, 7505, 0 },
  { 137, 2, 2, 2, 7505, 0 },
  { 312, 2, 2, 2, 7505, 0 },
  { 483, 2, 2, 2, 7505, 0 },
  { 654, 2, 2, 2, 7505, 0 },
  { 806, 2, 2, 2, 7505, 0 },
  { 946, 2, 2, 2, 7505, 0 },
  { 1081, 2, 2, 2, 7505, 0 },
  { 1216, 2, 2, 2, 7505, 0 },
  { 1351, 2, 2, 2, 7505, 0 },
  { 1481, 2, 2, 2, 7505, 0 },
  { 0, 2, 2, 2, 7505, 0 },
  { 175, 2, 2, 2, 7505, 0 },
  { 350, 2, 2, 2, 7505, 0 },
  { 521, 2, 2, 2, 7505, 0 },
  { 692, 2, 2, 2, 7505, 0 },
  { 158, 2, 2, 2, 7505, 0 },
  { 333, 2, 2, 2, 7505, 0 },
  { 504, 2, 2, 2, 7505, 0 },
  { 675, 2, 2, 2, 7505, 0 },
  { 155, 243, 2, 6, 50, 7 },
  { 330, 250, 2, 6, 50, 7 },
  { 501, 257, 2, 6, 50, 7 },
  { 672, 264, 2, 6, 50, 7 },
  { 824, 271, 2, 6, 50, 7 },
  { 964, 278, 2, 6, 50, 7 },
  { 1099, 285, 2, 6, 50, 7 },
  { 1234, 292, 2, 6, 50, 7 },
  { 1364, 299, 2, 6, 50, 7 },
  { 1494, 306, 2, 6, 50, 7 },
  { 16, 313, 2, 6, 50, 7 },
  { 191, 320, 2, 6, 50, 7 },
  { 366, 327, 2, 6, 50, 7 },
  { 537, 334, 2, 6, 50, 7 },
  { 708, 341, 2, 6, 50, 7 },
  { 848, 348, 2, 6, 50, 7 },
  { 983, 355, 2, 6, 50, 7 },
  { 1118, 362, 2, 6, 50, 7 },
  { 1253, 369, 2, 6, 50, 7 },
  { 1383, 376, 2, 6, 50, 7 },
  { 39, 383, 2, 6, 50, 7 },
  { 214, 390, 2, 6, 50, 7 },
  { 389, 397, 2, 6, 50, 7 },
  { 560, 404, 2, 6, 50, 7 },
  { 731, 411, 2, 6, 50, 7 },
  { 871, 418, 2, 6, 50, 7 },
  { 1006, 425, 2, 6, 50, 7 },
  { 1141, 432, 2, 6, 50, 7 },
  { 1276, 439, 2, 6, 50, 7 },
  { 1406, 446, 2, 6, 50, 7 },
  { 62, 453, 2, 6, 50, 7 },
  { 237, 460, 2, 6, 50, 7 },
  { 142, 2, 238, 2, 7473, 0 },
  { 317, 2, 232, 2, 7473, 0 },
  { 488, 2, 232, 2, 7473, 0 },
  { 659, 2, 226, 2, 7473, 0 },
  { 811, 2, 226, 2, 7473, 0 },
  { 951, 2, 220, 2, 7473, 0 },
  { 1086, 2, 220, 2, 7473, 0 },
  { 1221, 2, 214, 2, 7473, 0 },
  { 1356, 2, 214, 2, 7473, 0 },
  { 1486, 2, 208, 2, 7473, 0 },
  { 6, 2, 208, 2, 7473, 0 },
  { 181, 2, 202, 2, 7473, 0 },
  { 356, 2, 202, 2, 7473, 0 },
  { 527, 2, 196, 2, 7473, 0 },
  { 698, 2, 196, 2, 7473, 0 },
  { 838, 2, 190, 2, 7473, 0 },
  { 978, 2, 190, 2, 7473, 0 },
  { 1113, 2, 184, 2, 7473, 0 },
  { 1248, 2, 184, 2, 7473, 0 },
  { 1378, 2, 178, 2, 7473, 0 },
  { 34, 2, 178, 2, 7473, 0 },
  { 209, 2, 172, 2, 7473, 0 },
  { 384, 2, 172, 2, 7473, 0 },
  { 555, 2, 166, 2, 7473, 0 },
  { 726, 2, 166, 2, 7473, 0 },
  { 866, 2, 160, 2, 7473, 0 },
  { 1001, 2, 160, 2, 7473, 0 },
  { 1136, 2, 154, 2, 7473, 0 },
  { 1271, 2, 154, 2, 7473, 0 },
  { 1401, 2, 148, 2, 7473, 0 },
  { 57, 2, 148, 2, 7473, 0 },
  { 232, 2, 142, 2, 7473, 0 },
  { 407, 2, 142, 2, 7473, 0 },
  { 578, 2, 136, 2, 7473, 0 },
  { 749, 2, 136, 2, 7473, 0 },
  { 889, 2, 130, 2, 7473, 0 },
  { 1024, 2, 130, 2, 7473, 0 },
  { 1159, 2, 124, 2, 7473, 0 },
  { 1294, 2, 124, 2, 7473, 0 },
  { 1424, 2, 118, 2, 7473, 0 },
  { 80, 2, 118, 2, 7473, 0 },
  { 255, 2, 112, 2, 7473, 0 },
  { 426, 2, 112, 2, 7473, 0 },
  { 597, 2, 106, 2, 7473, 0 },
  { 768, 2, 106, 2, 7473, 0 },
  { 908, 2, 100, 2, 7473, 0 },
  { 1043, 2, 100, 2, 7473, 0 },
  { 1178, 2, 94, 2, 7473, 0 },
  { 1313, 2, 94, 2, 7473, 0 },
  { 1443, 2, 88, 2, 7473, 0 },
  { 99, 2, 88, 2, 7473, 0 },
  { 274, 2, 82, 2, 7473, 0 },
  { 445, 2, 82, 2, 7473, 0 },
  { 616, 2, 76, 2, 7473, 0 },
  { 787, 2, 76, 2, 7473, 0 },
  { 927, 2, 70, 2, 7473, 0 },
  { 1062, 2, 70, 2, 7473, 0 },
  { 1197, 2, 64, 2, 7473, 0 },
  { 1332, 2, 64, 2, 7473, 0 },
  { 1462, 2, 58, 2, 7473, 0 },
  { 118, 2, 58, 2, 7473, 0 },
  { 293, 2, 52, 2, 7473, 0 },
  { 464, 2, 52, 2, 7473, 0 },
  { 635, 2, 46, 2, 7473, 0 },
  { 167, 2, 235, 2, 3857, 0 },
  { 342, 2, 229, 2, 3857, 0 },
  { 513, 2, 229, 2, 3857, 0 },
  { 684, 2, 223, 2, 3857, 0 },
  { 830, 2, 223, 2, 3857, 0 },
  { 970, 2, 217, 2, 3857, 0 },
  { 1105, 2, 217, 2, 3857, 0 },
  { 1240, 2, 211, 2, 3857, 0 },
  { 1370, 2, 211, 2, 3857, 0 },
  { 1500, 2, 205, 2, 3857, 0 },
  { 24, 2, 205, 2, 3857, 0 },
  { 199, 2, 199, 2, 3857, 0 },
  { 374, 2, 199, 2, 3857, 0 },
  { 545, 2, 193, 2, 3857, 0 },
  { 716, 2, 193, 2, 3857, 0 },
  { 856, 2, 187, 2, 3857, 0 },
  { 991, 2, 187, 2, 3857, 0 },
  { 1126, 2, 181, 2, 3857, 0 },
  { 1261, 2, 181, 2, 3857, 0 },
  { 1391, 2, 175, 2, 3857, 0 },
  { 47, 2, 175, 2, 3857, 0 },
  { 222, 2, 169, 2, 3857, 0 },
  { 397, 2, 169, 2, 3857, 0 },
  { 568, 2, 163, 2, 3857, 0 },
  { 739, 2, 163, 2, 3857, 0 },
  { 879, 2, 157, 2, 3857, 0 },
  { 1014, 2, 157, 2, 3857, 0 },
  { 1149, 2, 151, 2, 3857, 0 },
  { 1284, 2, 151, 2, 3857, 0 },
  { 1414, 2, 145, 2, 3857, 0 },
  { 70, 2, 145, 2, 3857, 0 },
  { 245, 2, 139, 2, 3857, 0 },
  { 416, 2, 139, 2, 3857, 0 },
  { 587, 2, 133, 2, 3857, 0 },
  { 758, 2, 133, 2, 3857, 0 },
  { 898, 2, 127, 2, 3857, 0 },
  { 1033, 2, 127, 2, 3857, 0 },
  { 1168, 2, 121, 2, 3857, 0 },
  { 1303, 2, 121, 2, 3857, 0 },
  { 1433, 2, 115, 2, 3857, 0 },
  { 89, 2, 115, 2, 3857, 0 },
  { 264, 2, 109, 2, 3857, 0 },
  { 435, 2, 109, 2, 3857, 0 },
  { 606, 2, 103, 2, 3857, 0 },
  { 777, 2, 103, 2, 3857, 0 },
  { 917, 2, 97, 2, 3857, 0 },
  { 1052, 2, 97, 2, 3857, 0 },
  { 1187, 2, 91, 2, 3857, 0 },
  { 1322, 2, 91, 2, 3857, 0 },
  { 1452, 2, 85, 2, 3857, 0 },
  { 108, 2, 85, 2, 3857, 0 },
  { 283, 2, 79, 2, 3857, 0 },
  { 454, 2, 79, 2, 3857, 0 },
  { 625, 2, 73, 2, 3857, 0 },
  { 796, 2, 73, 2, 3857, 0 },
  { 936, 2, 67, 2, 3857, 0 },
  { 1071, 2, 67, 2, 3857, 0 },
  { 1206, 2, 61, 2, 3857, 0 },
  { 1341, 2, 61, 2, 3857, 0 },
  { 1471, 2, 55, 2, 3857, 0 },
  { 127, 2, 55, 2, 3857, 0 },
  { 302, 2, 49, 2, 3857, 0 },
  { 473, 2, 49, 2, 3857, 0 },
  { 644, 2, 43, 2, 3857, 0 },
  { 171, 247, 236, 0, 3681, 2 },
  { 346, 247, 230, 0, 3681, 2 },
  { 517, 247, 230, 0, 3681, 2 },
  { 688, 247, 224, 0, 3681, 2 },
  { 834, 247, 224, 0, 3681, 2 },
  { 974, 247, 218, 0, 3681, 2 },
  { 1109, 247, 218, 0, 3681, 2 },
  { 1244, 247, 212, 0, 3681, 2 },
  { 1374, 247, 212, 0, 3681, 2 },
  { 1504, 247, 206, 0, 3681, 2 },
  { 29, 247, 206, 0, 3681, 2 },
  { 204, 247, 200, 0, 3681, 2 },
  { 379, 247, 200, 0, 3681, 2 },
  { 550, 247, 194, 0, 3681, 2 },
  { 721, 247, 194, 0, 3681, 2 },
  { 861, 247, 188, 0, 3681, 2 },
  { 996, 247, 188, 0, 3681, 2 },
  { 1131, 247, 182, 0, 3681, 2 },
  { 1266, 247, 182, 0, 3681, 2 },
  { 1396, 247, 176, 0, 3681, 2 },
  { 52, 247, 176, 0, 3681, 2 },
  { 227, 247, 170, 0, 3681, 2 },
  { 402, 247, 170, 0, 3681, 2 },
  { 573, 247, 164, 0, 3681, 2 },
  { 744, 247, 164, 0, 3681, 2 },
  { 884, 247, 158, 0, 3681, 2 },
  { 1019, 247, 158, 0, 3681, 2 },
  { 1154, 247, 152, 0, 3681, 2 },
  { 1289, 247, 152, 0, 3681, 2 },
  { 1419, 247, 146, 0, 3681, 2 },
  { 75, 247, 146, 0, 3681, 2 },
  { 250, 247, 140, 0, 3681, 2 },
  { 421, 247, 140, 0, 3681, 2 },
  { 592, 247, 134, 0, 3681, 2 },
  { 763, 247, 134, 0, 3681, 2 },
  { 903, 247, 128, 0, 3681, 2 },
  { 1038, 247, 128, 0, 3681, 2 },
  { 1173, 247, 122, 0, 3681, 2 },
  { 1308, 247, 122, 0, 3681, 2 },
  { 1438, 247, 116, 0, 3681, 2 },
  { 94, 247, 116, 0, 3681, 2 },
  { 269, 247, 110, 0, 3681, 2 },
  { 440, 247, 110, 0, 3681, 2 },
  { 611, 247, 104, 0, 3681, 2 },
  { 782, 247, 104, 0, 3681, 2 },
  { 922, 247, 98, 0, 3681, 2 },
  { 1057, 247, 98, 0, 3681, 2 },
  { 1192, 247, 92, 0, 3681, 2 },
  { 1327, 247, 92, 0, 3681, 2 },
  { 1457, 247, 86, 0, 3681, 2 },
  { 113, 247, 86, 0, 3681, 2 },
  { 288, 247, 80, 0, 3681, 2 },
  { 459, 247, 80, 0, 3681, 2 },
  { 630, 247, 74, 0, 3681, 2 },
  { 801, 247, 74, 0, 3681, 2 },
  { 941, 247, 68, 0, 3681, 2 },
  { 1076, 247, 68, 0, 3681, 2 },
  { 1211, 247, 62, 0, 3681, 2 },
  { 1346, 247, 62, 0, 3681, 2 },
  { 1476, 247, 56, 0, 3681, 2 },
  { 132, 247, 56, 0, 3681, 2 },
  { 307, 247, 50, 0, 3681, 2 },
  { 478, 247, 50, 0, 3681, 2 },
  { 649, 247, 44, 0, 3681, 2 },
  { 164, 2, 2, 2, 3681, 0 },
  { 339, 2, 2, 2, 3681, 0 },
  { 510, 2, 2, 2, 3681, 0 },
  { 681, 2, 2, 2, 3681, 0 },
  { 827, 2, 2, 2, 3681, 0 },
  { 967, 2, 2, 2, 3681, 0 },
  { 1102, 2, 2, 2, 3681, 0 },
  { 1237, 2, 2, 2, 3681, 0 },
  { 1367, 2, 2, 2, 3681, 0 },
  { 1497, 2, 2, 2, 3681, 0 },
  { 20, 2, 2, 2, 3681, 0 },
  { 195, 2, 2, 2, 3681, 0 },
  { 370, 2, 2, 2, 3681, 0 },
  { 541, 2, 2, 2, 3681, 0 },
  { 712, 2, 2, 2, 3681, 0 },
  { 852, 2, 2, 2, 3681, 0 },
  { 987, 2, 2, 2, 3681, 0 },
  { 1122, 2, 2, 2, 3681, 0 },
  { 1257, 2, 2, 2, 3681, 0 },
  { 1387, 2, 2, 2, 3681, 0 },
  { 43, 2, 2, 2, 3681, 0 },
  { 218, 2, 2, 2, 3681, 0 },
  { 393, 2, 2, 2, 3681, 0 },
  { 564, 2, 2, 2, 3681, 0 },
  { 735, 2, 2, 2, 3681, 0 },
  { 875, 2, 2, 2, 3681, 0 },
  { 1010, 2, 2, 2, 3681, 0 },
  { 1145, 2, 2, 2, 3681, 0 },
  { 1280, 2, 2, 2, 3681, 0 },
  { 1410, 2, 2, 2, 3681, 0 },
  { 66, 2, 2, 2, 3681, 0 },
  { 241, 2, 2, 2, 3681, 0 },
  { 412, 2, 2, 2, 3681, 0 },
  { 583, 2, 2, 2, 3681, 0 },
  { 754, 2, 2, 2, 3681, 0 },
  { 894, 2, 2, 2, 3681, 0 },
  { 1029, 2, 2, 2, 3681, 0 },
  { 1164, 2, 2, 2, 3681, 0 },
  { 1299, 2, 2, 2, 3681, 0 },
  { 1429, 2, 2, 2, 3681, 0 },
  { 85, 2, 2, 2, 3681, 0 },
  { 260, 2, 2, 2, 3681, 0 },
  { 431, 2, 2, 2, 3681, 0 },
  { 602, 2, 2, 2, 3681, 0 },
  { 773, 2, 2, 2, 3681, 0 },
  { 913, 2, 2, 2, 3681, 0 },
  { 1048, 2, 2, 2, 3681, 0 },
  { 1183, 2, 2, 2, 3681, 0 },
  { 1318, 2, 2, 2, 3681, 0 },
  { 1448, 2, 2, 2, 3681, 0 },
  { 104, 2, 2, 2, 3681, 0 },
  { 279, 2, 2, 2, 3681, 0 },
  { 450, 2, 2, 2, 3681, 0 },
  { 621, 2, 2, 2, 3681, 0 },
  { 792, 2, 2, 2, 3681, 0 },
  { 932, 2, 2, 2, 3681, 0 },
  { 1067, 2, 2, 2, 3681, 0 },
  { 1202, 2, 2, 2, 3681, 0 },
  { 1337, 2, 2, 2, 3681, 0 },
  { 1467, 2, 2, 2, 3681, 0 },
  { 123, 2, 2, 2, 3681, 0 },
  { 298, 2, 2, 2, 3681, 0 },
  { 469, 2, 2, 2, 3681, 0 },
  { 640, 2, 2, 2, 3681, 0 },
  { 146, 2, 2, 2, 3681, 0 },
  { 321, 2, 2, 2, 3681, 0 },
  { 492, 2, 41, 2, 3681, 0 },
  { 663, 2, 39, 2, 3681, 0 },
  { 815, 2, 39, 2, 3681, 0 },
  { 955, 2, 37, 2, 3681, 0 },
  { 1090, 2, 37, 2, 3681, 0 },
  { 1225, 2, 35, 2, 3681, 0 },
  { 1360, 2, 35, 2, 3681, 0 },
  { 1490, 2, 33, 2, 3681, 0 },
  { 11, 2, 33, 2, 3681, 0 },
  { 186, 2, 31, 2, 3681, 0 },
  { 361, 2, 31, 2, 3681, 0 },
  { 532, 2, 29, 2, 3681, 0 },
  { 703, 2, 29, 2, 3681, 0 },
  { 843, 2, 27, 2, 3681, 0 },
  { 150, 2, 2, 2, 3681, 0 },
  { 325, 6, 2, 3, 2, 4 },
  { 496, 9, 2, 3, 2, 4 },
  { 667, 12, 2, 3, 2, 4 },
  { 819, 15, 2, 3, 2, 4 },
  { 959, 18, 2, 3, 2, 4 },
  { 1094, 21, 2, 3, 2, 4 },
  { 1229, 24, 2, 3, 2, 4 },
};

extern const MCPhysReg VERegUnitRoots[][2] = {
  { VE::IC },
  { VE::PMMR },
  { VE::PSW },
  { VE::SAR },
  { VE::USRCC },
  { VE::VIX },
  { VE::VL },
  { VE::PMC0 },
  { VE::PMC1 },
  { VE::PMC2 },
  { VE::PMC3 },
  { VE::PMC4 },
  { VE::PMC5 },
  { VE::PMC6 },
  { VE::PMC7 },
  { VE::PMC8 },
  { VE::PMC9 },
  { VE::PMC10 },
  { VE::PMC11 },
  { VE::PMC12 },
  { VE::PMC13 },
  { VE::PMC14 },
  { VE::PMCR0 },
  { VE::PMCR1 },
  { VE::PMCR2 },
  { VE::PMCR3 },
  { VE::SW0, VE::SF0 },
  { VE::SW1, VE::SF1 },
  { VE::SW2, VE::SF2 },
  { VE::SW3, VE::SF3 },
  { VE::SW4, VE::SF4 },
  { VE::SW5, VE::SF5 },
  { VE::SW6, VE::SF6 },
  { VE::SW7, VE::SF7 },
  { VE::SW8, VE::SF8 },
  { VE::SW9, VE::SF9 },
  { VE::SW10, VE::SF10 },
  { VE::SW11, VE::SF11 },
  { VE::SW12, VE::SF12 },
  { VE::SW13, VE::SF13 },
  { VE::SW14, VE::SF14 },
  { VE::SW15, VE::SF15 },
  { VE::SW16, VE::SF16 },
  { VE::SW17, VE::SF17 },
  { VE::SW18, VE::SF18 },
  { VE::SW19, VE::SF19 },
  { VE::SW20, VE::SF20 },
  { VE::SW21, VE::SF21 },
  { VE::SW22, VE::SF22 },
  { VE::SW23, VE::SF23 },
  { VE::SW24, VE::SF24 },
  { VE::SW25, VE::SF25 },
  { VE::SW26, VE::SF26 },
  { VE::SW27, VE::SF27 },
  { VE::SW28, VE::SF28 },
  { VE::SW29, VE::SF29 },
  { VE::SW30, VE::SF30 },
  { VE::SW31, VE::SF31 },
  { VE::SW32, VE::SF32 },
  { VE::SW33, VE::SF33 },
  { VE::SW34, VE::SF34 },
  { VE::SW35, VE::SF35 },
  { VE::SW36, VE::SF36 },
  { VE::SW37, VE::SF37 },
  { VE::SW38, VE::SF38 },
  { VE::SW39, VE::SF39 },
  { VE::SW40, VE::SF40 },
  { VE::SW41, VE::SF41 },
  { VE::SW42, VE::SF42 },
  { VE::SW43, VE::SF43 },
  { VE::SW44, VE::SF44 },
  { VE::SW45, VE::SF45 },
  { VE::SW46, VE::SF46 },
  { VE::SW47, VE::SF47 },
  { VE::SW48, VE::SF48 },
  { VE::SW49, VE::SF49 },
  { VE::SW50, VE::SF50 },
  { VE::SW51, VE::SF51 },
  { VE::SW52, VE::SF52 },
  { VE::SW53, VE::SF53 },
  { VE::SW54, VE::SF54 },
  { VE::SW55, VE::SF55 },
  { VE::SW56, VE::SF56 },
  { VE::SW57, VE::SF57 },
  { VE::SW58, VE::SF58 },
  { VE::SW59, VE::SF59 },
  { VE::SW60, VE::SF60 },
  { VE::SW61, VE::SF61 },
  { VE::SW62, VE::SF62 },
  { VE::SW63, VE::SF63 },
  { VE::V0 },
  { VE::V1 },
  { VE::V2 },
  { VE::V3 },
  { VE::V4 },
  { VE::V5 },
  { VE::V6 },
  { VE::V7 },
  { VE::V8 },
  { VE::V9 },
  { VE::V10 },
  { VE::V11 },
  { VE::V12 },
  { VE::V13 },
  { VE::V14 },
  { VE::V15 },
  { VE::V16 },
  { VE::V17 },
  { VE::V18 },
  { VE::V19 },
  { VE::V20 },
  { VE::V21 },
  { VE::V22 },
  { VE::V23 },
  { VE::V24 },
  { VE::V25 },
  { VE::V26 },
  { VE::V27 },
  { VE::V28 },
  { VE::V29 },
  { VE::V30 },
  { VE::V31 },
  { VE::V32 },
  { VE::V33 },
  { VE::V34 },
  { VE::V35 },
  { VE::V36 },
  { VE::V37 },
  { VE::V38 },
  { VE::V39 },
  { VE::V40 },
  { VE::V41 },
  { VE::V42 },
  { VE::V43 },
  { VE::V44 },
  { VE::V45 },
  { VE::V46 },
  { VE::V47 },
  { VE::V48 },
  { VE::V49 },
  { VE::V50 },
  { VE::V51 },
  { VE::V52 },
  { VE::V53 },
  { VE::V54 },
  { VE::V55 },
  { VE::V56 },
  { VE::V57 },
  { VE::V58 },
  { VE::V59 },
  { VE::V60 },
  { VE::V61 },
  { VE::V62 },
  { VE::V63 },
  { VE::VM0 },
  { VE::VM1 },
  { VE::VM2 },
  { VE::VM3 },
  { VE::VM4 },
  { VE::VM5 },
  { VE::VM6 },
  { VE::VM7 },
  { VE::VM8 },
  { VE::VM9 },
  { VE::VM10 },
  { VE::VM11 },
  { VE::VM12 },
  { VE::VM13 },
  { VE::VM14 },
  { VE::VM15 },
  { VE::VMP0 },
};

namespace {     // Register classes...
  // F32 Register Class...
  const MCPhysReg F32[] = {
    VE::SF0, VE::SF1, VE::SF2, VE::SF3, VE::SF4, VE::SF5, VE::SF6, VE::SF7, VE::SF34, VE::SF35, VE::SF36, VE::SF37, VE::SF38, VE::SF39, VE::SF40, VE::SF41, VE::SF42, VE::SF43, VE::SF44, VE::SF45, VE::SF46, VE::SF47, VE::SF48, VE::SF49, VE::SF50, VE::SF51, VE::SF52, VE::SF53, VE::SF54, VE::SF55, VE::SF56, VE::SF57, VE::SF58, VE::SF59, VE::SF60, VE::SF61, VE::SF62, VE::SF63, VE::SF8, VE::SF9, VE::SF10, VE::SF11, VE::SF12, VE::SF13, VE::SF14, VE::SF15, VE::SF16, VE::SF17, VE::SF18, VE::SF19, VE::SF20, VE::SF21, VE::SF22, VE::SF23, VE::SF24, VE::SF25, VE::SF26, VE::SF27, VE::SF28, VE::SF29, VE::SF30, VE::SF31, VE::SF32, VE::SF33, 
  };

  // F32 Bit set.
  const uint8_t F32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  };

  // I32 Register Class...
  const MCPhysReg I32[] = {
    VE::SW0, VE::SW1, VE::SW2, VE::SW3, VE::SW4, VE::SW5, VE::SW6, VE::SW7, VE::SW34, VE::SW35, VE::SW36, VE::SW37, VE::SW38, VE::SW39, VE::SW40, VE::SW41, VE::SW42, VE::SW43, VE::SW44, VE::SW45, VE::SW46, VE::SW47, VE::SW48, VE::SW49, VE::SW50, VE::SW51, VE::SW52, VE::SW53, VE::SW54, VE::SW55, VE::SW56, VE::SW57, VE::SW58, VE::SW59, VE::SW60, VE::SW61, VE::SW62, VE::SW63, VE::SW8, VE::SW9, VE::SW10, VE::SW11, VE::SW12, VE::SW13, VE::SW14, VE::SW15, VE::SW16, VE::SW17, VE::SW18, VE::SW19, VE::SW20, VE::SW21, VE::SW22, VE::SW23, VE::SW24, VE::SW25, VE::SW26, VE::SW27, VE::SW28, VE::SW29, VE::SW30, VE::SW31, VE::SW32, VE::SW33, 
  };

  // I32 Bit set.
  const uint8_t I32Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  };

  // VLS Register Class...
  const MCPhysReg VLS[] = {
    VE::VL, 
  };

  // VLS Bit set.
  const uint8_t VLSBits[] = {
    0x80, 
  };

  // I64 Register Class...
  const MCPhysReg I64[] = {
    VE::SX0, VE::SX1, VE::SX2, VE::SX3, VE::SX4, VE::SX5, VE::SX6, VE::SX7, VE::SX34, VE::SX35, VE::SX36, VE::SX37, VE::SX38, VE::SX39, VE::SX40, VE::SX41, VE::SX42, VE::SX43, VE::SX44, VE::SX45, VE::SX46, VE::SX47, VE::SX48, VE::SX49, VE::SX50, VE::SX51, VE::SX52, VE::SX53, VE::SX54, VE::SX55, VE::SX56, VE::SX57, VE::SX58, VE::SX59, VE::SX60, VE::SX61, VE::SX62, VE::SX63, VE::SX8, VE::SX9, VE::SX10, VE::SX11, VE::SX12, VE::SX13, VE::SX14, VE::SX15, VE::SX16, VE::SX17, VE::SX18, VE::SX19, VE::SX20, VE::SX21, VE::SX22, VE::SX23, VE::SX24, VE::SX25, VE::SX26, VE::SX27, VE::SX28, VE::SX29, VE::SX30, VE::SX31, VE::SX32, VE::SX33, 
  };

  // I64 Bit set.
  const uint8_t I64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  };

  // MISC Register Class...
  const MCPhysReg MISC[] = {
    VE::USRCC, VE::PSW, VE::SAR, VE::PMMR, VE::PMCR0, VE::PMCR1, VE::PMCR2, VE::PMCR3, VE::PMC0, VE::PMC1, VE::PMC2, VE::PMC3, VE::PMC4, VE::PMC5, VE::PMC6, VE::PMC7, VE::PMC8, VE::PMC9, VE::PMC10, VE::PMC11, VE::PMC12, VE::PMC13, VE::PMC14, 
  };

  // MISC Bit set.
  const uint8_t MISCBits[] = {
    0x3c, 0xff, 0xff, 0x07, 
  };

  // F128 Register Class...
  const MCPhysReg F128[] = {
    VE::Q0, VE::Q1, VE::Q2, VE::Q3, VE::Q17, VE::Q18, VE::Q19, VE::Q20, VE::Q21, VE::Q22, VE::Q23, VE::Q24, VE::Q25, VE::Q26, VE::Q27, VE::Q28, VE::Q29, VE::Q30, VE::Q31, VE::Q4, VE::Q5, VE::Q6, VE::Q7, VE::Q8, VE::Q9, VE::Q10, VE::Q11, VE::Q12, VE::Q13, VE::Q14, VE::Q15, VE::Q16, 
  };

  // F128 Bit set.
  const uint8_t F128Bits[] = {
    0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0x07, 
  };

  // VM Register Class...
  const MCPhysReg VM[] = {
    VE::VM0, VE::VM1, VE::VM2, VE::VM3, VE::VM4, VE::VM5, VE::VM6, VE::VM7, VE::VM8, VE::VM9, VE::VM10, VE::VM11, VE::VM12, VE::VM13, VE::VM14, VE::VM15, 
  };

  // VM Bit set.
  const uint8_t VMBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x07, 
  };

  // VM512 Register Class...
  const MCPhysReg VM512[] = {
    VE::VMP0, VE::VMP1, VE::VMP2, VE::VMP3, VE::VMP4, VE::VMP5, VE::VMP6, VE::VMP7, 
  };

  // VM512 Bit set.
  const uint8_t VM512Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // VM512_with_sub_vm_even Register Class...
  const MCPhysReg VM512_with_sub_vm_even[] = {
    VE::VMP1, VE::VMP2, VE::VMP3, VE::VMP4, VE::VMP5, VE::VMP6, VE::VMP7, 
  };

  // VM512_with_sub_vm_even Bit set.
  const uint8_t VM512_with_sub_vm_evenBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 
  };

  // V64 Register Class...
  const MCPhysReg V64[] = {
    VE::V0, VE::V1, VE::V2, VE::V3, VE::V4, VE::V5, VE::V6, VE::V7, VE::V8, VE::V9, VE::V10, VE::V11, VE::V12, VE::V13, VE::V14, VE::V15, VE::V16, VE::V17, VE::V18, VE::V19, VE::V20, VE::V21, VE::V22, VE::V23, VE::V24, VE::V25, VE::V26, VE::V27, VE::V28, VE::V29, VE::V30, VE::V31, VE::V32, VE::V33, VE::V34, VE::V35, VE::V36, VE::V37, VE::V38, VE::V39, VE::V40, VE::V41, VE::V42, VE::V43, VE::V44, VE::V45, VE::V46, VE::V47, VE::V48, VE::V49, VE::V50, VE::V51, VE::V52, VE::V53, VE::V54, VE::V55, VE::V56, VE::V57, VE::V58, VE::V59, VE::V60, VE::V61, VE::V62, VE::V63, VE::VIX, 
  };

  // V64 Bit set.
  const uint8_t V64Bits[] = {
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
  };

} // end anonymous namespace

extern const char VERegClassStrings[] = {
  /* 0 */ 'V', 'M', '5', '1', '2', 0,
  /* 6 */ 'F', '3', '2', 0,
  /* 10 */ 'I', '3', '2', 0,
  /* 14 */ 'I', '6', '4', 0,
  /* 18 */ 'V', '6', '4', 0,
  /* 22 */ 'F', '1', '2', '8', 0,
  /* 27 */ 'M', 'I', 'S', 'C', 0,
  /* 32 */ 'V', 'M', 0,
  /* 35 */ 'V', 'L', 'S', 0,
  /* 39 */ 'V', 'M', '5', '1', '2', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', 'v', 'm', '_', 'e', 'v', 'e', 'n', 0,
  0
};

extern const MCRegisterClass VEMCRegisterClasses[] = {
  { F32, F32Bits, 6, 64, sizeof(F32Bits), VE::F32RegClassID, 32, 1, true },
  { I32, I32Bits, 10, 64, sizeof(I32Bits), VE::I32RegClassID, 32, 1, true },
  { VLS, VLSBits, 35, 1, sizeof(VLSBits), VE::VLSRegClassID, 32, 1, true },
  { I64, I64Bits, 14, 64, sizeof(I64Bits), VE::I64RegClassID, 64, 1, true },
  { MISC, MISCBits, 27, 23, sizeof(MISCBits), VE::MISCRegClassID, 64, 1, true },
  { F128, F128Bits, 22, 32, sizeof(F128Bits), VE::F128RegClassID, 128, 1, true },
  { VM, VMBits, 32, 16, sizeof(VMBits), VE::VMRegClassID, 256, 1, true },
  { VM512, VM512Bits, 0, 8, sizeof(VM512Bits), VE::VM512RegClassID, 512, 1, true },
  { VM512_with_sub_vm_even, VM512_with_sub_vm_evenBits, 39, 7, sizeof(VM512_with_sub_vm_evenBits), VE::VM512_with_sub_vm_evenRegClassID, 512, 1, true },
  { V64, V64Bits, 18, 65, sizeof(V64Bits), VE::V64RegClassID, 16384, 1, true },
};

// VE Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair VEDwarfFlavour0Dwarf2L[] = {
  { 0U, VE::SX0 },
  { 1U, VE::SX1 },
  { 2U, VE::SX2 },
  { 3U, VE::SX3 },
  { 4U, VE::SX4 },
  { 5U, VE::SX5 },
  { 6U, VE::SX6 },
  { 7U, VE::SX7 },
  { 8U, VE::SX8 },
  { 9U, VE::SX9 },
  { 10U, VE::SX10 },
  { 11U, VE::SX11 },
  { 12U, VE::SX12 },
  { 13U, VE::SX13 },
  { 14U, VE::SX14 },
  { 15U, VE::SX15 },
  { 16U, VE::SX16 },
  { 17U, VE::SX17 },
  { 18U, VE::SX18 },
  { 19U, VE::SX19 },
  { 20U, VE::SX20 },
  { 21U, VE::SX21 },
  { 22U, VE::SX22 },
  { 23U, VE::SX23 },
  { 24U, VE::SX24 },
  { 25U, VE::SX25 },
  { 26U, VE::SX26 },
  { 27U, VE::SX27 },
  { 28U, VE::SX28 },
  { 29U, VE::SX29 },
  { 30U, VE::SX30 },
  { 31U, VE::SX31 },
  { 32U, VE::SX32 },
  { 33U, VE::SX33 },
  { 34U, VE::SX34 },
  { 35U, VE::SX35 },
  { 36U, VE::SX36 },
  { 37U, VE::SX37 },
  { 38U, VE::SX38 },
  { 39U, VE::SX39 },
  { 40U, VE::SX40 },
  { 41U, VE::SX41 },
  { 42U, VE::SX42 },
  { 43U, VE::SX43 },
  { 44U, VE::SX44 },
  { 45U, VE::SX45 },
  { 46U, VE::SX46 },
  { 47U, VE::SX47 },
  { 48U, VE::SX48 },
  { 49U, VE::SX49 },
  { 50U, VE::SX50 },
  { 51U, VE::SX51 },
  { 52U, VE::SX52 },
  { 53U, VE::SX53 },
  { 54U, VE::SX54 },
  { 55U, VE::SX55 },
  { 56U, VE::SX56 },
  { 57U, VE::SX57 },
  { 58U, VE::SX58 },
  { 59U, VE::SX59 },
  { 60U, VE::SX60 },
  { 61U, VE::SX61 },
  { 62U, VE::SX62 },
  { 63U, VE::SX63 },
  { 64U, VE::V0 },
  { 65U, VE::V1 },
  { 66U, VE::V2 },
  { 67U, VE::V3 },
  { 68U, VE::V4 },
  { 69U, VE::V5 },
  { 70U, VE::V6 },
  { 71U, VE::V7 },
  { 72U, VE::V8 },
  { 73U, VE::V9 },
  { 74U, VE::V10 },
  { 75U, VE::V11 },
  { 76U, VE::V12 },
  { 77U, VE::V13 },
  { 78U, VE::V14 },
  { 79U, VE::V15 },
  { 80U, VE::V16 },
  { 81U, VE::V17 },
  { 82U, VE::V18 },
  { 83U, VE::V19 },
  { 84U, VE::V20 },
  { 85U, VE::V21 },
  { 86U, VE::V22 },
  { 87U, VE::V23 },
  { 88U, VE::V24 },
  { 89U, VE::V25 },
  { 90U, VE::V26 },
  { 91U, VE::V27 },
  { 92U, VE::V28 },
  { 93U, VE::V29 },
  { 94U, VE::V30 },
  { 95U, VE::V31 },
  { 96U, VE::V32 },
  { 97U, VE::V33 },
  { 98U, VE::V34 },
  { 99U, VE::V35 },
  { 100U, VE::V36 },
  { 101U, VE::V37 },
  { 102U, VE::V38 },
  { 103U, VE::V39 },
  { 104U, VE::V40 },
  { 105U, VE::V41 },
  { 106U, VE::V42 },
  { 107U, VE::V43 },
  { 108U, VE::V44 },
  { 109U, VE::V45 },
  { 110U, VE::V46 },
  { 111U, VE::V47 },
  { 112U, VE::V48 },
  { 113U, VE::V49 },
  { 114U, VE::V50 },
  { 115U, VE::V51 },
  { 116U, VE::V52 },
  { 117U, VE::V53 },
  { 118U, VE::V54 },
  { 119U, VE::V55 },
  { 120U, VE::V56 },
  { 121U, VE::V57 },
  { 122U, VE::V58 },
  { 123U, VE::V59 },
  { 124U, VE::V60 },
  { 125U, VE::V61 },
  { 126U, VE::V62 },
  { 127U, VE::V63 },
  { 128U, VE::VM0 },
  { 129U, VE::VM1 },
  { 130U, VE::VM2 },
  { 131U, VE::VM3 },
  { 132U, VE::VM4 },
  { 133U, VE::VM5 },
  { 134U, VE::VM6 },
  { 135U, VE::VM7 },
  { 136U, VE::VM8 },
  { 137U, VE::VM9 },
  { 138U, VE::VM10 },
  { 139U, VE::VM11 },
  { 140U, VE::VM12 },
  { 141U, VE::VM13 },
  { 142U, VE::VM14 },
  { 143U, VE::VM15 },
};
extern const unsigned VEDwarfFlavour0Dwarf2LSize = array_lengthof(VEDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair VEEHFlavour0Dwarf2L[] = {
  { 0U, VE::SX0 },
  { 1U, VE::SX1 },
  { 2U, VE::SX2 },
  { 3U, VE::SX3 },
  { 4U, VE::SX4 },
  { 5U, VE::SX5 },
  { 6U, VE::SX6 },
  { 7U, VE::SX7 },
  { 8U, VE::SX8 },
  { 9U, VE::SX9 },
  { 10U, VE::SX10 },
  { 11U, VE::SX11 },
  { 12U, VE::SX12 },
  { 13U, VE::SX13 },
  { 14U, VE::SX14 },
  { 15U, VE::SX15 },
  { 16U, VE::SX16 },
  { 17U, VE::SX17 },
  { 18U, VE::SX18 },
  { 19U, VE::SX19 },
  { 20U, VE::SX20 },
  { 21U, VE::SX21 },
  { 22U, VE::SX22 },
  { 23U, VE::SX23 },
  { 24U, VE::SX24 },
  { 25U, VE::SX25 },
  { 26U, VE::SX26 },
  { 27U, VE::SX27 },
  { 28U, VE::SX28 },
  { 29U, VE::SX29 },
  { 30U, VE::SX30 },
  { 31U, VE::SX31 },
  { 32U, VE::SX32 },
  { 33U, VE::SX33 },
  { 34U, VE::SX34 },
  { 35U, VE::SX35 },
  { 36U, VE::SX36 },
  { 37U, VE::SX37 },
  { 38U, VE::SX38 },
  { 39U, VE::SX39 },
  { 40U, VE::SX40 },
  { 41U, VE::SX41 },
  { 42U, VE::SX42 },
  { 43U, VE::SX43 },
  { 44U, VE::SX44 },
  { 45U, VE::SX45 },
  { 46U, VE::SX46 },
  { 47U, VE::SX47 },
  { 48U, VE::SX48 },
  { 49U, VE::SX49 },
  { 50U, VE::SX50 },
  { 51U, VE::SX51 },
  { 52U, VE::SX52 },
  { 53U, VE::SX53 },
  { 54U, VE::SX54 },
  { 55U, VE::SX55 },
  { 56U, VE::SX56 },
  { 57U, VE::SX57 },
  { 58U, VE::SX58 },
  { 59U, VE::SX59 },
  { 60U, VE::SX60 },
  { 61U, VE::SX61 },
  { 62U, VE::SX62 },
  { 63U, VE::SX63 },
  { 64U, VE::V0 },
  { 65U, VE::V1 },
  { 66U, VE::V2 },
  { 67U, VE::V3 },
  { 68U, VE::V4 },
  { 69U, VE::V5 },
  { 70U, VE::V6 },
  { 71U, VE::V7 },
  { 72U, VE::V8 },
  { 73U, VE::V9 },
  { 74U, VE::V10 },
  { 75U, VE::V11 },
  { 76U, VE::V12 },
  { 77U, VE::V13 },
  { 78U, VE::V14 },
  { 79U, VE::V15 },
  { 80U, VE::V16 },
  { 81U, VE::V17 },
  { 82U, VE::V18 },
  { 83U, VE::V19 },
  { 84U, VE::V20 },
  { 85U, VE::V21 },
  { 86U, VE::V22 },
  { 87U, VE::V23 },
  { 88U, VE::V24 },
  { 89U, VE::V25 },
  { 90U, VE::V26 },
  { 91U, VE::V27 },
  { 92U, VE::V28 },
  { 93U, VE::V29 },
  { 94U, VE::V30 },
  { 95U, VE::V31 },
  { 96U, VE::V32 },
  { 97U, VE::V33 },
  { 98U, VE::V34 },
  { 99U, VE::V35 },
  { 100U, VE::V36 },
  { 101U, VE::V37 },
  { 102U, VE::V38 },
  { 103U, VE::V39 },
  { 104U, VE::V40 },
  { 105U, VE::V41 },
  { 106U, VE::V42 },
  { 107U, VE::V43 },
  { 108U, VE::V44 },
  { 109U, VE::V45 },
  { 110U, VE::V46 },
  { 111U, VE::V47 },
  { 112U, VE::V48 },
  { 113U, VE::V49 },
  { 114U, VE::V50 },
  { 115U, VE::V51 },
  { 116U, VE::V52 },
  { 117U, VE::V53 },
  { 118U, VE::V54 },
  { 119U, VE::V55 },
  { 120U, VE::V56 },
  { 121U, VE::V57 },
  { 122U, VE::V58 },
  { 123U, VE::V59 },
  { 124U, VE::V60 },
  { 125U, VE::V61 },
  { 126U, VE::V62 },
  { 127U, VE::V63 },
  { 128U, VE::VM0 },
  { 129U, VE::VM1 },
  { 130U, VE::VM2 },
  { 131U, VE::VM3 },
  { 132U, VE::VM4 },
  { 133U, VE::VM5 },
  { 134U, VE::VM6 },
  { 135U, VE::VM7 },
  { 136U, VE::VM8 },
  { 137U, VE::VM9 },
  { 138U, VE::VM10 },
  { 139U, VE::VM11 },
  { 140U, VE::VM12 },
  { 141U, VE::VM13 },
  { 142U, VE::VM14 },
  { 143U, VE::VM15 },
};
extern const unsigned VEEHFlavour0Dwarf2LSize = array_lengthof(VEEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair VEDwarfFlavour0L2Dwarf[] = {
  { VE::SF0, 0U },
  { VE::SF1, 1U },
  { VE::SF2, 2U },
  { VE::SF3, 3U },
  { VE::SF4, 4U },
  { VE::SF5, 5U },
  { VE::SF6, 6U },
  { VE::SF7, 7U },
  { VE::SF8, 8U },
  { VE::SF9, 9U },
  { VE::SF10, 10U },
  { VE::SF11, 11U },
  { VE::SF12, 12U },
  { VE::SF13, 13U },
  { VE::SF14, 14U },
  { VE::SF15, 15U },
  { VE::SF16, 16U },
  { VE::SF17, 17U },
  { VE::SF18, 18U },
  { VE::SF19, 19U },
  { VE::SF20, 20U },
  { VE::SF21, 21U },
  { VE::SF22, 22U },
  { VE::SF23, 23U },
  { VE::SF24, 24U },
  { VE::SF25, 25U },
  { VE::SF26, 26U },
  { VE::SF27, 27U },
  { VE::SF28, 28U },
  { VE::SF29, 29U },
  { VE::SF30, 30U },
  { VE::SF31, 31U },
  { VE::SF32, 32U },
  { VE::SF33, 33U },
  { VE::SF34, 34U },
  { VE::SF35, 35U },
  { VE::SF36, 36U },
  { VE::SF37, 37U },
  { VE::SF38, 38U },
  { VE::SF39, 39U },
  { VE::SF40, 40U },
  { VE::SF41, 41U },
  { VE::SF42, 42U },
  { VE::SF43, 43U },
  { VE::SF44, 44U },
  { VE::SF45, 45U },
  { VE::SF46, 46U },
  { VE::SF47, 47U },
  { VE::SF48, 48U },
  { VE::SF49, 49U },
  { VE::SF50, 50U },
  { VE::SF51, 51U },
  { VE::SF52, 52U },
  { VE::SF53, 53U },
  { VE::SF54, 54U },
  { VE::SF55, 55U },
  { VE::SF56, 56U },
  { VE::SF57, 57U },
  { VE::SF58, 58U },
  { VE::SF59, 59U },
  { VE::SF60, 60U },
  { VE::SF61, 61U },
  { VE::SF62, 62U },
  { VE::SF63, 63U },
  { VE::SW0, 0U },
  { VE::SW1, 1U },
  { VE::SW2, 2U },
  { VE::SW3, 3U },
  { VE::SW4, 4U },
  { VE::SW5, 5U },
  { VE::SW6, 6U },
  { VE::SW7, 7U },
  { VE::SW8, 8U },
  { VE::SW9, 9U },
  { VE::SW10, 10U },
  { VE::SW11, 11U },
  { VE::SW12, 12U },
  { VE::SW13, 13U },
  { VE::SW14, 14U },
  { VE::SW15, 15U },
  { VE::SW16, 16U },
  { VE::SW17, 17U },
  { VE::SW18, 18U },
  { VE::SW19, 19U },
  { VE::SW20, 20U },
  { VE::SW21, 21U },
  { VE::SW22, 22U },
  { VE::SW23, 23U },
  { VE::SW24, 24U },
  { VE::SW25, 25U },
  { VE::SW26, 26U },
  { VE::SW27, 27U },
  { VE::SW28, 28U },
  { VE::SW29, 29U },
  { VE::SW30, 30U },
  { VE::SW31, 31U },
  { VE::SW32, 32U },
  { VE::SW33, 33U },
  { VE::SW34, 34U },
  { VE::SW35, 35U },
  { VE::SW36, 36U },
  { VE::SW37, 37U },
  { VE::SW38, 38U },
  { VE::SW39, 39U },
  { VE::SW40, 40U },
  { VE::SW41, 41U },
  { VE::SW42, 42U },
  { VE::SW43, 43U },
  { VE::SW44, 44U },
  { VE::SW45, 45U },
  { VE::SW46, 46U },
  { VE::SW47, 47U },
  { VE::SW48, 48U },
  { VE::SW49, 49U },
  { VE::SW50, 50U },
  { VE::SW51, 51U },
  { VE::SW52, 52U },
  { VE::SW53, 53U },
  { VE::SW54, 54U },
  { VE::SW55, 55U },
  { VE::SW56, 56U },
  { VE::SW57, 57U },
  { VE::SW58, 58U },
  { VE::SW59, 59U },
  { VE::SW60, 60U },
  { VE::SW61, 61U },
  { VE::SW62, 62U },
  { VE::SW63, 63U },
  { VE::SX0, 0U },
  { VE::SX1, 1U },
  { VE::SX2, 2U },
  { VE::SX3, 3U },
  { VE::SX4, 4U },
  { VE::SX5, 5U },
  { VE::SX6, 6U },
  { VE::SX7, 7U },
  { VE::SX8, 8U },
  { VE::SX9, 9U },
  { VE::SX10, 10U },
  { VE::SX11, 11U },
  { VE::SX12, 12U },
  { VE::SX13, 13U },
  { VE::SX14, 14U },
  { VE::SX15, 15U },
  { VE::SX16, 16U },
  { VE::SX17, 17U },
  { VE::SX18, 18U },
  { VE::SX19, 19U },
  { VE::SX20, 20U },
  { VE::SX21, 21U },
  { VE::SX22, 22U },
  { VE::SX23, 23U },
  { VE::SX24, 24U },
  { VE::SX25, 25U },
  { VE::SX26, 26U },
  { VE::SX27, 27U },
  { VE::SX28, 28U },
  { VE::SX29, 29U },
  { VE::SX30, 30U },
  { VE::SX31, 31U },
  { VE::SX32, 32U },
  { VE::SX33, 33U },
  { VE::SX34, 34U },
  { VE::SX35, 35U },
  { VE::SX36, 36U },
  { VE::SX37, 37U },
  { VE::SX38, 38U },
  { VE::SX39, 39U },
  { VE::SX40, 40U },
  { VE::SX41, 41U },
  { VE::SX42, 42U },
  { VE::SX43, 43U },
  { VE::SX44, 44U },
  { VE::SX45, 45U },
  { VE::SX46, 46U },
  { VE::SX47, 47U },
  { VE::SX48, 48U },
  { VE::SX49, 49U },
  { VE::SX50, 50U },
  { VE::SX51, 51U },
  { VE::SX52, 52U },
  { VE::SX53, 53U },
  { VE::SX54, 54U },
  { VE::SX55, 55U },
  { VE::SX56, 56U },
  { VE::SX57, 57U },
  { VE::SX58, 58U },
  { VE::SX59, 59U },
  { VE::SX60, 60U },
  { VE::SX61, 61U },
  { VE::SX62, 62U },
  { VE::SX63, 63U },
  { VE::V0, 64U },
  { VE::V1, 65U },
  { VE::V2, 66U },
  { VE::V3, 67U },
  { VE::V4, 68U },
  { VE::V5, 69U },
  { VE::V6, 70U },
  { VE::V7, 71U },
  { VE::V8, 72U },
  { VE::V9, 73U },
  { VE::V10, 74U },
  { VE::V11, 75U },
  { VE::V12, 76U },
  { VE::V13, 77U },
  { VE::V14, 78U },
  { VE::V15, 79U },
  { VE::V16, 80U },
  { VE::V17, 81U },
  { VE::V18, 82U },
  { VE::V19, 83U },
  { VE::V20, 84U },
  { VE::V21, 85U },
  { VE::V22, 86U },
  { VE::V23, 87U },
  { VE::V24, 88U },
  { VE::V25, 89U },
  { VE::V26, 90U },
  { VE::V27, 91U },
  { VE::V28, 92U },
  { VE::V29, 93U },
  { VE::V30, 94U },
  { VE::V31, 95U },
  { VE::V32, 96U },
  { VE::V33, 97U },
  { VE::V34, 98U },
  { VE::V35, 99U },
  { VE::V36, 100U },
  { VE::V37, 101U },
  { VE::V38, 102U },
  { VE::V39, 103U },
  { VE::V40, 104U },
  { VE::V41, 105U },
  { VE::V42, 106U },
  { VE::V43, 107U },
  { VE::V44, 108U },
  { VE::V45, 109U },
  { VE::V46, 110U },
  { VE::V47, 111U },
  { VE::V48, 112U },
  { VE::V49, 113U },
  { VE::V50, 114U },
  { VE::V51, 115U },
  { VE::V52, 116U },
  { VE::V53, 117U },
  { VE::V54, 118U },
  { VE::V55, 119U },
  { VE::V56, 120U },
  { VE::V57, 121U },
  { VE::V58, 122U },
  { VE::V59, 123U },
  { VE::V60, 124U },
  { VE::V61, 125U },
  { VE::V62, 126U },
  { VE::V63, 127U },
  { VE::VM0, 128U },
  { VE::VM1, 129U },
  { VE::VM2, 130U },
  { VE::VM3, 131U },
  { VE::VM4, 132U },
  { VE::VM5, 133U },
  { VE::VM6, 134U },
  { VE::VM7, 135U },
  { VE::VM8, 136U },
  { VE::VM9, 137U },
  { VE::VM10, 138U },
  { VE::VM11, 139U },
  { VE::VM12, 140U },
  { VE::VM13, 141U },
  { VE::VM14, 142U },
  { VE::VM15, 143U },
};
extern const unsigned VEDwarfFlavour0L2DwarfSize = array_lengthof(VEDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair VEEHFlavour0L2Dwarf[] = {
  { VE::SF0, 0U },
  { VE::SF1, 1U },
  { VE::SF2, 2U },
  { VE::SF3, 3U },
  { VE::SF4, 4U },
  { VE::SF5, 5U },
  { VE::SF6, 6U },
  { VE::SF7, 7U },
  { VE::SF8, 8U },
  { VE::SF9, 9U },
  { VE::SF10, 10U },
  { VE::SF11, 11U },
  { VE::SF12, 12U },
  { VE::SF13, 13U },
  { VE::SF14, 14U },
  { VE::SF15, 15U },
  { VE::SF16, 16U },
  { VE::SF17, 17U },
  { VE::SF18, 18U },
  { VE::SF19, 19U },
  { VE::SF20, 20U },
  { VE::SF21, 21U },
  { VE::SF22, 22U },
  { VE::SF23, 23U },
  { VE::SF24, 24U },
  { VE::SF25, 25U },
  { VE::SF26, 26U },
  { VE::SF27, 27U },
  { VE::SF28, 28U },
  { VE::SF29, 29U },
  { VE::SF30, 30U },
  { VE::SF31, 31U },
  { VE::SF32, 32U },
  { VE::SF33, 33U },
  { VE::SF34, 34U },
  { VE::SF35, 35U },
  { VE::SF36, 36U },
  { VE::SF37, 37U },
  { VE::SF38, 38U },
  { VE::SF39, 39U },
  { VE::SF40, 40U },
  { VE::SF41, 41U },
  { VE::SF42, 42U },
  { VE::SF43, 43U },
  { VE::SF44, 44U },
  { VE::SF45, 45U },
  { VE::SF46, 46U },
  { VE::SF47, 47U },
  { VE::SF48, 48U },
  { VE::SF49, 49U },
  { VE::SF50, 50U },
  { VE::SF51, 51U },
  { VE::SF52, 52U },
  { VE::SF53, 53U },
  { VE::SF54, 54U },
  { VE::SF55, 55U },
  { VE::SF56, 56U },
  { VE::SF57, 57U },
  { VE::SF58, 58U },
  { VE::SF59, 59U },
  { VE::SF60, 60U },
  { VE::SF61, 61U },
  { VE::SF62, 62U },
  { VE::SF63, 63U },
  { VE::SW0, 0U },
  { VE::SW1, 1U },
  { VE::SW2, 2U },
  { VE::SW3, 3U },
  { VE::SW4, 4U },
  { VE::SW5, 5U },
  { VE::SW6, 6U },
  { VE::SW7, 7U },
  { VE::SW8, 8U },
  { VE::SW9, 9U },
  { VE::SW10, 10U },
  { VE::SW11, 11U },
  { VE::SW12, 12U },
  { VE::SW13, 13U },
  { VE::SW14, 14U },
  { VE::SW15, 15U },
  { VE::SW16, 16U },
  { VE::SW17, 17U },
  { VE::SW18, 18U },
  { VE::SW19, 19U },
  { VE::SW20, 20U },
  { VE::SW21, 21U },
  { VE::SW22, 22U },
  { VE::SW23, 23U },
  { VE::SW24, 24U },
  { VE::SW25, 25U },
  { VE::SW26, 26U },
  { VE::SW27, 27U },
  { VE::SW28, 28U },
  { VE::SW29, 29U },
  { VE::SW30, 30U },
  { VE::SW31, 31U },
  { VE::SW32, 32U },
  { VE::SW33, 33U },
  { VE::SW34, 34U },
  { VE::SW35, 35U },
  { VE::SW36, 36U },
  { VE::SW37, 37U },
  { VE::SW38, 38U },
  { VE::SW39, 39U },
  { VE::SW40, 40U },
  { VE::SW41, 41U },
  { VE::SW42, 42U },
  { VE::SW43, 43U },
  { VE::SW44, 44U },
  { VE::SW45, 45U },
  { VE::SW46, 46U },
  { VE::SW47, 47U },
  { VE::SW48, 48U },
  { VE::SW49, 49U },
  { VE::SW50, 50U },
  { VE::SW51, 51U },
  { VE::SW52, 52U },
  { VE::SW53, 53U },
  { VE::SW54, 54U },
  { VE::SW55, 55U },
  { VE::SW56, 56U },
  { VE::SW57, 57U },
  { VE::SW58, 58U },
  { VE::SW59, 59U },
  { VE::SW60, 60U },
  { VE::SW61, 61U },
  { VE::SW62, 62U },
  { VE::SW63, 63U },
  { VE::SX0, 0U },
  { VE::SX1, 1U },
  { VE::SX2, 2U },
  { VE::SX3, 3U },
  { VE::SX4, 4U },
  { VE::SX5, 5U },
  { VE::SX6, 6U },
  { VE::SX7, 7U },
  { VE::SX8, 8U },
  { VE::SX9, 9U },
  { VE::SX10, 10U },
  { VE::SX11, 11U },
  { VE::SX12, 12U },
  { VE::SX13, 13U },
  { VE::SX14, 14U },
  { VE::SX15, 15U },
  { VE::SX16, 16U },
  { VE::SX17, 17U },
  { VE::SX18, 18U },
  { VE::SX19, 19U },
  { VE::SX20, 20U },
  { VE::SX21, 21U },
  { VE::SX22, 22U },
  { VE::SX23, 23U },
  { VE::SX24, 24U },
  { VE::SX25, 25U },
  { VE::SX26, 26U },
  { VE::SX27, 27U },
  { VE::SX28, 28U },
  { VE::SX29, 29U },
  { VE::SX30, 30U },
  { VE::SX31, 31U },
  { VE::SX32, 32U },
  { VE::SX33, 33U },
  { VE::SX34, 34U },
  { VE::SX35, 35U },
  { VE::SX36, 36U },
  { VE::SX37, 37U },
  { VE::SX38, 38U },
  { VE::SX39, 39U },
  { VE::SX40, 40U },
  { VE::SX41, 41U },
  { VE::SX42, 42U },
  { VE::SX43, 43U },
  { VE::SX44, 44U },
  { VE::SX45, 45U },
  { VE::SX46, 46U },
  { VE::SX47, 47U },
  { VE::SX48, 48U },
  { VE::SX49, 49U },
  { VE::SX50, 50U },
  { VE::SX51, 51U },
  { VE::SX52, 52U },
  { VE::SX53, 53U },
  { VE::SX54, 54U },
  { VE::SX55, 55U },
  { VE::SX56, 56U },
  { VE::SX57, 57U },
  { VE::SX58, 58U },
  { VE::SX59, 59U },
  { VE::SX60, 60U },
  { VE::SX61, 61U },
  { VE::SX62, 62U },
  { VE::SX63, 63U },
  { VE::V0, 64U },
  { VE::V1, 65U },
  { VE::V2, 66U },
  { VE::V3, 67U },
  { VE::V4, 68U },
  { VE::V5, 69U },
  { VE::V6, 70U },
  { VE::V7, 71U },
  { VE::V8, 72U },
  { VE::V9, 73U },
  { VE::V10, 74U },
  { VE::V11, 75U },
  { VE::V12, 76U },
  { VE::V13, 77U },
  { VE::V14, 78U },
  { VE::V15, 79U },
  { VE::V16, 80U },
  { VE::V17, 81U },
  { VE::V18, 82U },
  { VE::V19, 83U },
  { VE::V20, 84U },
  { VE::V21, 85U },
  { VE::V22, 86U },
  { VE::V23, 87U },
  { VE::V24, 88U },
  { VE::V25, 89U },
  { VE::V26, 90U },
  { VE::V27, 91U },
  { VE::V28, 92U },
  { VE::V29, 93U },
  { VE::V30, 94U },
  { VE::V31, 95U },
  { VE::V32, 96U },
  { VE::V33, 97U },
  { VE::V34, 98U },
  { VE::V35, 99U },
  { VE::V36, 100U },
  { VE::V37, 101U },
  { VE::V38, 102U },
  { VE::V39, 103U },
  { VE::V40, 104U },
  { VE::V41, 105U },
  { VE::V42, 106U },
  { VE::V43, 107U },
  { VE::V44, 108U },
  { VE::V45, 109U },
  { VE::V46, 110U },
  { VE::V47, 111U },
  { VE::V48, 112U },
  { VE::V49, 113U },
  { VE::V50, 114U },
  { VE::V51, 115U },
  { VE::V52, 116U },
  { VE::V53, 117U },
  { VE::V54, 118U },
  { VE::V55, 119U },
  { VE::V56, 120U },
  { VE::V57, 121U },
  { VE::V58, 122U },
  { VE::V59, 123U },
  { VE::V60, 124U },
  { VE::V61, 125U },
  { VE::V62, 126U },
  { VE::V63, 127U },
  { VE::VM0, 128U },
  { VE::VM1, 129U },
  { VE::VM2, 130U },
  { VE::VM3, 131U },
  { VE::VM4, 132U },
  { VE::VM5, 133U },
  { VE::VM6, 134U },
  { VE::VM7, 135U },
  { VE::VM8, 136U },
  { VE::VM9, 137U },
  { VE::VM10, 138U },
  { VE::VM11, 139U },
  { VE::VM12, 140U },
  { VE::VM13, 141U },
  { VE::VM14, 142U },
  { VE::VM15, 143U },
};
extern const unsigned VEEHFlavour0L2DwarfSize = array_lengthof(VEEHFlavour0L2Dwarf);

extern const uint16_t VERegEncodingTable[] = {
  0,
  62,
  7,
  1,
  2,
  0,
  255,
  63,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  8,
  9,
  10,
  11,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  32,
  34,
  36,
  38,
  40,
  42,
  44,
  46,
  48,
  50,
  52,
  54,
  56,
  58,
  60,
  62,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
};
static inline void InitVEMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(VERegDesc, 339, RA, PC, VEMCRegisterClasses, 10, VERegUnitRoots, 171, VERegDiffLists, VELaneMaskLists, VERegStrings, VERegClassStrings, VESubRegIdxLists, 9,
VESubRegIdxRanges, VERegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(VEDwarfFlavour0Dwarf2L, VEDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(VEEHFlavour0Dwarf2L, VEEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(VEDwarfFlavour0L2Dwarf, VEDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(VEEHFlavour0L2Dwarf, VEEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/CodeGen/TargetRegisterInfo.h"

namespace llvm {

class VEFrameLowering;

struct VEGenRegisterInfo : public TargetRegisterInfo {
  explicit VEGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0,
      unsigned PC = 0, unsigned HwMode = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass *, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  bool isGeneralPurposeRegister(const MachineFunction &, MCRegister) const override;
  bool isFixedRegister(const MachineFunction &, MCRegister) const override;
  bool isArgumentRegister(const MachineFunction &, MCRegister) const override;
  /// Devirtualized TargetFrameLowering.
  static const VEFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace VE { // Register classes
  extern const TargetRegisterClass F32RegClass;
  extern const TargetRegisterClass I32RegClass;
  extern const TargetRegisterClass VLSRegClass;
  extern const TargetRegisterClass I64RegClass;
  extern const TargetRegisterClass MISCRegClass;
  extern const TargetRegisterClass F128RegClass;
  extern const TargetRegisterClass VMRegClass;
  extern const TargetRegisterClass VM512RegClass;
  extern const TargetRegisterClass VM512_with_sub_vm_evenRegClass;
  extern const TargetRegisterClass V64RegClass;
} // end namespace VE

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass VEMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i64, MVT::Other,
  /* 4 */ MVT::f32, MVT::Other,
  /* 6 */ MVT::i64, MVT::f64, MVT::Other,
  /* 9 */ MVT::f128, MVT::Other,
  /* 11 */ MVT::v256i1, MVT::Other,
  /* 13 */ MVT::v512i1, MVT::Other,
  /* 15 */ MVT::v256f64, MVT::v512i32, MVT::v512f32, MVT::v256i64, MVT::v256i32, MVT::v256f32, MVT::Other,
};

static const char *SubRegIndexNameTable[] = { "sub_even", "sub_f32", "sub_i32", "sub_odd", "sub_vm_even", "sub_vm_odd", "sub_odd_then_sub_f32", "sub_odd_then_sub_i32", "" };


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x0000000000000003), // sub_even
  LaneBitmask(0x0000000000000001), // sub_f32
  LaneBitmask(0x0000000000000002), // sub_i32
  LaneBitmask(0x0000000000000030), // sub_odd
  LaneBitmask(0x0000000000000004), // sub_vm_even
  LaneBitmask(0x0000000000000008), // sub_vm_odd
  LaneBitmask(0x0000000000000010), // sub_odd_then_sub_f32
  LaneBitmask(0x0000000000000020), // sub_odd_then_sub_i32
 };



static const TargetRegisterInfo::RegClassInfo RegClassInfos[] = {
  // Mode = 0 (Default)
  { 32, 32, 32, VTLists+4 },    // F32
  { 32, 32, 32, VTLists+0 },    // I32
  { 32, 32, 64, VTLists+0 },    // VLS
  { 64, 64, 64, VTLists+6 },    // I64
  { 64, 64, 64, VTLists+2 },    // MISC
  { 128, 128, 128, VTLists+9 },    // F128
  { 256, 256, 64, VTLists+11 },    // VM
  { 512, 512, 64, VTLists+13 },    // VM512
  { 512, 512, 64, VTLists+13 },    // VM512_with_sub_vm_even
  { 16384, 16384, 64, VTLists+15 },    // V64
};

static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t F32SubClassMask[] = {
  0x00000001, 
  0x00000028, // sub_f32
  0x00000020, // sub_odd_then_sub_f32
};

static const uint32_t I32SubClassMask[] = {
  0x00000002, 
  0x00000028, // sub_i32
  0x00000020, // sub_odd_then_sub_i32
};

static const uint32_t VLSSubClassMask[] = {
  0x00000004, 
};

static const uint32_t I64SubClassMask[] = {
  0x00000008, 
  0x00000020, // sub_even
  0x00000020, // sub_odd
};

static const uint32_t MISCSubClassMask[] = {
  0x00000010, 
};

static const uint32_t F128SubClassMask[] = {
  0x00000020, 
};

static const uint32_t VMSubClassMask[] = {
  0x00000040, 
  0x00000100, // sub_vm_even
  0x00000100, // sub_vm_odd
};

static const uint32_t VM512SubClassMask[] = {
  0x00000180, 
};

static const uint32_t VM512_with_sub_vm_evenSubClassMask[] = {
  0x00000100, 
};

static const uint32_t V64SubClassMask[] = {
  0x00000200, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 4, 0,
  /* 3 */ 5, 6, 0,
  /* 6 */ 2, 7, 0,
  /* 9 */ 3, 8, 0,
};

static const TargetRegisterClass *const VM512_with_sub_vm_evenSuperclasses[] = {
  &VE::VM512RegClass,
  nullptr
};


namespace VE {   // Register class instances
  extern const TargetRegisterClass F32RegClass = {
    &VEMCRegisterClasses[F32RegClassID],
    F32SubClassMask,
    SuperRegIdxSeqs + 6,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass I32RegClass = {
    &VEMCRegisterClasses[I32RegClassID],
    I32SubClassMask,
    SuperRegIdxSeqs + 9,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VLSRegClass = {
    &VEMCRegisterClasses[VLSRegClassID],
    VLSSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass I64RegClass = {
    &VEMCRegisterClasses[I64RegClassID],
    I64SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass MISCRegClass = {
    &VEMCRegisterClasses[MISCRegClassID],
    MISCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass F128RegClass = {
    &VEMCRegisterClasses[F128RegClassID],
    F128SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000033),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VMRegClass = {
    &VEMCRegisterClasses[VMRegClassID],
    VMSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VM512RegClass = {
    &VEMCRegisterClasses[VM512RegClassID],
    VM512SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x000000000000000C),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VM512_with_sub_vm_evenRegClass = {
    &VEMCRegisterClasses[VM512_with_sub_vm_evenRegClassID],
    VM512_with_sub_vm_evenSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x000000000000000C),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    VM512_with_sub_vm_evenSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass V64RegClass = {
    &VEMCRegisterClasses[V64RegClassID],
    V64SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

} // end namespace VE

namespace {
  const TargetRegisterClass *const RegisterClasses[] = {
    &VE::F32RegClass,
    &VE::I32RegClass,
    &VE::VLSRegClass,
    &VE::I64RegClass,
    &VE::MISCRegClass,
    &VE::F128RegClass,
    &VE::VMRegClass,
    &VE::VM512RegClass,
    &VE::VM512_with_sub_vm_evenRegClass,
    &VE::V64RegClass,
  };
} // end anonymous namespace

static const uint8_t CostPerUseTable[] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


static const bool InAllocatableClassTable[] = { 
false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, };


static const TargetRegisterInfoDesc VERegInfoDesc = { // Extra Descriptors
CostPerUseTable, 1, InAllocatableClassTable};

unsigned VEGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[8] = {
    0, 0, 0, 1, 0, 0, 0, 0, 
  };
  static const uint8_t Rows[2][8] = {
    { 0, VE::sub_f32, VE::sub_i32, 0, 0, 0, 0, 0, },
    { 0, VE::sub_odd_then_sub_f32, VE::sub_odd_then_sub_i32, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 8); (void) IdxA;
  --IdxB; assert(IdxB < 8);
  return Rows[RowMap[IdxA]][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 },   // Sequence 0
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  1 }, { LaneBitmask::getNone(), 0 },   // Sequence 2
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  4 }, { LaneBitmask::getNone(), 0 },   // Sequence 4
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 6
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  3 }, { LaneBitmask::getNone(), 0 },   // Sequence 8
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  5 }, { LaneBitmask::getNone(), 0 }  // Sequence 10
  };
  static const uint8_t CompositeSequences[] = {
    0, // to sub_even
    0, // to sub_f32
    2, // to sub_i32
    4, // to sub_odd
    6, // to sub_vm_even
    8, // to sub_vm_odd
    4, // to sub_odd_then_sub_f32
    10 // to sub_odd_then_sub_i32
  };

LaneBitmask VEGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 8 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask VEGenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 8 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *VEGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[10][8] = {
    {	// F32
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// I32
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// VLS
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// I64
      0,	// sub_even
      4,	// sub_f32 -> I64
      4,	// sub_i32 -> I64
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// MISC
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// F128
      6,	// sub_even -> F128
      6,	// sub_f32 -> F128
      6,	// sub_i32 -> F128
      6,	// sub_odd -> F128
      0,	// sub_vm_even
      0,	// sub_vm_odd
      6,	// sub_odd_then_sub_f32 -> F128
      6,	// sub_odd_then_sub_i32 -> F128
    },
    {	// VM
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// VM512
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      9,	// sub_vm_even -> VM512_with_sub_vm_even
      9,	// sub_vm_odd -> VM512_with_sub_vm_even
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// VM512_with_sub_vm_even
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      9,	// sub_vm_even -> VM512_with_sub_vm_even
      9,	// sub_vm_odd -> VM512_with_sub_vm_even
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
    {	// V64
      0,	// sub_even
      0,	// sub_f32
      0,	// sub_i32
      0,	// sub_odd
      0,	// sub_vm_even
      0,	// sub_vm_odd
      0,	// sub_odd_then_sub_f32
      0,	// sub_odd_then_sub_i32
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 8 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &VEGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 64},  	// F32
    {1, 64},  	// I32
    {1, 1},  	// VLS
    {1, 64},  	// I64
    {1, 23},  	// MISC
    {2, 64},  	// F128
    {1, 16},  	// VM
    {2, 16},  	// VM512
    {2, 14},  	// VM512_with_sub_vm_even
    {1, 65},  	// V64
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned VEGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned VEGenRegisterInfo::getNumRegPressureSets() const {
  return 7;
}

// Get the name of this register unit pressure set.
const char *VEGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "VLS",
    "VM512",
    "VM",
    "VM_with_VM512",
    "MISC",
    "F32",
    "V64",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned VEGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    1,  	// 0: VLS
    16,  	// 1: VM512
    16,  	// 2: VM
    18,  	// 3: VM_with_VM512
    23,  	// 4: MISC
    64,  	// 5: F32
    65,  	// 6: V64
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
  /* 2 */ 1, 3, -1,
  /* 5 */ 1, 2, 3, -1,
  /* 9 */ 4, -1,
  /* 11 */ 5, -1,
  /* 13 */ 6, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int *VEGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    11,11,0,11,9,11,6,2,5,13,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int *VEGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    1,9,9,9,9,13,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc VERegDesc[];
extern const MCPhysReg VERegDiffLists[];
extern const LaneBitmask VELaneMaskLists[];
extern const char VERegStrings[];
extern const char VERegClassStrings[];
extern const MCPhysReg VERegUnitRoots[][2];
extern const uint16_t VESubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits VESubRegIdxRanges[];
extern const uint16_t VERegEncodingTable[];
// VE Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair VEDwarfFlavour0Dwarf2L[];
extern const unsigned VEDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair VEEHFlavour0Dwarf2L[];
extern const unsigned VEEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair VEDwarfFlavour0L2Dwarf[];
extern const unsigned VEDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair VEEHFlavour0L2Dwarf[];
extern const unsigned VEEHFlavour0L2DwarfSize;

VEGenRegisterInfo::
VEGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour,
      unsigned PC, unsigned HwMode)
  : TargetRegisterInfo(&VERegInfoDesc, RegisterClasses, RegisterClasses+10,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable,
             LaneBitmask(0xFFFFFFFFFFFFFFFF), RegClassInfos, HwMode) {
  InitMCRegisterInfo(VERegDesc, 339, RA, PC,
                     VEMCRegisterClasses, 10,
                     VERegUnitRoots,
                     171,
                     VERegDiffLists,
                     VELaneMaskLists,
                     VERegStrings,
                     VERegClassStrings,
                     VESubRegIdxLists,
                     9,
                     VESubRegIdxRanges,
                     VERegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(VEDwarfFlavour0Dwarf2L, VEDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(VEEHFlavour0Dwarf2L, VEEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(VEDwarfFlavour0L2Dwarf, VEDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(VEEHFlavour0L2Dwarf, VEEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_SaveList[] = { VE::SX18, VE::SX19, VE::SX20, VE::SX21, VE::SX22, VE::SX23, VE::SX24, VE::SX25, VE::SX26, VE::SX27, VE::SX28, VE::SX29, VE::SX30, VE::SX31, VE::SX32, VE::SX33, 0 };
static const uint32_t CSR_RegMask[] = { 0x00000000, 0x00000ff0, 0x1fffe000, 0x00000000, 0x1fffe000, 0x00000000, 0x1fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_NoRegs_SaveList[] = { 0 };
static const uint32_t CSR_NoRegs_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_preserve_all_SaveList[] = { VE::SX0, VE::SX1, VE::SX2, VE::SX3, VE::SX4, VE::SX5, VE::SX6, VE::SX7, VE::SX8, VE::SX9, VE::SX10, VE::SX11, VE::SX12, VE::SX13, VE::SX14, VE::SX15, VE::SX16, VE::SX17, VE::SX18, VE::SX19, VE::SX20, VE::SX21, VE::SX22, VE::SX23, VE::SX24, VE::SX25, VE::SX26, VE::SX27, VE::SX28, VE::SX29, VE::SX30, VE::SX31, VE::SX32, VE::SX33, VE::SX34, VE::SX35, VE::SX36, VE::SX37, VE::SX38, VE::SX39, VE::SX40, VE::SX41, VE::SX42, VE::SX43, VE::SX44, VE::SX45, VE::SX46, VE::SX47, VE::SX48, VE::SX49, VE::SX50, VE::SX51, VE::SX52, VE::SX53, VE::SX54, VE::SX55, VE::SX56, VE::SX57, VE::SX58, VE::SX59, VE::SX60, VE::SX61, VE::V0, VE::V1, VE::V2, VE::V3, VE::V4, VE::V5, VE::V6, VE::V7, VE::V8, VE::V9, VE::V10, VE::V11, VE::V12, VE::V13, VE::V14, VE::V15, VE::V16, VE::V17, VE::V18, VE::V19, VE::V20, VE::V21, VE::V22, VE::V23, VE::V24, VE::V25, VE::V26, VE::V27, VE::V28, VE::V29, VE::V30, VE::V31, VE::V32, VE::V33, VE::V34, VE::V35, VE::V36, VE::V37, VE::V38, VE::V39, VE::V40, VE::V41, VE::V42, VE::V43, VE::V44, VE::V45, VE::V46, VE::V47, VE::V48, VE::V49, VE::V50, VE::V51, VE::V52, VE::V53, VE::V54, VE::V55, VE::V56, VE::V57, VE::V58, VE::V59, VE::V60, VE::V61, VE::V62, VE::V63, VE::VM1, VE::VM2, VE::VM3, VE::VM4, VE::VM5, VE::VM6, VE::VM7, VE::VM8, VE::VM9, VE::VM10, VE::VM11, VE::VM12, VE::VM13, VE::VM14, VE::VM15, 0 };
static const uint32_t CSR_preserve_all_RegMask[] = { 0xf8000000, 0xfbffffff, 0xffffffff, 0xf9ffffff, 0xffffffff, 0xf9ffffff, 0xffffffff, 0xf9ffffff, 0xffffffff, 0xf7ffffff, 0x0007f7ff, };


ArrayRef<const uint32_t *> VEGenRegisterInfo::getRegMasks() const {
  static const uint32_t *const Masks[] = {
    CSR_RegMask,
    CSR_NoRegs_RegMask,
    CSR_preserve_all_RegMask,
  };
  return makeArrayRef(Masks);
}

bool VEGenRegisterInfo::
isGeneralPurposeRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool VEGenRegisterInfo::
isFixedRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool VEGenRegisterInfo::
isArgumentRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

ArrayRef<const char *> VEGenRegisterInfo::getRegMaskNames() const {
  static const char *Names[] = {
    "CSR",
    "CSR_NoRegs",
    "CSR_preserve_all",
  };
  return makeArrayRef(Names);
}

const VEFrameLowering *
VEGenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const VEFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

