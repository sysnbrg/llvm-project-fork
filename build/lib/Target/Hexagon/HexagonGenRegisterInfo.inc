/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass HexagonMCRegisterClasses[];

namespace Hexagon {
enum {
  NoRegister,
  BADVA = 1,
  CCR = 2,
  CFGBASE = 3,
  CS = 4,
  DIAG = 5,
  ELR = 6,
  EVB = 7,
  FRAMEKEY = 8,
  FRAMELIMIT = 9,
  GELR = 10,
  GOSP = 11,
  GP = 12,
  GPCYCLEHI = 13,
  GPCYCLELO = 14,
  GSR = 15,
  HTID = 16,
  IMASK = 17,
  ISDBEN = 18,
  ISDBGPR = 19,
  ISDBMBXIN = 20,
  ISDBMBXOUT = 21,
  ISDBST = 22,
  MODECTL = 23,
  PC = 24,
  PCYCLEHI = 25,
  PCYCLELO = 26,
  PKTCOUNT = 27,
  PKTCOUNTHI = 28,
  PKTCOUNTLO = 29,
  PMUCFG = 30,
  PMUEVTCFG = 31,
  REV = 32,
  SSR = 33,
  STID = 34,
  SYSCFG = 35,
  UGP = 36,
  UPCYCLE = 37,
  UPCYCLEHI = 38,
  UPCYCLELO = 39,
  USR = 40,
  USR_OVF = 41,
  UTIMER = 42,
  UTIMERHI = 43,
  UTIMERLO = 44,
  VID = 45,
  VTMP = 46,
  BADVA0 = 47,
  BADVA1 = 48,
  BRKPTCFG0 = 49,
  BRKPTCFG1 = 50,
  BRKPTPC0 = 51,
  BRKPTPC1 = 52,
  C5 = 53,
  C8 = 54,
  CS0 = 55,
  CS1 = 56,
  D0 = 57,
  D1 = 58,
  D2 = 59,
  D3 = 60,
  D4 = 61,
  D5 = 62,
  D6 = 63,
  D7 = 64,
  D8 = 65,
  D9 = 66,
  D10 = 67,
  D11 = 68,
  D12 = 69,
  D13 = 70,
  D14 = 71,
  D15 = 72,
  G3 = 73,
  G4 = 74,
  G5 = 75,
  G6 = 76,
  G7 = 77,
  G8 = 78,
  G9 = 79,
  G10 = 80,
  G11 = 81,
  G12 = 82,
  G13 = 83,
  G14 = 84,
  G15 = 85,
  G20 = 86,
  G21 = 87,
  G22 = 88,
  G23 = 89,
  G30 = 90,
  G31 = 91,
  GPMUCNT0 = 92,
  GPMUCNT1 = 93,
  GPMUCNT2 = 94,
  GPMUCNT3 = 95,
  GPMUCNT4 = 96,
  GPMUCNT5 = 97,
  GPMUCNT6 = 98,
  GPMUCNT7 = 99,
  ISDBCFG0 = 100,
  ISDBCFG1 = 101,
  LC0 = 102,
  LC1 = 103,
  M0 = 104,
  M1 = 105,
  P0 = 106,
  P1 = 107,
  P2 = 108,
  P3 = 109,
  PMUCNT0 = 110,
  PMUCNT1 = 111,
  PMUCNT2 = 112,
  PMUCNT3 = 113,
  Q0 = 114,
  Q1 = 115,
  Q2 = 116,
  Q3 = 117,
  R0 = 118,
  R1 = 119,
  R2 = 120,
  R3 = 121,
  R4 = 122,
  R5 = 123,
  R6 = 124,
  R7 = 125,
  R8 = 126,
  R9 = 127,
  R10 = 128,
  R11 = 129,
  R12 = 130,
  R13 = 131,
  R14 = 132,
  R15 = 133,
  R16 = 134,
  R17 = 135,
  R18 = 136,
  R19 = 137,
  R20 = 138,
  R21 = 139,
  R22 = 140,
  R23 = 141,
  R24 = 142,
  R25 = 143,
  R26 = 144,
  R27 = 145,
  R28 = 146,
  R29 = 147,
  R30 = 148,
  R31 = 149,
  S11 = 150,
  S12 = 151,
  S13 = 152,
  S14 = 153,
  S15 = 154,
  S19 = 155,
  S20 = 156,
  S22 = 157,
  S23 = 158,
  S24 = 159,
  S25 = 160,
  S26 = 161,
  S35 = 162,
  S44 = 163,
  S45 = 164,
  S46 = 165,
  S47 = 166,
  S54 = 167,
  S55 = 168,
  S56 = 169,
  S57 = 170,
  S58 = 171,
  S59 = 172,
  S60 = 173,
  S61 = 174,
  S62 = 175,
  S63 = 176,
  S64 = 177,
  S65 = 178,
  S66 = 179,
  S67 = 180,
  S68 = 181,
  S69 = 182,
  S70 = 183,
  S71 = 184,
  S72 = 185,
  S73 = 186,
  S74 = 187,
  S75 = 188,
  S76 = 189,
  S77 = 190,
  S78 = 191,
  S79 = 192,
  S80 = 193,
  SA0 = 194,
  SA1 = 195,
  SGP0 = 196,
  SGP1 = 197,
  V0 = 198,
  V1 = 199,
  V2 = 200,
  V3 = 201,
  V4 = 202,
  V5 = 203,
  V6 = 204,
  V7 = 205,
  V8 = 206,
  V9 = 207,
  V10 = 208,
  V11 = 209,
  V12 = 210,
  V13 = 211,
  V14 = 212,
  V15 = 213,
  V16 = 214,
  V17 = 215,
  V18 = 216,
  V19 = 217,
  V20 = 218,
  V21 = 219,
  V22 = 220,
  V23 = 221,
  V24 = 222,
  V25 = 223,
  V26 = 224,
  V27 = 225,
  V28 = 226,
  V29 = 227,
  V30 = 228,
  V31 = 229,
  VF0 = 230,
  VF1 = 231,
  VF2 = 232,
  VF3 = 233,
  VF4 = 234,
  VF5 = 235,
  VF6 = 236,
  VF7 = 237,
  VF8 = 238,
  VF9 = 239,
  VF10 = 240,
  VF11 = 241,
  VF12 = 242,
  VF13 = 243,
  VF14 = 244,
  VF15 = 245,
  VF16 = 246,
  VF17 = 247,
  VF18 = 248,
  VF19 = 249,
  VF20 = 250,
  VF21 = 251,
  VF22 = 252,
  VF23 = 253,
  VF24 = 254,
  VF25 = 255,
  VF26 = 256,
  VF27 = 257,
  VF28 = 258,
  VF29 = 259,
  VF30 = 260,
  VF31 = 261,
  VFR0 = 262,
  VFR1 = 263,
  VFR2 = 264,
  VFR3 = 265,
  VFR4 = 266,
  VFR5 = 267,
  VFR6 = 268,
  VFR7 = 269,
  VFR8 = 270,
  VFR9 = 271,
  VFR10 = 272,
  VFR11 = 273,
  VFR12 = 274,
  VFR13 = 275,
  VFR14 = 276,
  VFR15 = 277,
  VFR16 = 278,
  VFR17 = 279,
  VFR18 = 280,
  VFR19 = 281,
  VFR20 = 282,
  VFR21 = 283,
  VFR22 = 284,
  VFR23 = 285,
  VFR24 = 286,
  VFR25 = 287,
  VFR26 = 288,
  VFR27 = 289,
  VFR28 = 290,
  VFR29 = 291,
  VFR30 = 292,
  VFR31 = 293,
  VQ0 = 294,
  VQ1 = 295,
  VQ2 = 296,
  VQ3 = 297,
  VQ4 = 298,
  VQ5 = 299,
  VQ6 = 300,
  VQ7 = 301,
  W0 = 302,
  W1 = 303,
  W2 = 304,
  W3 = 305,
  W4 = 306,
  W5 = 307,
  W6 = 308,
  W7 = 309,
  W8 = 310,
  W9 = 311,
  W10 = 312,
  W11 = 313,
  W12 = 314,
  W13 = 315,
  W14 = 316,
  W15 = 317,
  WR0 = 318,
  WR1 = 319,
  WR2 = 320,
  WR3 = 321,
  WR4 = 322,
  WR5 = 323,
  WR6 = 324,
  WR7 = 325,
  WR8 = 326,
  WR9 = 327,
  WR10 = 328,
  WR11 = 329,
  WR12 = 330,
  WR13 = 331,
  WR14 = 332,
  WR15 = 333,
  C1_0 = 334,
  C3_2 = 335,
  C5_4 = 336,
  C7_6 = 337,
  C9_8 = 338,
  C11_10 = 339,
  C17_16 = 340,
  G1_0 = 341,
  G3_2 = 342,
  G5_4 = 343,
  G7_6 = 344,
  G9_8 = 345,
  G11_10 = 346,
  G13_12 = 347,
  G15_14 = 348,
  G17_16 = 349,
  G19_18 = 350,
  G21_20 = 351,
  G23_22 = 352,
  G25_24 = 353,
  G27_26 = 354,
  G29_28 = 355,
  G31_30 = 356,
  P3_0 = 357,
  S3_2 = 358,
  S5_4 = 359,
  S7_6 = 360,
  S9_8 = 361,
  S11_10 = 362,
  S13_12 = 363,
  S15_14 = 364,
  S17_16 = 365,
  S19_18 = 366,
  S21_20 = 367,
  S23_22 = 368,
  S25_24 = 369,
  S27_26 = 370,
  S29_28 = 371,
  S31_30 = 372,
  S33_32 = 373,
  S35_34 = 374,
  S37_36 = 375,
  S39_38 = 376,
  S41_40 = 377,
  S43_42 = 378,
  S45_44 = 379,
  S47_46 = 380,
  S49_48 = 381,
  S51_50 = 382,
  S53_52 = 383,
  S55_54 = 384,
  S57_56 = 385,
  S59_58 = 386,
  S61_60 = 387,
  S63_62 = 388,
  S65_64 = 389,
  S67_66 = 390,
  S69_68 = 391,
  S71_70 = 392,
  S73_72 = 393,
  S75_74 = 394,
  S77_76 = 395,
  S79_78 = 396,
  SGP1_0 = 397,
  NUM_TARGET_REGS // 398
};
} // end namespace Hexagon

// Register classes

namespace Hexagon {
enum {
  UsrBitsRegClassID = 0,
  SysRegsRegClassID = 1,
  GuestRegsRegClassID = 2,
  IntRegsRegClassID = 3,
  CtrRegsRegClassID = 4,
  GeneralSubRegsRegClassID = 5,
  V62RegsRegClassID = 6,
  IntRegsLow8RegClassID = 7,
  CtrRegs_and_V62RegsRegClassID = 8,
  PredRegsRegClassID = 9,
  V62Regs_with_isub_hiRegClassID = 10,
  ModRegsRegClassID = 11,
  CtrRegs_with_subreg_overflowRegClassID = 12,
  V65RegsRegClassID = 13,
  SysRegs64RegClassID = 14,
  DoubleRegsRegClassID = 15,
  GuestRegs64RegClassID = 16,
  VectRegRevRegClassID = 17,
  CtrRegs64RegClassID = 18,
  GeneralDoubleLow8RegsRegClassID = 19,
  DoubleRegs_with_isub_hi_in_IntRegsLow8RegClassID = 20,
  CtrRegs64_and_V62RegsRegClassID = 21,
  CtrRegs64_with_isub_hi_in_ModRegsRegClassID = 22,
  HvxQRRegClassID = 23,
  HvxVRRegClassID = 24,
  HvxVR_and_V65RegsRegClassID = 25,
  HvxWRRegClassID = 26,
  HvxWR_and_VectRegRevRegClassID = 27,
  HvxVQRRegClassID = 28,

};
} // end namespace Hexagon


// Subregister indices

namespace Hexagon {
enum : uint16_t {
  NoSubRegister,
  isub_hi,	// 1
  isub_lo,	// 2
  subreg_overflow,	// 3
  vsub_fake,	// 4
  vsub_hi,	// 5
  vsub_lo,	// 6
  wsub_hi,	// 7
  wsub_lo,	// 8
  wsub_hi_then_vsub_fake,	// 9
  wsub_hi_then_vsub_hi,	// 10
  wsub_hi_then_vsub_lo,	// 11
  NUM_TARGET_SUBREGS
};
} // end namespace Hexagon

// Register pressure sets enum.
namespace Hexagon {
enum RegisterPressureSets {
  HvxVR_and_V65Regs = 0,
  ModRegs = 1,
  PredRegs = 2,
  HvxQR = 3,
  IntRegsLow8 = 4,
  GeneralSubRegs = 5,
  IntRegs = 6,
  HvxVR = 7,
};
} // end namespace Hexagon

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const MCPhysReg HexagonRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 50, 66, 1, 1, 1, 0,
  /* 8 */ 116, 1, 1, 1, 0,
  /* 13 */ 3, 1, 0,
  /* 16 */ 13, 1, 0,
  /* 19 */ 64536, 1, 1, 1, 15, 1, 0,
  /* 26 */ 64536, 1, 1, 1, 17, 1, 0,
  /* 33 */ 18, 1, 0,
  /* 36 */ 64536, 1, 1, 1, 19, 1, 0,
  /* 43 */ 20, 1, 0,
  /* 46 */ 64536, 1, 1, 1, 21, 1, 0,
  /* 53 */ 64536, 1, 1, 1, 23, 1, 0,
  /* 60 */ 64536, 1, 1, 1, 25, 1, 0,
  /* 67 */ 64536, 1, 1, 1, 27, 1, 0,
  /* 74 */ 64536, 1, 1, 1, 29, 1, 0,
  /* 81 */ 36, 1, 0,
  /* 84 */ 38, 1, 0,
  /* 87 */ 40, 1, 0,
  /* 90 */ 44, 1, 0,
  /* 93 */ 51, 1, 0,
  /* 96 */ 61, 1, 0,
  /* 99 */ 62, 1, 0,
  /* 102 */ 63, 1, 0,
  /* 105 */ 64, 1, 0,
  /* 108 */ 65, 1, 0,
  /* 111 */ 66, 1, 0,
  /* 114 */ 67, 1, 0,
  /* 117 */ 68, 1, 0,
  /* 120 */ 69, 1, 0,
  /* 123 */ 70, 1, 0,
  /* 126 */ 71, 1, 0,
  /* 129 */ 72, 1, 0,
  /* 132 */ 73, 1, 0,
  /* 135 */ 74, 1, 0,
  /* 138 */ 75, 1, 0,
  /* 141 */ 76, 1, 0,
  /* 144 */ 100, 1, 0,
  /* 147 */ 114, 1, 0,
  /* 150 */ 63725, 1, 0,
  /* 153 */ 64864, 1, 0,
  /* 156 */ 64894, 1, 0,
  /* 159 */ 64913, 1, 0,
  /* 162 */ 64919, 1, 0,
  /* 165 */ 64930, 1, 0,
  /* 168 */ 64934, 1, 0,
  /* 171 */ 64935, 1, 0,
  /* 174 */ 64939, 1, 0,
  /* 177 */ 64944, 1, 0,
  /* 180 */ 65176, 1, 0,
  /* 183 */ 65179, 1, 0,
  /* 186 */ 65224, 1, 0,
  /* 189 */ 65265, 1, 0,
  /* 192 */ 65266, 1, 0,
  /* 195 */ 65267, 1, 0,
  /* 198 */ 65268, 1, 0,
  /* 201 */ 65269, 1, 0,
  /* 204 */ 65270, 1, 0,
  /* 207 */ 65271, 1, 0,
  /* 210 */ 65272, 1, 0,
  /* 213 */ 65274, 1, 0,
  /* 216 */ 65275, 1, 0,
  /* 219 */ 65283, 1, 0,
  /* 222 */ 65284, 1, 0,
  /* 225 */ 65303, 1, 0,
  /* 228 */ 65319, 1, 0,
  /* 231 */ 65320, 1, 0,
  /* 234 */ 65321, 1, 0,
  /* 237 */ 65322, 1, 0,
  /* 240 */ 65323, 1, 0,
  /* 243 */ 65324, 1, 0,
  /* 246 */ 65325, 1, 0,
  /* 249 */ 65326, 1, 0,
  /* 252 */ 65327, 1, 0,
  /* 255 */ 65328, 1, 0,
  /* 258 */ 65329, 1, 0,
  /* 261 */ 65335, 1, 0,
  /* 264 */ 65473, 1, 0,
  /* 267 */ 65207, 2, 0,
  /* 270 */ 65205, 5, 0,
  /* 273 */ 10, 0,
  /* 275 */ 24, 15, 0,
  /* 278 */ 0, 16, 0,
  /* 281 */ 65108, 1, 16, 0,
  /* 285 */ 15, 65446, 1, 17, 73, 65447, 1, 16, 0,
  /* 294 */ 7, 16, 0,
  /* 297 */ 65178, 16, 0,
  /* 300 */ 65108, 1, 17, 0,
  /* 304 */ 65446, 1, 17, 0,
  /* 308 */ 65108, 1, 18, 0,
  /* 312 */ 14, 65444, 1, 19, 73, 65445, 1, 18, 0,
  /* 321 */ 65108, 1, 19, 0,
  /* 325 */ 65444, 1, 19, 0,
  /* 329 */ 65108, 1, 20, 0,
  /* 333 */ 13, 65442, 1, 21, 73, 65443, 1, 20, 0,
  /* 342 */ 65108, 1, 21, 0,
  /* 346 */ 65442, 1, 21, 0,
  /* 350 */ 65108, 1, 22, 0,
  /* 354 */ 12, 65440, 1, 23, 73, 65441, 1, 22, 0,
  /* 363 */ 65108, 1, 23, 0,
  /* 367 */ 65440, 1, 23, 0,
  /* 371 */ 12, 23, 0,
  /* 374 */ 65108, 1, 24, 0,
  /* 378 */ 11, 65438, 1, 25, 73, 65439, 1, 24, 0,
  /* 387 */ 103, 65528, 24, 0,
  /* 391 */ 104, 65528, 24, 0,
  /* 395 */ 65108, 1, 25, 0,
  /* 399 */ 65438, 1, 25, 0,
  /* 403 */ 101, 65527, 25, 0,
  /* 407 */ 102, 65527, 25, 0,
  /* 411 */ 103, 65527, 25, 0,
  /* 415 */ 65108, 1, 26, 0,
  /* 419 */ 10, 65436, 1, 27, 73, 65437, 1, 26, 0,
  /* 428 */ 64428, 26, 0,
  /* 431 */ 99, 65526, 26, 0,
  /* 435 */ 100, 65526, 26, 0,
  /* 439 */ 101, 65526, 26, 0,
  /* 443 */ 65108, 1, 27, 0,
  /* 447 */ 65436, 1, 27, 0,
  /* 451 */ 6, 27, 0,
  /* 454 */ 65170, 27, 0,
  /* 457 */ 97, 65525, 27, 0,
  /* 461 */ 98, 65525, 27, 0,
  /* 465 */ 99, 65525, 27, 0,
  /* 469 */ 65108, 1, 28, 0,
  /* 473 */ 9, 65434, 1, 29, 73, 65435, 1, 28, 0,
  /* 482 */ 95, 65524, 28, 0,
  /* 486 */ 96, 65524, 28, 0,
  /* 490 */ 97, 65524, 28, 0,
  /* 494 */ 65108, 1, 29, 0,
  /* 498 */ 65434, 1, 29, 0,
  /* 502 */ 111, 29, 0,
  /* 505 */ 93, 65523, 29, 0,
  /* 509 */ 94, 65523, 29, 0,
  /* 513 */ 95, 65523, 29, 0,
  /* 517 */ 65108, 1, 30, 0,
  /* 521 */ 8, 65432, 1, 31, 73, 65433, 1, 30, 0,
  /* 530 */ 91, 65522, 30, 0,
  /* 534 */ 92, 65522, 30, 0,
  /* 538 */ 93, 65522, 30, 0,
  /* 542 */ 65108, 1, 31, 0,
  /* 546 */ 65432, 1, 31, 0,
  /* 550 */ 89, 65521, 31, 0,
  /* 554 */ 90, 65521, 31, 0,
  /* 558 */ 91, 65521, 31, 0,
  /* 562 */ 88, 65520, 32, 0,
  /* 566 */ 89, 65520, 32, 0,
  /* 570 */ 36, 0,
  /* 572 */ 37, 0,
  /* 574 */ 38, 0,
  /* 576 */ 39, 0,
  /* 578 */ 41, 0,
  /* 580 */ 65076, 1, 48, 0,
  /* 584 */ 65431, 1, 48, 0,
  /* 588 */ 65076, 1, 49, 0,
  /* 592 */ 65430, 1, 49, 0,
  /* 596 */ 65076, 1, 50, 0,
  /* 600 */ 65429, 1, 50, 0,
  /* 604 */ 65076, 1, 51, 0,
  /* 608 */ 65428, 1, 51, 0,
  /* 612 */ 65076, 1, 52, 0,
  /* 616 */ 65427, 1, 52, 0,
  /* 620 */ 65076, 1, 53, 0,
  /* 624 */ 65426, 1, 53, 0,
  /* 628 */ 65076, 1, 54, 0,
  /* 632 */ 65425, 1, 54, 0,
  /* 636 */ 65076, 1, 55, 0,
  /* 640 */ 65424, 1, 55, 0,
  /* 644 */ 65076, 1, 56, 0,
  /* 648 */ 65423, 1, 56, 0,
  /* 652 */ 65076, 1, 57, 0,
  /* 656 */ 65422, 1, 57, 0,
  /* 660 */ 65076, 1, 58, 0,
  /* 664 */ 65421, 1, 58, 0,
  /* 668 */ 65076, 1, 59, 0,
  /* 672 */ 65420, 1, 59, 0,
  /* 676 */ 65076, 1, 60, 0,
  /* 680 */ 65419, 1, 60, 0,
  /* 684 */ 65314, 60, 0,
  /* 687 */ 65076, 1, 61, 0,
  /* 691 */ 65418, 1, 61, 0,
  /* 695 */ 65263, 61, 0,
  /* 698 */ 65076, 1, 62, 0,
  /* 702 */ 65417, 1, 62, 0,
  /* 706 */ 65205, 62, 0,
  /* 709 */ 65076, 1, 63, 0,
  /* 713 */ 65416, 1, 63, 0,
  /* 717 */ 65205, 72, 0,
  /* 720 */ 65185, 78, 0,
  /* 723 */ 22, 88, 0,
  /* 726 */ 62642, 92, 0,
  /* 729 */ 62642, 99, 0,
  /* 732 */ 17, 111, 0,
  /* 735 */ 65205, 120, 0,
  /* 738 */ 65191, 133, 0,
  /* 741 */ 64428, 137, 0,
  /* 744 */ 140, 0,
  /* 746 */ 200, 0,
  /* 748 */ 201, 0,
  /* 750 */ 204, 0,
  /* 752 */ 205, 0,
  /* 754 */ 206, 0,
  /* 756 */ 207, 0,
  /* 758 */ 208, 0,
  /* 760 */ 209, 0,
  /* 762 */ 210, 0,
  /* 764 */ 211, 0,
  /* 766 */ 212, 0,
  /* 768 */ 213, 0,
  /* 770 */ 214, 0,
  /* 772 */ 215, 0,
  /* 774 */ 216, 0,
  /* 776 */ 217, 0,
  /* 778 */ 232, 0,
  /* 780 */ 233, 0,
  /* 782 */ 251, 0,
  /* 784 */ 252, 0,
  /* 786 */ 253, 0,
  /* 788 */ 260, 0,
  /* 790 */ 261, 0,
  /* 792 */ 262, 0,
  /* 794 */ 263, 0,
  /* 796 */ 264, 0,
  /* 798 */ 265, 0,
  /* 800 */ 266, 0,
  /* 802 */ 267, 0,
  /* 804 */ 268, 0,
  /* 806 */ 269, 0,
  /* 808 */ 270, 0,
  /* 810 */ 271, 0,
  /* 812 */ 273, 0,
  /* 814 */ 283, 0,
  /* 816 */ 284, 0,
  /* 818 */ 303, 0,
  /* 820 */ 311, 0,
  /* 822 */ 312, 0,
  /* 824 */ 314, 0,
  /* 826 */ 322, 0,
  /* 828 */ 324, 0,
  /* 830 */ 326, 0,
  /* 832 */ 327, 0,
  /* 834 */ 331, 0,
  /* 836 */ 332, 0,
  /* 838 */ 339, 0,
  /* 840 */ 340, 0,
  /* 842 */ 342, 0,
  /* 844 */ 345, 0,
  /* 846 */ 346, 0,
  /* 848 */ 347, 0,
  /* 850 */ 351, 0,
  /* 852 */ 352, 0,
  /* 854 */ 353, 0,
  /* 856 */ 356, 0,
  /* 858 */ 357, 0,
  /* 860 */ 358, 0,
  /* 862 */ 359, 0,
  /* 864 */ 360, 0,
  /* 866 */ 366, 0,
  /* 868 */ 367, 0,
  /* 870 */ 21, 65232, 0,
  /* 873 */ 65327, 65378, 0,
  /* 876 */ 65325, 65425, 0,
  /* 879 */ 65396, 65444, 0,
  /* 882 */ 65459, 0,
  /* 884 */ 65460, 0,
  /* 886 */ 65461, 0,
  /* 888 */ 65462, 0,
  /* 890 */ 65463, 0,
  /* 892 */ 65464, 0,
  /* 894 */ 65465, 0,
  /* 896 */ 65466, 0,
  /* 898 */ 65467, 0,
  /* 900 */ 65468, 0,
  /* 902 */ 65469, 0,
  /* 904 */ 65470, 0,
  /* 906 */ 65471, 0,
  /* 908 */ 65472, 0,
  /* 910 */ 65473, 0,
  /* 912 */ 65474, 0,
  /* 914 */ 65475, 0,
  /* 916 */ 65484, 0,
  /* 918 */ 65485, 0,
  /* 920 */ 65488, 0,
  /* 922 */ 65209, 65505, 0,
  /* 925 */ 65252, 65506, 0,
  /* 928 */ 65212, 65508, 0,
  /* 931 */ 65233, 65512, 0,
  /* 934 */ 65514, 0,
  /* 936 */ 65515, 0,
  /* 938 */ 72, 65520, 0,
  /* 941 */ 72, 65521, 0,
  /* 944 */ 65191, 65521, 0,
  /* 947 */ 72, 65522, 0,
  /* 950 */ 72, 65523, 0,
  /* 953 */ 72, 65524, 0,
  /* 956 */ 72, 65525, 0,
  /* 959 */ 72, 65526, 0,
  /* 962 */ 72, 65527, 0,
  /* 965 */ 72, 65528, 0,
  /* 968 */ 65533, 0,
  /* 970 */ 65212, 65534, 0,
  /* 973 */ 2, 65535, 0,
  /* 976 */ 65184, 65535, 0,
  /* 979 */ 65190, 65535, 0,
  /* 982 */ 65197, 65535, 0,
  /* 985 */ 65205, 65535, 0,
  /* 988 */ 65331, 65535, 0,
  /* 991 */ 65332, 65535, 0,
};

extern const LaneBitmask HexagonLaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x0000000000000000), LaneBitmask(0x0000000000000000), LaneBitmask(0x0000000000000000), LaneBitmask(0x0000000000000000), LaneBitmask::getAll(),
  /* 5 */ LaneBitmask(0x0000000000000004), LaneBitmask(0x0000000000000000), LaneBitmask::getAll(),
  /* 8 */ LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000001), LaneBitmask::getAll(),
  /* 11 */ LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000002), LaneBitmask::getAll(),
  /* 14 */ LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000002), LaneBitmask::getAll(),
  /* 20 */ LaneBitmask(0x0000000000000020), LaneBitmask(0x0000000000000010), LaneBitmask(0x0000000000000008), LaneBitmask::getAll(),
  /* 24 */ LaneBitmask(0x0000000000000020), LaneBitmask(0x0000000000000010), LaneBitmask(0x0000000000000100), LaneBitmask(0x0000000000000080), LaneBitmask(0x0000000000000008), LaneBitmask(0x0000000000000040), LaneBitmask::getAll(),
};

extern const uint16_t HexagonSubRegIdxLists[] = {
  /* 0 */ 2, 1, 0,
  /* 3 */ 3, 0,
  /* 5 */ 6, 5, 4, 0,
  /* 9 */ 8, 6, 5, 4, 7, 11, 10, 9, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits HexagonSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 32, 32 },	// isub_hi
  { 0, 32 },	// isub_lo
  { 0, 1 },	// subreg_overflow
  { 0, 512 },	// vsub_fake
  { 512, 512 },	// vsub_hi
  { 0, 512 },	// vsub_lo
  { 1024, 1024 },	// wsub_hi
  { 0, 1024 },	// wsub_lo
  { 1024, 512 },	// wsub_hi_then_vsub_fake
  { 1536, 512 },	// wsub_hi_then_vsub_hi
  { 1024, 512 },	// wsub_hi_then_vsub_lo
};

extern const char HexagonRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'V', 'F', '1', '0', 0,
  /* 9 */ 'G', '1', '0', 0,
  /* 13 */ 'V', 'F', 'R', '1', '0', 0,
  /* 19 */ 'W', 'R', '1', '0', 0,
  /* 24 */ 'V', '1', '0', 0,
  /* 28 */ 'W', '1', '0', 0,
  /* 32 */ 'C', '1', '1', '_', '1', '0', 0,
  /* 39 */ 'G', '1', '1', '_', '1', '0', 0,
  /* 46 */ 'S', '1', '1', '_', '1', '0', 0,
  /* 53 */ 'V', 'F', '2', '0', 0,
  /* 58 */ 'G', '2', '0', 0,
  /* 62 */ 'V', 'F', 'R', '2', '0', 0,
  /* 68 */ 'S', '2', '0', 0,
  /* 72 */ 'V', '2', '0', 0,
  /* 76 */ 'G', '2', '1', '_', '2', '0', 0,
  /* 83 */ 'S', '2', '1', '_', '2', '0', 0,
  /* 90 */ 'V', 'F', '3', '0', 0,
  /* 95 */ 'G', '3', '0', 0,
  /* 99 */ 'V', 'F', 'R', '3', '0', 0,
  /* 105 */ 'V', '3', '0', 0,
  /* 109 */ 'G', '3', '1', '_', '3', '0', 0,
  /* 116 */ 'S', '3', '1', '_', '3', '0', 0,
  /* 123 */ 'S', '4', '1', '_', '4', '0', 0,
  /* 130 */ 'S', '5', '1', '_', '5', '0', 0,
  /* 137 */ 'S', '6', '0', 0,
  /* 141 */ 'S', '6', '1', '_', '6', '0', 0,
  /* 148 */ 'S', '7', '0', 0,
  /* 152 */ 'S', '7', '1', '_', '7', '0', 0,
  /* 159 */ 'S', '8', '0', 0,
  /* 163 */ 'S', 'A', '0', 0,
  /* 167 */ 'B', 'A', 'D', 'V', 'A', '0', 0,
  /* 174 */ 'L', 'C', '0', 0,
  /* 178 */ 'B', 'R', 'K', 'P', 'T', 'P', 'C', '0', 0,
  /* 187 */ 'D', '0', 0,
  /* 190 */ 'V', 'F', '0', 0,
  /* 194 */ 'I', 'S', 'D', 'B', 'C', 'F', 'G', '0', 0,
  /* 203 */ 'B', 'R', 'K', 'P', 'T', 'C', 'F', 'G', '0', 0,
  /* 213 */ 'M', '0', 0,
  /* 216 */ 'S', 'G', 'P', '0', 0,
  /* 221 */ 'V', 'Q', '0', 0,
  /* 225 */ 'V', 'F', 'R', '0', 0,
  /* 230 */ 'W', 'R', '0', 0,
  /* 234 */ 'C', 'S', '0', 0,
  /* 238 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '0', 0,
  /* 247 */ 'V', '0', 0,
  /* 250 */ 'W', '0', 0,
  /* 253 */ 'C', '1', '_', '0', 0,
  /* 258 */ 'G', '1', '_', '0', 0,
  /* 263 */ 'S', 'G', 'P', '1', '_', '0', 0,
  /* 270 */ 'P', '3', '_', '0', 0,
  /* 275 */ 'D', '1', '1', 0,
  /* 279 */ 'V', 'F', '1', '1', 0,
  /* 284 */ 'G', '1', '1', 0,
  /* 288 */ 'V', 'F', 'R', '1', '1', 0,
  /* 294 */ 'W', 'R', '1', '1', 0,
  /* 299 */ 'S', '1', '1', 0,
  /* 303 */ 'V', '1', '1', 0,
  /* 307 */ 'W', '1', '1', 0,
  /* 311 */ 'V', 'F', '2', '1', 0,
  /* 316 */ 'G', '2', '1', 0,
  /* 320 */ 'V', 'F', 'R', '2', '1', 0,
  /* 326 */ 'V', '2', '1', 0,
  /* 330 */ 'V', 'F', '3', '1', 0,
  /* 335 */ 'G', '3', '1', 0,
  /* 339 */ 'V', 'F', 'R', '3', '1', 0,
  /* 345 */ 'V', '3', '1', 0,
  /* 349 */ 'S', '6', '1', 0,
  /* 353 */ 'S', '7', '1', 0,
  /* 357 */ 'S', 'A', '1', 0,
  /* 361 */ 'B', 'A', 'D', 'V', 'A', '1', 0,
  /* 368 */ 'L', 'C', '1', 0,
  /* 372 */ 'B', 'R', 'K', 'P', 'T', 'P', 'C', '1', 0,
  /* 381 */ 'D', '1', 0,
  /* 384 */ 'V', 'F', '1', 0,
  /* 388 */ 'I', 'S', 'D', 'B', 'C', 'F', 'G', '1', 0,
  /* 397 */ 'B', 'R', 'K', 'P', 'T', 'C', 'F', 'G', '1', 0,
  /* 407 */ 'M', '1', 0,
  /* 410 */ 'S', 'G', 'P', '1', 0,
  /* 415 */ 'V', 'Q', '1', 0,
  /* 419 */ 'V', 'F', 'R', '1', 0,
  /* 424 */ 'W', 'R', '1', 0,
  /* 428 */ 'C', 'S', '1', 0,
  /* 432 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '1', 0,
  /* 441 */ 'V', '1', 0,
  /* 444 */ 'W', '1', 0,
  /* 447 */ 'D', '1', '2', 0,
  /* 451 */ 'V', 'F', '1', '2', 0,
  /* 456 */ 'G', '1', '2', 0,
  /* 460 */ 'V', 'F', 'R', '1', '2', 0,
  /* 466 */ 'W', 'R', '1', '2', 0,
  /* 471 */ 'S', '1', '2', 0,
  /* 475 */ 'V', '1', '2', 0,
  /* 479 */ 'W', '1', '2', 0,
  /* 483 */ 'G', '1', '3', '_', '1', '2', 0,
  /* 490 */ 'S', '1', '3', '_', '1', '2', 0,
  /* 497 */ 'V', 'F', '2', '2', 0,
  /* 502 */ 'G', '2', '2', 0,
  /* 506 */ 'V', 'F', 'R', '2', '2', 0,
  /* 512 */ 'S', '2', '2', 0,
  /* 516 */ 'V', '2', '2', 0,
  /* 520 */ 'G', '2', '3', '_', '2', '2', 0,
  /* 527 */ 'S', '2', '3', '_', '2', '2', 0,
  /* 534 */ 'S', '3', '3', '_', '3', '2', 0,
  /* 541 */ 'S', '4', '3', '_', '4', '2', 0,
  /* 548 */ 'S', '5', '3', '_', '5', '2', 0,
  /* 555 */ 'S', '6', '2', 0,
  /* 559 */ 'S', '6', '3', '_', '6', '2', 0,
  /* 566 */ 'S', '7', '2', 0,
  /* 570 */ 'S', '7', '3', '_', '7', '2', 0,
  /* 577 */ 'D', '2', 0,
  /* 580 */ 'V', 'F', '2', 0,
  /* 584 */ 'P', '2', 0,
  /* 587 */ 'V', 'Q', '2', 0,
  /* 591 */ 'V', 'F', 'R', '2', 0,
  /* 596 */ 'W', 'R', '2', 0,
  /* 600 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '2', 0,
  /* 609 */ 'V', '2', 0,
  /* 612 */ 'W', '2', 0,
  /* 615 */ 'C', '3', '_', '2', 0,
  /* 620 */ 'G', '3', '_', '2', 0,
  /* 625 */ 'S', '3', '_', '2', 0,
  /* 630 */ 'D', '1', '3', 0,
  /* 634 */ 'V', 'F', '1', '3', 0,
  /* 639 */ 'G', '1', '3', 0,
  /* 643 */ 'V', 'F', 'R', '1', '3', 0,
  /* 649 */ 'W', 'R', '1', '3', 0,
  /* 654 */ 'S', '1', '3', 0,
  /* 658 */ 'V', '1', '3', 0,
  /* 662 */ 'W', '1', '3', 0,
  /* 666 */ 'V', 'F', '2', '3', 0,
  /* 671 */ 'G', '2', '3', 0,
  /* 675 */ 'V', 'F', 'R', '2', '3', 0,
  /* 681 */ 'S', '2', '3', 0,
  /* 685 */ 'V', '2', '3', 0,
  /* 689 */ 'S', '6', '3', 0,
  /* 693 */ 'S', '7', '3', 0,
  /* 697 */ 'D', '3', 0,
  /* 700 */ 'V', 'F', '3', 0,
  /* 704 */ 'G', '3', 0,
  /* 707 */ 'P', '3', 0,
  /* 710 */ 'V', 'Q', '3', 0,
  /* 714 */ 'V', 'F', 'R', '3', 0,
  /* 719 */ 'W', 'R', '3', 0,
  /* 723 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '3', 0,
  /* 732 */ 'V', '3', 0,
  /* 735 */ 'W', '3', 0,
  /* 738 */ 'D', '1', '4', 0,
  /* 742 */ 'V', 'F', '1', '4', 0,
  /* 747 */ 'G', '1', '4', 0,
  /* 751 */ 'V', 'F', 'R', '1', '4', 0,
  /* 757 */ 'W', 'R', '1', '4', 0,
  /* 762 */ 'S', '1', '4', 0,
  /* 766 */ 'V', '1', '4', 0,
  /* 770 */ 'W', '1', '4', 0,
  /* 774 */ 'G', '1', '5', '_', '1', '4', 0,
  /* 781 */ 'S', '1', '5', '_', '1', '4', 0,
  /* 788 */ 'V', 'F', '2', '4', 0,
  /* 793 */ 'V', 'F', 'R', '2', '4', 0,
  /* 799 */ 'S', '2', '4', 0,
  /* 803 */ 'V', '2', '4', 0,
  /* 807 */ 'G', '2', '5', '_', '2', '4', 0,
  /* 814 */ 'S', '2', '5', '_', '2', '4', 0,
  /* 821 */ 'S', '3', '5', '_', '3', '4', 0,
  /* 828 */ 'S', '4', '4', 0,
  /* 832 */ 'S', '4', '5', '_', '4', '4', 0,
  /* 839 */ 'S', '5', '4', 0,
  /* 843 */ 'S', '5', '5', '_', '5', '4', 0,
  /* 850 */ 'S', '6', '4', 0,
  /* 854 */ 'S', '6', '5', '_', '6', '4', 0,
  /* 861 */ 'S', '7', '4', 0,
  /* 865 */ 'S', '7', '5', '_', '7', '4', 0,
  /* 872 */ 'D', '4', 0,
  /* 875 */ 'V', 'F', '4', 0,
  /* 879 */ 'G', '4', 0,
  /* 882 */ 'V', 'Q', '4', 0,
  /* 886 */ 'V', 'F', 'R', '4', 0,
  /* 891 */ 'W', 'R', '4', 0,
  /* 895 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '4', 0,
  /* 904 */ 'V', '4', 0,
  /* 907 */ 'W', '4', 0,
  /* 910 */ 'C', '5', '_', '4', 0,
  /* 915 */ 'G', '5', '_', '4', 0,
  /* 920 */ 'S', '5', '_', '4', 0,
  /* 925 */ 'D', '1', '5', 0,
  /* 929 */ 'V', 'F', '1', '5', 0,
  /* 934 */ 'G', '1', '5', 0,
  /* 938 */ 'V', 'F', 'R', '1', '5', 0,
  /* 944 */ 'W', 'R', '1', '5', 0,
  /* 949 */ 'S', '1', '5', 0,
  /* 953 */ 'V', '1', '5', 0,
  /* 957 */ 'W', '1', '5', 0,
  /* 961 */ 'V', 'F', '2', '5', 0,
  /* 966 */ 'V', 'F', 'R', '2', '5', 0,
  /* 972 */ 'S', '2', '5', 0,
  /* 976 */ 'V', '2', '5', 0,
  /* 980 */ 'S', '3', '5', 0,
  /* 984 */ 'S', '4', '5', 0,
  /* 988 */ 'S', '5', '5', 0,
  /* 992 */ 'S', '6', '5', 0,
  /* 996 */ 'S', '7', '5', 0,
  /* 1000 */ 'C', '5', 0,
  /* 1003 */ 'D', '5', 0,
  /* 1006 */ 'V', 'F', '5', 0,
  /* 1010 */ 'G', '5', 0,
  /* 1013 */ 'V', 'Q', '5', 0,
  /* 1017 */ 'V', 'F', 'R', '5', 0,
  /* 1022 */ 'W', 'R', '5', 0,
  /* 1026 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '5', 0,
  /* 1035 */ 'V', '5', 0,
  /* 1038 */ 'W', '5', 0,
  /* 1041 */ 'V', 'F', '1', '6', 0,
  /* 1046 */ 'V', 'F', 'R', '1', '6', 0,
  /* 1052 */ 'V', '1', '6', 0,
  /* 1056 */ 'C', '1', '7', '_', '1', '6', 0,
  /* 1063 */ 'G', '1', '7', '_', '1', '6', 0,
  /* 1070 */ 'S', '1', '7', '_', '1', '6', 0,
  /* 1077 */ 'V', 'F', '2', '6', 0,
  /* 1082 */ 'V', 'F', 'R', '2', '6', 0,
  /* 1088 */ 'S', '2', '6', 0,
  /* 1092 */ 'V', '2', '6', 0,
  /* 1096 */ 'G', '2', '7', '_', '2', '6', 0,
  /* 1103 */ 'S', '2', '7', '_', '2', '6', 0,
  /* 1110 */ 'S', '3', '7', '_', '3', '6', 0,
  /* 1117 */ 'S', '4', '6', 0,
  /* 1121 */ 'S', '4', '7', '_', '4', '6', 0,
  /* 1128 */ 'S', '5', '6', 0,
  /* 1132 */ 'S', '5', '7', '_', '5', '6', 0,
  /* 1139 */ 'S', '6', '6', 0,
  /* 1143 */ 'S', '6', '7', '_', '6', '6', 0,
  /* 1150 */ 'S', '7', '6', 0,
  /* 1154 */ 'S', '7', '7', '_', '7', '6', 0,
  /* 1161 */ 'D', '6', 0,
  /* 1164 */ 'V', 'F', '6', 0,
  /* 1168 */ 'G', '6', 0,
  /* 1171 */ 'V', 'Q', '6', 0,
  /* 1175 */ 'V', 'F', 'R', '6', 0,
  /* 1180 */ 'W', 'R', '6', 0,
  /* 1184 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '6', 0,
  /* 1193 */ 'V', '6', 0,
  /* 1196 */ 'W', '6', 0,
  /* 1199 */ 'C', '7', '_', '6', 0,
  /* 1204 */ 'G', '7', '_', '6', 0,
  /* 1209 */ 'S', '7', '_', '6', 0,
  /* 1214 */ 'V', 'F', '1', '7', 0,
  /* 1219 */ 'V', 'F', 'R', '1', '7', 0,
  /* 1225 */ 'V', '1', '7', 0,
  /* 1229 */ 'V', 'F', '2', '7', 0,
  /* 1234 */ 'V', 'F', 'R', '2', '7', 0,
  /* 1240 */ 'V', '2', '7', 0,
  /* 1244 */ 'S', '4', '7', 0,
  /* 1248 */ 'S', '5', '7', 0,
  /* 1252 */ 'S', '6', '7', 0,
  /* 1256 */ 'S', '7', '7', 0,
  /* 1260 */ 'D', '7', 0,
  /* 1263 */ 'V', 'F', '7', 0,
  /* 1267 */ 'G', '7', 0,
  /* 1270 */ 'V', 'Q', '7', 0,
  /* 1274 */ 'V', 'F', 'R', '7', 0,
  /* 1279 */ 'W', 'R', '7', 0,
  /* 1283 */ 'G', 'P', 'M', 'U', 'C', 'N', 'T', '7', 0,
  /* 1292 */ 'V', '7', 0,
  /* 1295 */ 'W', '7', 0,
  /* 1298 */ 'V', 'F', '1', '8', 0,
  /* 1303 */ 'V', 'F', 'R', '1', '8', 0,
  /* 1309 */ 'V', '1', '8', 0,
  /* 1313 */ 'G', '1', '9', '_', '1', '8', 0,
  /* 1320 */ 'S', '1', '9', '_', '1', '8', 0,
  /* 1327 */ 'V', 'F', '2', '8', 0,
  /* 1332 */ 'V', 'F', 'R', '2', '8', 0,
  /* 1338 */ 'V', '2', '8', 0,
  /* 1342 */ 'G', '2', '9', '_', '2', '8', 0,
  /* 1349 */ 'S', '2', '9', '_', '2', '8', 0,
  /* 1356 */ 'S', '3', '9', '_', '3', '8', 0,
  /* 1363 */ 'S', '4', '9', '_', '4', '8', 0,
  /* 1370 */ 'S', '5', '8', 0,
  /* 1374 */ 'S', '5', '9', '_', '5', '8', 0,
  /* 1381 */ 'S', '6', '8', 0,
  /* 1385 */ 'S', '6', '9', '_', '6', '8', 0,
  /* 1392 */ 'S', '7', '8', 0,
  /* 1396 */ 'S', '7', '9', '_', '7', '8', 0,
  /* 1403 */ 'C', '8', 0,
  /* 1406 */ 'D', '8', 0,
  /* 1409 */ 'V', 'F', '8', 0,
  /* 1413 */ 'G', '8', 0,
  /* 1416 */ 'V', 'F', 'R', '8', 0,
  /* 1421 */ 'W', 'R', '8', 0,
  /* 1425 */ 'V', '8', 0,
  /* 1428 */ 'W', '8', 0,
  /* 1431 */ 'C', '9', '_', '8', 0,
  /* 1436 */ 'G', '9', '_', '8', 0,
  /* 1441 */ 'S', '9', '_', '8', 0,
  /* 1446 */ 'V', 'F', '1', '9', 0,
  /* 1451 */ 'V', 'F', 'R', '1', '9', 0,
  /* 1457 */ 'S', '1', '9', 0,
  /* 1461 */ 'V', '1', '9', 0,
  /* 1465 */ 'V', 'F', '2', '9', 0,
  /* 1470 */ 'V', 'F', 'R', '2', '9', 0,
  /* 1476 */ 'V', '2', '9', 0,
  /* 1480 */ 'S', '5', '9', 0,
  /* 1484 */ 'S', '6', '9', 0,
  /* 1488 */ 'S', '7', '9', 0,
  /* 1492 */ 'D', '9', 0,
  /* 1495 */ 'V', 'F', '9', 0,
  /* 1499 */ 'G', '9', 0,
  /* 1502 */ 'V', 'F', 'R', '9', 0,
  /* 1507 */ 'W', 'R', '9', 0,
  /* 1511 */ 'V', '9', 0,
  /* 1514 */ 'W', '9', 0,
  /* 1517 */ 'B', 'A', 'D', 'V', 'A', 0,
  /* 1523 */ 'E', 'V', 'B', 0,
  /* 1527 */ 'P', 'C', 0,
  /* 1530 */ 'H', 'T', 'I', 'D', 0,
  /* 1535 */ 'S', 'T', 'I', 'D', 0,
  /* 1540 */ 'V', 'I', 'D', 0,
  /* 1544 */ 'U', 'P', 'C', 'Y', 'C', 'L', 'E', 0,
  /* 1552 */ 'C', 'F', 'G', 'B', 'A', 'S', 'E', 0,
  /* 1560 */ 'U', 'S', 'R', '_', 'O', 'V', 'F', 0,
  /* 1568 */ 'D', 'I', 'A', 'G', 0,
  /* 1573 */ 'S', 'Y', 'S', 'C', 'F', 'G', 0,
  /* 1580 */ 'P', 'M', 'U', 'E', 'V', 'T', 'C', 'F', 'G', 0,
  /* 1590 */ 'P', 'M', 'U', 'C', 'F', 'G', 0,
  /* 1597 */ 'G', 'P', 'C', 'Y', 'C', 'L', 'E', 'H', 'I', 0,
  /* 1607 */ 'U', 'P', 'C', 'Y', 'C', 'L', 'E', 'H', 'I', 0,
  /* 1617 */ 'U', 'T', 'I', 'M', 'E', 'R', 'H', 'I', 0,
  /* 1626 */ 'P', 'K', 'T', 'C', 'O', 'U', 'N', 'T', 'H', 'I', 0,
  /* 1637 */ 'I', 'M', 'A', 'S', 'K', 0,
  /* 1643 */ 'M', 'O', 'D', 'E', 'C', 'T', 'L', 0,
  /* 1651 */ 'I', 'S', 'D', 'B', 'E', 'N', 0,
  /* 1658 */ 'I', 'S', 'D', 'B', 'M', 'B', 'X', 'I', 'N', 0,
  /* 1668 */ 'G', 'P', 'C', 'Y', 'C', 'L', 'E', 'L', 'O', 0,
  /* 1678 */ 'U', 'P', 'C', 'Y', 'C', 'L', 'E', 'L', 'O', 0,
  /* 1688 */ 'U', 'T', 'I', 'M', 'E', 'R', 'L', 'O', 0,
  /* 1697 */ 'P', 'K', 'T', 'C', 'O', 'U', 'N', 'T', 'L', 'O', 0,
  /* 1708 */ 'U', 'G', 'P', 0,
  /* 1712 */ 'V', 'T', 'M', 'P', 0,
  /* 1717 */ 'G', 'O', 'S', 'P', 0,
  /* 1722 */ 'C', 'C', 'R', 0,
  /* 1726 */ 'U', 'T', 'I', 'M', 'E', 'R', 0,
  /* 1733 */ 'G', 'E', 'L', 'R', 0,
  /* 1738 */ 'I', 'S', 'D', 'B', 'G', 'P', 'R', 0,
  /* 1746 */ 'G', 'S', 'R', 0,
  /* 1750 */ 'S', 'S', 'R', 0,
  /* 1754 */ 'U', 'S', 'R', 0,
  /* 1758 */ 'C', 'S', 0,
  /* 1761 */ 'F', 'R', 'A', 'M', 'E', 'L', 'I', 'M', 'I', 'T', 0,
  /* 1772 */ 'P', 'K', 'T', 'C', 'O', 'U', 'N', 'T', 0,
  /* 1781 */ 'I', 'S', 'D', 'B', 'S', 'T', 0,
  /* 1788 */ 'I', 'S', 'D', 'B', 'M', 'B', 'X', 'O', 'U', 'T', 0,
  /* 1799 */ 'R', 'E', 'V', 0,
  /* 1803 */ 'F', 'R', 'A', 'M', 'E', 'K', 'E', 'Y', 0,
  0
};

extern const MCRegisterDesc HexagonRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0, 0 },
  { 1517, 1, 864, 2, 15585, 3 },
  { 1722, 1, 860, 2, 15585, 3 },
  { 1552, 1, 868, 2, 15585, 3 },
  { 1758, 93, 1, 0, 208, 8 },
  { 1568, 1, 866, 2, 1, 3 },
  { 1734, 1, 852, 2, 1, 3 },
  { 1523, 1, 860, 2, 1, 3 },
  { 1803, 1, 836, 2, 1, 3 },
  { 1761, 1, 834, 2, 1, 3 },
  { 1733, 1, 834, 2, 1, 3 },
  { 1717, 1, 834, 2, 1, 3 },
  { 1709, 1, 832, 2, 1, 3 },
  { 1597, 1, 840, 2, 1, 3 },
  { 1668, 1, 838, 2, 1, 3 },
  { 1746, 1, 830, 2, 1, 3 },
  { 1530, 1, 844, 2, 1, 3 },
  { 1637, 1, 844, 2, 1, 3 },
  { 1651, 1, 864, 2, 1, 3 },
  { 1738, 1, 862, 2, 1, 3 },
  { 1658, 1, 858, 2, 1, 3 },
  { 1788, 1, 856, 2, 1, 3 },
  { 1781, 1, 850, 2, 1, 3 },
  { 1643, 1, 842, 2, 1, 3 },
  { 1527, 1, 824, 2, 1, 3 },
  { 1598, 1, 848, 2, 1, 3 },
  { 1669, 1, 846, 2, 1, 3 },
  { 1772, 973, 1, 0, 1136, 8 },
  { 1626, 1, 974, 2, 7536, 3 },
  { 1697, 1, 971, 2, 14770, 3 },
  { 1590, 1, 854, 2, 15585, 3 },
  { 1580, 1, 852, 2, 15585, 3 },
  { 1799, 1, 838, 2, 15585, 3 },
  { 1750, 1, 832, 2, 15585, 3 },
  { 1535, 1, 828, 2, 15585, 3 },
  { 1573, 1, 834, 2, 15585, 3 },
  { 1708, 1, 818, 2, 15585, 3 },
  { 1544, 973, 1, 0, 1296, 8 },
  { 1607, 1, 974, 2, 9152, 3 },
  { 1678, 1, 971, 2, 9120, 3 },
  { 1754, 6, 1, 3, 1344, 5 },
  { 1560, 1, 974, 2, 9184, 3 },
  { 1726, 973, 1, 0, 1392, 8 },
  { 1617, 1, 974, 2, 9248, 3 },
  { 1688, 1, 971, 2, 14722, 3 },
  { 1540, 1, 826, 2, 15489, 3 },
  { 1712, 1, 1, 2, 15489, 3 },
  { 167, 1, 822, 2, 15489, 3 },
  { 361, 1, 820, 2, 15489, 3 },
  { 203, 1, 830, 2, 15489, 3 },
  { 397, 1, 830, 2, 15489, 3 },
  { 178, 1, 828, 2, 15489, 3 },
  { 372, 1, 828, 2, 15489, 3 },
  { 1000, 1, 814, 2, 15489, 3 },
  { 1403, 1, 816, 2, 9216, 3 },
  { 234, 1, 918, 2, 14657, 3 },
  { 428, 1, 916, 2, 14657, 3 },
  { 187, 96, 1, 0, 4226, 8 },
  { 381, 99, 1, 0, 4226, 8 },
  { 577, 102, 1, 0, 4226, 8 },
  { 697, 105, 1, 0, 4226, 8 },
  { 872, 108, 1, 0, 4226, 8 },
  { 1003, 111, 1, 0, 4226, 8 },
  { 1161, 114, 1, 0, 4226, 8 },
  { 1260, 117, 1, 0, 4226, 8 },
  { 1406, 120, 1, 0, 4226, 8 },
  { 1492, 123, 1, 0, 4226, 8 },
  { 0, 126, 1, 0, 4226, 8 },
  { 275, 129, 1, 0, 4226, 8 },
  { 447, 132, 1, 0, 4226, 8 },
  { 630, 135, 1, 0, 4226, 8 },
  { 738, 138, 1, 0, 4226, 8 },
  { 925, 141, 1, 0, 4226, 8 },
  { 704, 1, 806, 2, 4369, 3 },
  { 879, 1, 806, 2, 4369, 3 },
  { 1010, 1, 804, 2, 4369, 3 },
  { 1168, 1, 804, 2, 4369, 3 },
  { 1267, 1, 802, 2, 4369, 3 },
  { 1413, 1, 802, 2, 4369, 3 },
  { 1499, 1, 800, 2, 4369, 3 },
  { 9, 1, 800, 2, 4369, 3 },
  { 284, 1, 798, 2, 4369, 3 },
  { 456, 1, 798, 2, 4369, 3 },
  { 639, 1, 796, 2, 4369, 3 },
  { 747, 1, 796, 2, 4369, 3 },
  { 934, 1, 794, 2, 4369, 3 },
  { 58, 1, 798, 2, 4369, 3 },
  { 316, 1, 796, 2, 4369, 3 },
  { 502, 1, 796, 2, 4369, 3 },
  { 671, 1, 794, 2, 4369, 3 },
  { 95, 1, 800, 2, 4369, 3 },
  { 335, 1, 798, 2, 4369, 3 },
  { 238, 1, 792, 2, 4369, 3 },
  { 432, 1, 790, 2, 4369, 3 },
  { 600, 1, 790, 2, 4369, 3 },
  { 723, 1, 788, 2, 4369, 3 },
  { 895, 1, 786, 2, 4369, 3 },
  { 1026, 1, 784, 2, 4369, 3 },
  { 1184, 1, 784, 2, 4369, 3 },
  { 1283, 1, 782, 2, 4369, 3 },
  { 194, 1, 812, 2, 4369, 3 },
  { 388, 1, 812, 2, 4369, 3 },
  { 174, 1, 778, 2, 4369, 3 },
  { 368, 1, 778, 2, 4369, 3 },
  { 213, 1, 780, 2, 4369, 3 },
  { 407, 1, 778, 2, 4369, 3 },
  { 218, 1, 1, 2, 4369, 3 },
  { 412, 1, 1, 2, 4369, 3 },
  { 584, 1, 1, 2, 4369, 3 },
  { 707, 1, 1, 2, 4369, 3 },
  { 239, 1, 810, 2, 4369, 3 },
  { 433, 1, 808, 2, 4369, 3 },
  { 601, 1, 808, 2, 4369, 3 },
  { 724, 1, 806, 2, 4369, 3 },
  { 222, 1, 1, 2, 4369, 3 },
  { 416, 1, 1, 2, 4369, 3 },
  { 588, 1, 1, 2, 4369, 3 },
  { 711, 1, 1, 2, 4369, 3 },
  { 227, 1, 914, 2, 14433, 3 },
  { 421, 1, 912, 2, 14433, 3 },
  { 593, 1, 912, 2, 14433, 3 },
  { 716, 1, 910, 2, 14433, 3 },
  { 888, 1, 910, 2, 14433, 3 },
  { 1019, 1, 908, 2, 14433, 3 },
  { 1177, 1, 908, 2, 14433, 3 },
  { 1276, 1, 906, 2, 14433, 3 },
  { 1418, 1, 906, 2, 14433, 3 },
  { 1504, 1, 904, 2, 14433, 3 },
  { 15, 1, 904, 2, 14433, 3 },
  { 290, 1, 902, 2, 14433, 3 },
  { 462, 1, 902, 2, 14433, 3 },
  { 645, 1, 900, 2, 14433, 3 },
  { 753, 1, 900, 2, 14433, 3 },
  { 940, 1, 898, 2, 14433, 3 },
  { 1048, 1, 898, 2, 14433, 3 },
  { 1221, 1, 896, 2, 14433, 3 },
  { 1305, 1, 896, 2, 14433, 3 },
  { 1453, 1, 894, 2, 14433, 3 },
  { 64, 1, 894, 2, 14433, 3 },
  { 322, 1, 892, 2, 14433, 3 },
  { 508, 1, 892, 2, 14433, 3 },
  { 677, 1, 890, 2, 14433, 3 },
  { 795, 1, 890, 2, 14433, 3 },
  { 968, 1, 888, 2, 14433, 3 },
  { 1084, 1, 888, 2, 14433, 3 },
  { 1236, 1, 886, 2, 14433, 3 },
  { 1334, 1, 886, 2, 14433, 3 },
  { 1472, 1, 884, 2, 14433, 3 },
  { 101, 1, 884, 2, 14433, 3 },
  { 341, 1, 882, 2, 14433, 3 },
  { 299, 1, 766, 2, 14945, 3 },
  { 471, 1, 766, 2, 14945, 3 },
  { 654, 1, 764, 2, 14945, 3 },
  { 762, 1, 764, 2, 14945, 3 },
  { 949, 1, 762, 2, 14945, 3 },
  { 1457, 1, 764, 2, 14945, 3 },
  { 68, 1, 764, 2, 14945, 3 },
  { 512, 1, 764, 2, 14945, 3 },
  { 681, 1, 762, 2, 14945, 3 },
  { 799, 1, 762, 2, 14945, 3 },
  { 972, 1, 760, 2, 14945, 3 },
  { 1088, 1, 760, 2, 14945, 3 },
  { 980, 1, 766, 2, 14945, 3 },
  { 828, 1, 774, 2, 14945, 3 },
  { 984, 1, 772, 2, 14945, 3 },
  { 1117, 1, 772, 2, 14945, 3 },
  { 1244, 1, 770, 2, 14945, 3 },
  { 839, 1, 776, 2, 14945, 3 },
  { 988, 1, 774, 2, 14945, 3 },
  { 1128, 1, 774, 2, 14945, 3 },
  { 1248, 1, 772, 2, 14945, 3 },
  { 1370, 1, 772, 2, 14945, 3 },
  { 1480, 1, 770, 2, 14945, 3 },
  { 137, 1, 770, 2, 14945, 3 },
  { 349, 1, 768, 2, 14945, 3 },
  { 555, 1, 768, 2, 14945, 3 },
  { 689, 1, 766, 2, 14945, 3 },
  { 850, 1, 766, 2, 14945, 3 },
  { 992, 1, 764, 2, 14945, 3 },
  { 1139, 1, 764, 2, 14945, 3 },
  { 1252, 1, 762, 2, 14945, 3 },
  { 1381, 1, 762, 2, 14945, 3 },
  { 1484, 1, 760, 2, 14945, 3 },
  { 148, 1, 760, 2, 14945, 3 },
  { 353, 1, 758, 2, 14945, 3 },
  { 566, 1, 758, 2, 14945, 3 },
  { 693, 1, 756, 2, 14945, 3 },
  { 861, 1, 756, 2, 14945, 3 },
  { 996, 1, 754, 2, 14945, 3 },
  { 1150, 1, 754, 2, 14945, 3 },
  { 1256, 1, 752, 2, 14945, 3 },
  { 1392, 1, 752, 2, 14945, 3 },
  { 1488, 1, 750, 2, 14945, 3 },
  { 159, 1, 1, 2, 14945, 3 },
  { 163, 1, 744, 2, 14945, 3 },
  { 357, 1, 744, 2, 14945, 3 },
  { 216, 1, 748, 2, 14945, 3 },
  { 410, 1, 746, 2, 14945, 3 },
  { 247, 1, 391, 2, 14945, 3 },
  { 441, 1, 387, 2, 14945, 3 },
  { 609, 1, 411, 2, 14945, 3 },
  { 732, 1, 407, 2, 14945, 3 },
  { 904, 1, 407, 2, 14945, 3 },
  { 1035, 1, 403, 2, 14945, 3 },
  { 1193, 1, 439, 2, 14945, 3 },
  { 1292, 1, 435, 2, 14945, 3 },
  { 1425, 1, 435, 2, 14945, 3 },
  { 1511, 1, 431, 2, 14945, 3 },
  { 24, 1, 465, 2, 14945, 3 },
  { 303, 1, 461, 2, 14945, 3 },
  { 475, 1, 461, 2, 14945, 3 },
  { 658, 1, 457, 2, 14945, 3 },
  { 766, 1, 490, 2, 14945, 3 },
  { 953, 1, 486, 2, 14945, 3 },
  { 1052, 1, 486, 2, 14945, 3 },
  { 1225, 1, 482, 2, 14945, 3 },
  { 1309, 1, 513, 2, 14945, 3 },
  { 1461, 1, 509, 2, 14945, 3 },
  { 72, 1, 509, 2, 14945, 3 },
  { 326, 1, 505, 2, 14945, 3 },
  { 516, 1, 538, 2, 14945, 3 },
  { 685, 1, 534, 2, 14945, 3 },
  { 803, 1, 534, 2, 14945, 3 },
  { 976, 1, 530, 2, 14945, 3 },
  { 1092, 1, 558, 2, 14945, 3 },
  { 1240, 1, 554, 2, 14945, 3 },
  { 1338, 1, 554, 2, 14945, 3 },
  { 1476, 1, 550, 2, 14945, 3 },
  { 105, 1, 566, 2, 14945, 3 },
  { 345, 1, 562, 2, 14945, 3 },
  { 190, 1, 965, 2, 14945, 3 },
  { 384, 1, 962, 2, 14945, 3 },
  { 580, 1, 962, 2, 14945, 3 },
  { 700, 1, 959, 2, 14945, 3 },
  { 875, 1, 959, 2, 14945, 3 },
  { 1006, 1, 956, 2, 14945, 3 },
  { 1164, 1, 956, 2, 14945, 3 },
  { 1263, 1, 953, 2, 14945, 3 },
  { 1409, 1, 953, 2, 14945, 3 },
  { 1495, 1, 950, 2, 14945, 3 },
  { 4, 1, 950, 2, 14945, 3 },
  { 279, 1, 947, 2, 14945, 3 },
  { 451, 1, 947, 2, 14945, 3 },
  { 634, 1, 941, 2, 14945, 3 },
  { 742, 1, 941, 2, 14945, 3 },
  { 929, 1, 938, 2, 14945, 3 },
  { 1041, 1, 1, 2, 14945, 3 },
  { 1214, 1, 1, 2, 14945, 3 },
  { 1298, 1, 1, 2, 14945, 3 },
  { 1446, 1, 1, 2, 14945, 3 },
  { 53, 1, 1, 2, 14945, 3 },
  { 311, 1, 1, 2, 14945, 3 },
  { 497, 1, 1, 2, 14945, 3 },
  { 666, 1, 1, 2, 14945, 3 },
  { 788, 1, 1, 2, 14945, 3 },
  { 961, 1, 1, 2, 14945, 3 },
  { 1077, 1, 1, 2, 14945, 3 },
  { 1229, 1, 1, 2, 14945, 3 },
  { 1327, 1, 1, 2, 14945, 3 },
  { 1465, 1, 1, 2, 14945, 3 },
  { 90, 1, 1, 2, 14945, 3 },
  { 330, 1, 1, 2, 14945, 3 },
  { 225, 1, 646, 2, 14945, 3 },
  { 419, 1, 646, 2, 14945, 3 },
  { 591, 1, 646, 2, 14945, 3 },
  { 714, 1, 646, 2, 14945, 3 },
  { 886, 1, 646, 2, 14945, 3 },
  { 1017, 1, 646, 2, 14945, 3 },
  { 1175, 1, 646, 2, 14945, 3 },
  { 1274, 1, 646, 2, 14945, 3 },
  { 1416, 1, 646, 2, 14945, 3 },
  { 1502, 1, 646, 2, 14945, 3 },
  { 13, 1, 646, 2, 14945, 3 },
  { 288, 1, 646, 2, 14945, 3 },
  { 460, 1, 646, 2, 14945, 3 },
  { 643, 1, 646, 2, 14945, 3 },
  { 751, 1, 646, 2, 14945, 3 },
  { 938, 1, 646, 2, 14945, 3 },
  { 1046, 1, 1, 2, 14945, 3 },
  { 1219, 1, 1, 2, 14945, 3 },
  { 1303, 1, 1, 2, 14945, 3 },
  { 1451, 1, 1, 2, 14945, 3 },
  { 62, 1, 1, 2, 14945, 3 },
  { 320, 1, 1, 2, 14945, 3 },
  { 506, 1, 1, 2, 14945, 3 },
  { 675, 1, 1, 2, 14945, 3 },
  { 793, 1, 1, 2, 14945, 3 },
  { 966, 1, 1, 2, 14945, 3 },
  { 1082, 1, 1, 2, 14945, 3 },
  { 1234, 1, 1, 2, 14945, 3 },
  { 1332, 1, 1, 2, 14945, 3 },
  { 1470, 1, 1, 2, 14945, 3 },
  { 99, 1, 1, 2, 14945, 3 },
  { 339, 1, 1, 2, 14945, 3 },
  { 221, 521, 1, 9, 1188, 24 },
  { 415, 473, 1, 9, 1076, 24 },
  { 587, 419, 1, 9, 964, 24 },
  { 710, 378, 1, 9, 852, 24 },
  { 882, 354, 1, 9, 740, 24 },
  { 1013, 333, 1, 9, 580, 24 },
  { 1171, 312, 1, 9, 420, 24 },
  { 1270, 285, 1, 9, 308, 24 },
  { 250, 546, 966, 5, 8674, 20 },
  { 444, 526, 963, 5, 8274, 20 },
  { 612, 498, 963, 5, 7906, 20 },
  { 735, 478, 960, 5, 7506, 20 },
  { 907, 447, 960, 5, 7090, 20 },
  { 1038, 424, 957, 5, 6642, 20 },
  { 1196, 399, 957, 5, 6322, 20 },
  { 1295, 383, 954, 5, 5986, 20 },
  { 1428, 367, 954, 5, 5810, 20 },
  { 1514, 359, 951, 5, 5602, 20 },
  { 28, 346, 951, 5, 5474, 20 },
  { 307, 338, 948, 5, 5266, 20 },
  { 479, 325, 948, 5, 5138, 20 },
  { 662, 317, 942, 5, 4930, 20 },
  { 770, 304, 942, 5, 4802, 20 },
  { 957, 290, 939, 5, 4498, 20 },
  { 230, 713, 1, 5, 11346, 20 },
  { 424, 702, 1, 5, 11170, 20 },
  { 596, 691, 1, 5, 10994, 20 },
  { 719, 680, 1, 5, 10818, 20 },
  { 891, 672, 1, 5, 10690, 20 },
  { 1022, 664, 1, 5, 10562, 20 },
  { 1180, 656, 1, 5, 10434, 20 },
  { 1279, 648, 1, 5, 10306, 20 },
  { 1421, 640, 1, 5, 10178, 20 },
  { 1507, 632, 1, 5, 10050, 20 },
  { 19, 624, 1, 5, 9922, 20 },
  { 294, 616, 1, 5, 9794, 20 },
  { 466, 608, 1, 5, 9666, 20 },
  { 649, 600, 1, 5, 9538, 20 },
  { 757, 592, 1, 5, 9410, 20 },
  { 944, 584, 1, 5, 9282, 20 },
  { 253, 879, 1, 0, 10945, 11 },
  { 615, 879, 1, 0, 10945, 11 },
  { 910, 870, 1, 0, 32, 14 },
  { 1199, 225, 1, 0, 2352, 8 },
  { 1431, 925, 1, 0, 4400, 11 },
  { 32, 931, 1, 0, 5936, 11 },
  { 1056, 985, 1, 0, 2450, 11 },
  { 258, 270, 1, 0, 4321, 8 },
  { 620, 706, 1, 0, 11473, 8 },
  { 915, 195, 1, 0, 2690, 8 },
  { 1204, 198, 1, 0, 2690, 8 },
  { 1436, 201, 1, 0, 2690, 8 },
  { 39, 204, 1, 0, 2690, 8 },
  { 483, 207, 1, 0, 2690, 8 },
  { 774, 210, 1, 0, 2690, 8 },
  { 1063, 219, 1, 0, 2834, 8 },
  { 1313, 222, 1, 0, 2834, 8 },
  { 76, 207, 1, 0, 2642, 8 },
  { 520, 210, 1, 0, 2642, 8 },
  { 807, 982, 1, 0, 256, 11 },
  { 1096, 213, 1, 0, 2642, 8 },
  { 1342, 216, 1, 0, 2642, 8 },
  { 109, 204, 1, 0, 2304, 8 },
  { 270, 1, 936, 2, 128, 0 },
  { 625, 928, 1, 0, 7216, 11 },
  { 920, 186, 1, 0, 1440, 8 },
  { 1209, 922, 1, 0, 8688, 11 },
  { 1441, 944, 1, 0, 4448, 11 },
  { 46, 738, 1, 0, 11712, 8 },
  { 490, 243, 1, 0, 2786, 8 },
  { 781, 246, 1, 0, 2786, 8 },
  { 1070, 297, 1, 0, 4704, 8 },
  { 1320, 735, 1, 0, 11672, 8 },
  { 83, 876, 1, 0, 11624, 11 },
  { 527, 246, 1, 0, 2738, 8 },
  { 814, 249, 1, 0, 2738, 8 },
  { 1103, 873, 1, 0, 11859, 11 },
  { 1349, 454, 1, 0, 6851, 8 },
  { 116, 979, 1, 0, 1024, 11 },
  { 534, 720, 1, 0, 11568, 8 },
  { 821, 695, 1, 0, 8032, 8 },
  { 1110, 970, 1, 0, 4273, 11 },
  { 1356, 970, 1, 0, 4273, 11 },
  { 123, 183, 1, 0, 688, 8 },
  { 541, 180, 1, 0, 528, 8 },
  { 832, 231, 1, 0, 2594, 8 },
  { 1121, 234, 1, 0, 2594, 8 },
  { 1363, 189, 1, 0, 2498, 8 },
  { 130, 192, 1, 0, 2498, 8 },
  { 548, 976, 1, 0, 1248, 11 },
  { 843, 228, 1, 0, 2546, 8 },
  { 1132, 231, 1, 0, 2546, 8 },
  { 1374, 234, 1, 0, 2546, 8 },
  { 141, 237, 1, 0, 2546, 8 },
  { 559, 240, 1, 0, 2546, 8 },
  { 854, 243, 1, 0, 2546, 8 },
  { 1143, 246, 1, 0, 2546, 8 },
  { 1385, 249, 1, 0, 2546, 8 },
  { 152, 252, 1, 0, 2546, 8 },
  { 570, 255, 1, 0, 2546, 8 },
  { 865, 258, 1, 0, 2546, 8 },
  { 1154, 988, 1, 0, 2546, 11 },
  { 1396, 991, 1, 0, 2546, 11 },
  { 263, 261, 1, 0, 2405, 8 },
};

extern const MCPhysReg HexagonRegUnitRoots[][2] = {
  { Hexagon::BADVA },
  { Hexagon::CCR },
  { Hexagon::CFGBASE },
  { Hexagon::CS0 },
  { Hexagon::CS1 },
  { Hexagon::DIAG },
  { Hexagon::ELR },
  { Hexagon::EVB },
  { Hexagon::FRAMEKEY },
  { Hexagon::FRAMELIMIT },
  { Hexagon::GELR },
  { Hexagon::GOSP },
  { Hexagon::GP },
  { Hexagon::GPCYCLEHI },
  { Hexagon::GPCYCLELO },
  { Hexagon::GSR },
  { Hexagon::HTID },
  { Hexagon::IMASK },
  { Hexagon::ISDBEN },
  { Hexagon::ISDBGPR },
  { Hexagon::ISDBMBXIN },
  { Hexagon::ISDBMBXOUT },
  { Hexagon::ISDBST },
  { Hexagon::MODECTL },
  { Hexagon::PC },
  { Hexagon::PCYCLEHI },
  { Hexagon::PCYCLELO },
  { Hexagon::PKTCOUNTLO },
  { Hexagon::PKTCOUNTHI },
  { Hexagon::PMUCFG },
  { Hexagon::PMUEVTCFG },
  { Hexagon::REV },
  { Hexagon::SSR },
  { Hexagon::STID },
  { Hexagon::SYSCFG },
  { Hexagon::UGP },
  { Hexagon::UPCYCLELO },
  { Hexagon::UPCYCLEHI },
  { Hexagon::USR_OVF },
  { Hexagon::USR, Hexagon::C8 },
  { Hexagon::UTIMERLO },
  { Hexagon::UTIMERHI },
  { Hexagon::VID },
  { Hexagon::VTMP },
  { Hexagon::BADVA0 },
  { Hexagon::BADVA1 },
  { Hexagon::BRKPTCFG0 },
  { Hexagon::BRKPTCFG1 },
  { Hexagon::BRKPTPC0 },
  { Hexagon::BRKPTPC1 },
  { Hexagon::C5 },
  { Hexagon::R0 },
  { Hexagon::R1 },
  { Hexagon::R2 },
  { Hexagon::R3 },
  { Hexagon::R4 },
  { Hexagon::R5 },
  { Hexagon::R6 },
  { Hexagon::R7 },
  { Hexagon::R8 },
  { Hexagon::R9 },
  { Hexagon::R10 },
  { Hexagon::R11 },
  { Hexagon::R12 },
  { Hexagon::R13 },
  { Hexagon::R14 },
  { Hexagon::R15 },
  { Hexagon::R16 },
  { Hexagon::R17 },
  { Hexagon::R18 },
  { Hexagon::R19 },
  { Hexagon::R20 },
  { Hexagon::R21 },
  { Hexagon::R22 },
  { Hexagon::R23 },
  { Hexagon::R24 },
  { Hexagon::R25 },
  { Hexagon::R26 },
  { Hexagon::R27 },
  { Hexagon::R28 },
  { Hexagon::R29 },
  { Hexagon::R30 },
  { Hexagon::R31 },
  { Hexagon::G3 },
  { Hexagon::G4 },
  { Hexagon::G5 },
  { Hexagon::G6 },
  { Hexagon::G7 },
  { Hexagon::G8 },
  { Hexagon::G9 },
  { Hexagon::G10 },
  { Hexagon::G11 },
  { Hexagon::G12 },
  { Hexagon::G13 },
  { Hexagon::G14 },
  { Hexagon::G15 },
  { Hexagon::G20 },
  { Hexagon::G21 },
  { Hexagon::G22 },
  { Hexagon::G23 },
  { Hexagon::G30 },
  { Hexagon::G31 },
  { Hexagon::GPMUCNT0 },
  { Hexagon::GPMUCNT1 },
  { Hexagon::GPMUCNT2 },
  { Hexagon::GPMUCNT3 },
  { Hexagon::GPMUCNT4 },
  { Hexagon::GPMUCNT5 },
  { Hexagon::GPMUCNT6 },
  { Hexagon::GPMUCNT7 },
  { Hexagon::ISDBCFG0 },
  { Hexagon::ISDBCFG1 },
  { Hexagon::LC0 },
  { Hexagon::LC1 },
  { Hexagon::M0 },
  { Hexagon::M1 },
  { Hexagon::P0, Hexagon::P3_0 },
  { Hexagon::P1, Hexagon::P3_0 },
  { Hexagon::P2, Hexagon::P3_0 },
  { Hexagon::P3, Hexagon::P3_0 },
  { Hexagon::PMUCNT0 },
  { Hexagon::PMUCNT1 },
  { Hexagon::PMUCNT2 },
  { Hexagon::PMUCNT3 },
  { Hexagon::Q0 },
  { Hexagon::Q1 },
  { Hexagon::Q2 },
  { Hexagon::Q3 },
  { Hexagon::S11 },
  { Hexagon::S12 },
  { Hexagon::S13 },
  { Hexagon::S14 },
  { Hexagon::S15 },
  { Hexagon::S19 },
  { Hexagon::S20 },
  { Hexagon::S22 },
  { Hexagon::S23 },
  { Hexagon::S24 },
  { Hexagon::S25 },
  { Hexagon::S26 },
  { Hexagon::S35 },
  { Hexagon::S44 },
  { Hexagon::S45 },
  { Hexagon::S46 },
  { Hexagon::S47 },
  { Hexagon::S54 },
  { Hexagon::S55 },
  { Hexagon::S56 },
  { Hexagon::S57 },
  { Hexagon::S58 },
  { Hexagon::S59 },
  { Hexagon::S60 },
  { Hexagon::S61 },
  { Hexagon::S62 },
  { Hexagon::S63 },
  { Hexagon::S64 },
  { Hexagon::S65 },
  { Hexagon::S66 },
  { Hexagon::S67 },
  { Hexagon::S68 },
  { Hexagon::S69 },
  { Hexagon::S70 },
  { Hexagon::S71 },
  { Hexagon::S72 },
  { Hexagon::S73 },
  { Hexagon::S74 },
  { Hexagon::S75 },
  { Hexagon::S76 },
  { Hexagon::S77 },
  { Hexagon::S78 },
  { Hexagon::S79 },
  { Hexagon::S80 },
  { Hexagon::SA0 },
  { Hexagon::SA1 },
  { Hexagon::SGP0 },
  { Hexagon::SGP1 },
  { Hexagon::V0 },
  { Hexagon::V1 },
  { Hexagon::V2 },
  { Hexagon::V3 },
  { Hexagon::V4 },
  { Hexagon::V5 },
  { Hexagon::V6 },
  { Hexagon::V7 },
  { Hexagon::V8 },
  { Hexagon::V9 },
  { Hexagon::V10 },
  { Hexagon::V11 },
  { Hexagon::V12 },
  { Hexagon::V13 },
  { Hexagon::V14 },
  { Hexagon::V15 },
  { Hexagon::V16 },
  { Hexagon::V17 },
  { Hexagon::V18 },
  { Hexagon::V19 },
  { Hexagon::V20 },
  { Hexagon::V21 },
  { Hexagon::V22 },
  { Hexagon::V23 },
  { Hexagon::V24 },
  { Hexagon::V25 },
  { Hexagon::V26 },
  { Hexagon::V27 },
  { Hexagon::V28 },
  { Hexagon::V29 },
  { Hexagon::V30 },
  { Hexagon::V31 },
  { Hexagon::VF0 },
  { Hexagon::VF1 },
  { Hexagon::VF2 },
  { Hexagon::VF3 },
  { Hexagon::VF4 },
  { Hexagon::VF5 },
  { Hexagon::VF6 },
  { Hexagon::VF7 },
  { Hexagon::VF8 },
  { Hexagon::VF9 },
  { Hexagon::VF10 },
  { Hexagon::VF11 },
  { Hexagon::VF12 },
  { Hexagon::VF13 },
  { Hexagon::VF14 },
  { Hexagon::VF15 },
  { Hexagon::VF16 },
  { Hexagon::VF17 },
  { Hexagon::VF18 },
  { Hexagon::VF19 },
  { Hexagon::VF20 },
  { Hexagon::VF21 },
  { Hexagon::VF22 },
  { Hexagon::VF23 },
  { Hexagon::VF24 },
  { Hexagon::VF25 },
  { Hexagon::VF26 },
  { Hexagon::VF27 },
  { Hexagon::VF28 },
  { Hexagon::VF29 },
  { Hexagon::VF30 },
  { Hexagon::VF31 },
  { Hexagon::VFR0 },
  { Hexagon::VFR1 },
  { Hexagon::VFR2 },
  { Hexagon::VFR3 },
  { Hexagon::VFR4 },
  { Hexagon::VFR5 },
  { Hexagon::VFR6 },
  { Hexagon::VFR7 },
  { Hexagon::VFR8 },
  { Hexagon::VFR9 },
  { Hexagon::VFR10 },
  { Hexagon::VFR11 },
  { Hexagon::VFR12 },
  { Hexagon::VFR13 },
  { Hexagon::VFR14 },
  { Hexagon::VFR15 },
  { Hexagon::VFR16 },
  { Hexagon::VFR17 },
  { Hexagon::VFR18 },
  { Hexagon::VFR19 },
  { Hexagon::VFR20 },
  { Hexagon::VFR21 },
  { Hexagon::VFR22 },
  { Hexagon::VFR23 },
  { Hexagon::VFR24 },
  { Hexagon::VFR25 },
  { Hexagon::VFR26 },
  { Hexagon::VFR27 },
  { Hexagon::VFR28 },
  { Hexagon::VFR29 },
  { Hexagon::VFR30 },
  { Hexagon::VFR31 },
};

namespace {     // Register classes...
  // UsrBits Register Class...
  const MCPhysReg UsrBits[] = {
    Hexagon::USR_OVF, 
  };

  // UsrBits Bit set.
  const uint8_t UsrBitsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // SysRegs Register Class...
  const MCPhysReg SysRegs[] = {
    Hexagon::SGP0, Hexagon::SGP1, Hexagon::STID, Hexagon::ELR, Hexagon::BADVA0, Hexagon::BADVA1, Hexagon::SSR, Hexagon::CCR, Hexagon::HTID, Hexagon::BADVA, Hexagon::IMASK, Hexagon::S11, Hexagon::S12, Hexagon::S13, Hexagon::S14, Hexagon::S15, Hexagon::S19, Hexagon::S23, Hexagon::S25, Hexagon::EVB, Hexagon::MODECTL, Hexagon::SYSCFG, Hexagon::S20, Hexagon::VID, Hexagon::S22, Hexagon::S24, Hexagon::S26, Hexagon::CFGBASE, Hexagon::DIAG, Hexagon::REV, Hexagon::PCYCLEHI, Hexagon::PCYCLELO, Hexagon::ISDBST, Hexagon::ISDBCFG0, Hexagon::ISDBCFG1, Hexagon::S35, Hexagon::BRKPTPC0, Hexagon::BRKPTCFG0, Hexagon::BRKPTPC1, Hexagon::BRKPTCFG1, Hexagon::ISDBMBXIN, Hexagon::ISDBMBXOUT, Hexagon::ISDBEN, Hexagon::ISDBGPR, Hexagon::S44, Hexagon::S45, Hexagon::S46, Hexagon::S47, Hexagon::PMUCNT0, Hexagon::PMUCNT1, Hexagon::PMUCNT2, Hexagon::PMUCNT3, Hexagon::PMUEVTCFG, Hexagon::PMUCFG, Hexagon::S54, Hexagon::S55, Hexagon::S56, Hexagon::S57, Hexagon::S58, Hexagon::S59, Hexagon::S60, Hexagon::S61, Hexagon::S62, Hexagon::S63, Hexagon::S64, Hexagon::S65, Hexagon::S66, Hexagon::S67, Hexagon::S68, Hexagon::S69, Hexagon::S70, Hexagon::S71, Hexagon::S72, Hexagon::S73, Hexagon::S74, Hexagon::S75, Hexagon::S76, Hexagon::S77, Hexagon::S78, Hexagon::S79, Hexagon::S80, 
  };

  // SysRegs Bit set.
  const uint8_t SysRegsBits[] = {
    0xee, 0x00, 0xff, 0xc6, 0x0f, 0xa0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xc0, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 
  };

  // GuestRegs Register Class...
  const MCPhysReg GuestRegs[] = {
    Hexagon::GELR, Hexagon::GSR, Hexagon::GOSP, Hexagon::G3, Hexagon::G4, Hexagon::G5, Hexagon::G6, Hexagon::G7, Hexagon::G8, Hexagon::G9, Hexagon::G10, Hexagon::G11, Hexagon::G12, Hexagon::G13, Hexagon::G14, Hexagon::G15, Hexagon::GPMUCNT4, Hexagon::GPMUCNT5, Hexagon::GPMUCNT6, Hexagon::GPMUCNT7, Hexagon::G20, Hexagon::G21, Hexagon::G22, Hexagon::G23, Hexagon::GPCYCLELO, Hexagon::GPCYCLEHI, Hexagon::GPMUCNT0, Hexagon::GPMUCNT1, Hexagon::GPMUCNT2, Hexagon::GPMUCNT3, Hexagon::G30, Hexagon::G31, 
  };

  // GuestRegs Bit set.
  const uint8_t GuestRegsBits[] = {
    0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x0f, 
  };

  // IntRegs Register Class...
  const MCPhysReg IntRegs[] = {
    Hexagon::R0, Hexagon::R1, Hexagon::R2, Hexagon::R3, Hexagon::R4, Hexagon::R5, Hexagon::R6, Hexagon::R7, Hexagon::R8, Hexagon::R9, Hexagon::R12, Hexagon::R13, Hexagon::R14, Hexagon::R15, Hexagon::R16, Hexagon::R17, Hexagon::R18, Hexagon::R19, Hexagon::R20, Hexagon::R21, Hexagon::R22, Hexagon::R23, Hexagon::R24, Hexagon::R25, Hexagon::R26, Hexagon::R27, Hexagon::R28, Hexagon::R10, Hexagon::R11, Hexagon::R29, Hexagon::R30, Hexagon::R31, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // CtrRegs Register Class...
  const MCPhysReg CtrRegs[] = {
    Hexagon::LC0, Hexagon::SA0, Hexagon::LC1, Hexagon::SA1, Hexagon::P3_0, Hexagon::C5, Hexagon::C8, Hexagon::PC, Hexagon::UGP, Hexagon::GP, Hexagon::CS0, Hexagon::CS1, Hexagon::UPCYCLELO, Hexagon::UPCYCLEHI, Hexagon::FRAMELIMIT, Hexagon::FRAMEKEY, Hexagon::PKTCOUNTLO, Hexagon::PKTCOUNTHI, Hexagon::UTIMERLO, Hexagon::UTIMERHI, Hexagon::M0, Hexagon::M1, Hexagon::USR, 
  };

  // CtrRegs Bit set.
  const uint8_t CtrRegsBits[] = {
    0x00, 0x13, 0x00, 0x31, 0xd0, 0x19, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // GeneralSubRegs Register Class...
  const MCPhysReg GeneralSubRegs[] = {
    Hexagon::R23, Hexagon::R22, Hexagon::R21, Hexagon::R20, Hexagon::R19, Hexagon::R18, Hexagon::R17, Hexagon::R16, Hexagon::R7, Hexagon::R6, Hexagon::R5, Hexagon::R4, Hexagon::R3, Hexagon::R2, Hexagon::R1, Hexagon::R0, 
  };

  // GeneralSubRegs Bit set.
  const uint8_t GeneralSubRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xc0, 0x3f, 
  };

  // V62Regs Register Class...
  const MCPhysReg V62Regs[] = {
    Hexagon::FRAMELIMIT, Hexagon::FRAMEKEY, Hexagon::C17_16, Hexagon::PKTCOUNTLO, Hexagon::PKTCOUNTHI, Hexagon::PKTCOUNT, Hexagon::UTIMERLO, Hexagon::UTIMERHI, Hexagon::UTIMER, 
  };

  // V62Regs Bit set.
  const uint8_t V62RegsBits[] = {
    0x00, 0x03, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // IntRegsLow8 Register Class...
  const MCPhysReg IntRegsLow8[] = {
    Hexagon::R7, Hexagon::R6, Hexagon::R5, Hexagon::R4, Hexagon::R3, Hexagon::R2, Hexagon::R1, Hexagon::R0, 
  };

  // IntRegsLow8 Bit set.
  const uint8_t IntRegsLow8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 
  };

  // CtrRegs_and_V62Regs Register Class...
  const MCPhysReg CtrRegs_and_V62Regs[] = {
    Hexagon::FRAMELIMIT, Hexagon::FRAMEKEY, Hexagon::PKTCOUNTLO, Hexagon::PKTCOUNTHI, Hexagon::UTIMERLO, Hexagon::UTIMERHI, 
  };

  // CtrRegs_and_V62Regs Bit set.
  const uint8_t CtrRegs_and_V62RegsBits[] = {
    0x00, 0x03, 0x00, 0x30, 0x00, 0x18, 
  };

  // PredRegs Register Class...
  const MCPhysReg PredRegs[] = {
    Hexagon::P0, Hexagon::P1, Hexagon::P2, Hexagon::P3, 
  };

  // PredRegs Bit set.
  const uint8_t PredRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // V62Regs_with_isub_hi Register Class...
  const MCPhysReg V62Regs_with_isub_hi[] = {
    Hexagon::C17_16, Hexagon::PKTCOUNT, Hexagon::UTIMER, 
  };

  // V62Regs_with_isub_hi Bit set.
  const uint8_t V62Regs_with_isub_hiBits[] = {
    0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // ModRegs Register Class...
  const MCPhysReg ModRegs[] = {
    Hexagon::M0, Hexagon::M1, 
  };

  // ModRegs Bit set.
  const uint8_t ModRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  };

  // CtrRegs_with_subreg_overflow Register Class...
  const MCPhysReg CtrRegs_with_subreg_overflow[] = {
    Hexagon::USR, 
  };

  // CtrRegs_with_subreg_overflow Bit set.
  const uint8_t CtrRegs_with_subreg_overflowBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

  // V65Regs Register Class...
  const MCPhysReg V65Regs[] = {
    Hexagon::VTMP, 
  };

  // V65Regs Bit set.
  const uint8_t V65RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // SysRegs64 Register Class...
  const MCPhysReg SysRegs64[] = {
    Hexagon::SGP1_0, Hexagon::S3_2, Hexagon::S5_4, Hexagon::S7_6, Hexagon::S9_8, Hexagon::S11_10, Hexagon::S13_12, Hexagon::S15_14, Hexagon::S17_16, Hexagon::S19_18, Hexagon::S21_20, Hexagon::S23_22, Hexagon::S25_24, Hexagon::S27_26, Hexagon::S29_28, Hexagon::S31_30, Hexagon::S33_32, Hexagon::S35_34, Hexagon::S37_36, Hexagon::S39_38, Hexagon::S41_40, Hexagon::S43_42, Hexagon::S45_44, Hexagon::S47_46, Hexagon::S49_48, Hexagon::S51_50, Hexagon::S53_52, Hexagon::S55_54, Hexagon::S57_56, Hexagon::S59_58, Hexagon::S61_60, Hexagon::S63_62, Hexagon::S65_64, Hexagon::S67_66, Hexagon::S69_68, Hexagon::S71_70, Hexagon::S73_72, Hexagon::S75_74, Hexagon::S77_76, Hexagon::S79_78, 
  };

  // SysRegs64 Bit set.
  const uint8_t SysRegs64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x3f, 
  };

  // DoubleRegs Register Class...
  const MCPhysReg DoubleRegs[] = {
    Hexagon::D0, Hexagon::D1, Hexagon::D2, Hexagon::D3, Hexagon::D4, Hexagon::D6, Hexagon::D7, Hexagon::D8, Hexagon::D9, Hexagon::D10, Hexagon::D11, Hexagon::D12, Hexagon::D13, Hexagon::D5, Hexagon::D14, Hexagon::D15, 
  };

  // DoubleRegs Bit set.
  const uint8_t DoubleRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 
  };

  // GuestRegs64 Register Class...
  const MCPhysReg GuestRegs64[] = {
    Hexagon::G1_0, Hexagon::G3_2, Hexagon::G5_4, Hexagon::G7_6, Hexagon::G9_8, Hexagon::G11_10, Hexagon::G13_12, Hexagon::G15_14, Hexagon::G17_16, Hexagon::G19_18, Hexagon::G21_20, Hexagon::G23_22, Hexagon::G25_24, Hexagon::G27_26, Hexagon::G29_28, Hexagon::G31_30, 
  };

  // GuestRegs64 Bit set.
  const uint8_t GuestRegs64Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x1f, 
  };

  // VectRegRev Register Class...
  const MCPhysReg VectRegRev[] = {
    Hexagon::WR0, Hexagon::WR1, Hexagon::WR2, Hexagon::WR3, Hexagon::WR4, Hexagon::WR5, Hexagon::WR6, Hexagon::WR7, Hexagon::WR8, Hexagon::WR9, Hexagon::WR10, Hexagon::WR11, Hexagon::WR12, Hexagon::WR13, Hexagon::WR14, Hexagon::WR15, 
  };

  // VectRegRev Bit set.
  const uint8_t VectRegRevBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3f, 
  };

  // CtrRegs64 Register Class...
  const MCPhysReg CtrRegs64[] = {
    Hexagon::C1_0, Hexagon::C3_2, Hexagon::C5_4, Hexagon::C7_6, Hexagon::C9_8, Hexagon::C11_10, Hexagon::CS, Hexagon::UPCYCLE, Hexagon::C17_16, Hexagon::PKTCOUNT, Hexagon::UTIMER, 
  };

  // CtrRegs64 Bit set.
  const uint8_t CtrRegs64Bits[] = {
    0x10, 0x00, 0x00, 0x08, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1f, 
  };

  // GeneralDoubleLow8Regs Register Class...
  const MCPhysReg GeneralDoubleLow8Regs[] = {
    Hexagon::D11, Hexagon::D10, Hexagon::D9, Hexagon::D8, Hexagon::D3, Hexagon::D2, Hexagon::D1, Hexagon::D0, 
  };

  // GeneralDoubleLow8Regs Bit set.
  const uint8_t GeneralDoubleLow8RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1e, 
  };

  // DoubleRegs_with_isub_hi_in_IntRegsLow8 Register Class...
  const MCPhysReg DoubleRegs_with_isub_hi_in_IntRegsLow8[] = {
    Hexagon::D3, Hexagon::D2, Hexagon::D1, Hexagon::D0, 
  };

  // DoubleRegs_with_isub_hi_in_IntRegsLow8 Bit set.
  const uint8_t DoubleRegs_with_isub_hi_in_IntRegsLow8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // CtrRegs64_and_V62Regs Register Class...
  const MCPhysReg CtrRegs64_and_V62Regs[] = {
    Hexagon::C17_16, Hexagon::PKTCOUNT, Hexagon::UTIMER, 
  };

  // CtrRegs64_and_V62Regs Bit set.
  const uint8_t CtrRegs64_and_V62RegsBits[] = {
    0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
  };

  // CtrRegs64_with_isub_hi_in_ModRegs Register Class...
  const MCPhysReg CtrRegs64_with_isub_hi_in_ModRegs[] = {
    Hexagon::C7_6, 
  };

  // CtrRegs64_with_isub_hi_in_ModRegs Bit set.
  const uint8_t CtrRegs64_with_isub_hi_in_ModRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
  };

  // HvxQR Register Class...
  const MCPhysReg HvxQR[] = {
    Hexagon::Q0, Hexagon::Q1, Hexagon::Q2, Hexagon::Q3, 
  };

  // HvxQR Bit set.
  const uint8_t HvxQRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // HvxVR Register Class...
  const MCPhysReg HvxVR[] = {
    Hexagon::V0, Hexagon::V1, Hexagon::V2, Hexagon::V3, Hexagon::V4, Hexagon::V5, Hexagon::V6, Hexagon::V7, Hexagon::V8, Hexagon::V9, Hexagon::V10, Hexagon::V11, Hexagon::V12, Hexagon::V13, Hexagon::V14, Hexagon::V15, Hexagon::V16, Hexagon::V17, Hexagon::V18, Hexagon::V19, Hexagon::V20, Hexagon::V21, Hexagon::V22, Hexagon::V23, Hexagon::V24, Hexagon::V25, Hexagon::V26, Hexagon::V27, Hexagon::V28, Hexagon::V29, Hexagon::V30, Hexagon::V31, Hexagon::VTMP, 
  };

  // HvxVR Bit set.
  const uint8_t HvxVRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // HvxVR_and_V65Regs Register Class...
  const MCPhysReg HvxVR_and_V65Regs[] = {
    Hexagon::VTMP, 
  };

  // HvxVR_and_V65Regs Bit set.
  const uint8_t HvxVR_and_V65RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // HvxWR Register Class...
  const MCPhysReg HvxWR[] = {
    Hexagon::W0, Hexagon::W1, Hexagon::W2, Hexagon::W3, Hexagon::W4, Hexagon::W5, Hexagon::W6, Hexagon::W7, Hexagon::W8, Hexagon::W9, Hexagon::W10, Hexagon::W11, Hexagon::W12, Hexagon::W13, Hexagon::W14, Hexagon::W15, Hexagon::WR0, Hexagon::WR1, Hexagon::WR2, Hexagon::WR3, Hexagon::WR4, Hexagon::WR5, Hexagon::WR6, Hexagon::WR7, Hexagon::WR8, Hexagon::WR9, Hexagon::WR10, Hexagon::WR11, Hexagon::WR12, Hexagon::WR13, Hexagon::WR14, Hexagon::WR15, 
  };

  // HvxWR Bit set.
  const uint8_t HvxWRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // HvxWR_and_VectRegRev Register Class...
  const MCPhysReg HvxWR_and_VectRegRev[] = {
    Hexagon::WR0, Hexagon::WR1, Hexagon::WR2, Hexagon::WR3, Hexagon::WR4, Hexagon::WR5, Hexagon::WR6, Hexagon::WR7, Hexagon::WR8, Hexagon::WR9, Hexagon::WR10, Hexagon::WR11, Hexagon::WR12, Hexagon::WR13, Hexagon::WR14, Hexagon::WR15, 
  };

  // HvxWR_and_VectRegRev Bit set.
  const uint8_t HvxWR_and_VectRegRevBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3f, 
  };

  // HvxVQR Register Class...
  const MCPhysReg HvxVQR[] = {
    Hexagon::VQ0, Hexagon::VQ1, Hexagon::VQ2, Hexagon::VQ3, Hexagon::VQ4, Hexagon::VQ5, Hexagon::VQ6, Hexagon::VQ7, 
  };

  // HvxVQR Bit set.
  const uint8_t HvxVQRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 
  };

} // end anonymous namespace

extern const char HexagonRegClassStrings[] = {
  /* 0 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '6', '4', 0,
  /* 10 */ 'S', 'y', 's', 'R', 'e', 'g', 's', '6', '4', 0,
  /* 20 */ 'G', 'u', 'e', 's', 't', 'R', 'e', 'g', 's', '6', '4', 0,
  /* 32 */ 'D', 'o', 'u', 'b', 'l', 'e', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 'i', 's', 'u', 'b', '_', 'h', 'i', '_', 'i', 'n', '_', 'I', 'n', 't', 'R', 'e', 'g', 's', 'L', 'o', 'w', '8', 0,
  /* 71 */ 'H', 'v', 'x', 'V', 'Q', 'R', 0,
  /* 78 */ 'H', 'v', 'x', 'Q', 'R', 0,
  /* 84 */ 'H', 'v', 'x', 'V', 'R', 0,
  /* 90 */ 'H', 'v', 'x', 'W', 'R', 0,
  /* 96 */ 'V', '6', '2', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 'i', 's', 'u', 'b', '_', 'h', 'i', 0,
  /* 117 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '6', '4', '_', 'a', 'n', 'd', '_', 'V', '6', '2', 'R', 'e', 'g', 's', 0,
  /* 139 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '_', 'a', 'n', 'd', '_', 'V', '6', '2', 'R', 'e', 'g', 's', 0,
  /* 159 */ 'H', 'v', 'x', 'V', 'R', '_', 'a', 'n', 'd', '_', 'V', '6', '5', 'R', 'e', 'g', 's', 0,
  /* 177 */ 'G', 'e', 'n', 'e', 'r', 'a', 'l', 'D', 'o', 'u', 'b', 'l', 'e', 'L', 'o', 'w', '8', 'R', 'e', 'g', 's', 0,
  /* 199 */ 'G', 'e', 'n', 'e', 'r', 'a', 'l', 'S', 'u', 'b', 'R', 'e', 'g', 's', 0,
  /* 214 */ 'P', 'r', 'e', 'd', 'R', 'e', 'g', 's', 0,
  /* 223 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '6', '4', '_', 'w', 'i', 't', 'h', '_', 'i', 's', 'u', 'b', '_', 'h', 'i', '_', 'i', 'n', '_', 'M', 'o', 'd', 'R', 'e', 'g', 's', 0,
  /* 257 */ 'D', 'o', 'u', 'b', 'l', 'e', 'R', 'e', 'g', 's', 0,
  /* 268 */ 'C', 't', 'r', 'R', 'e', 'g', 's', 0,
  /* 276 */ 'S', 'y', 's', 'R', 'e', 'g', 's', 0,
  /* 284 */ 'I', 'n', 't', 'R', 'e', 'g', 's', 0,
  /* 292 */ 'G', 'u', 'e', 's', 't', 'R', 'e', 'g', 's', 0,
  /* 302 */ 'U', 's', 'r', 'B', 'i', 't', 's', 0,
  /* 310 */ 'H', 'v', 'x', 'W', 'R', '_', 'a', 'n', 'd', '_', 'V', 'e', 'c', 't', 'R', 'e', 'g', 'R', 'e', 'v', 0,
  /* 331 */ 'C', 't', 'r', 'R', 'e', 'g', 's', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', 'r', 'e', 'g', '_', 'o', 'v', 'e', 'r', 'f', 'l', 'o', 'w', 0,
  0
};

extern const MCRegisterClass HexagonMCRegisterClasses[] = {
  { UsrBits, UsrBitsBits, 302, 1, sizeof(UsrBitsBits), Hexagon::UsrBitsRegClassID, 1, 1, false },
  { SysRegs, SysRegsBits, 276, 81, sizeof(SysRegsBits), Hexagon::SysRegsRegClassID, 32, 1, false },
  { GuestRegs, GuestRegsBits, 292, 32, sizeof(GuestRegsBits), Hexagon::GuestRegsRegClassID, 32, 1, false },
  { IntRegs, IntRegsBits, 284, 32, sizeof(IntRegsBits), Hexagon::IntRegsRegClassID, 32, 1, true },
  { CtrRegs, CtrRegsBits, 268, 23, sizeof(CtrRegsBits), Hexagon::CtrRegsRegClassID, 32, 1, false },
  { GeneralSubRegs, GeneralSubRegsBits, 199, 16, sizeof(GeneralSubRegsBits), Hexagon::GeneralSubRegsRegClassID, 32, 1, true },
  { V62Regs, V62RegsBits, 131, 9, sizeof(V62RegsBits), Hexagon::V62RegsRegClassID, 32, 1, false },
  { IntRegsLow8, IntRegsLow8Bits, 59, 8, sizeof(IntRegsLow8Bits), Hexagon::IntRegsLow8RegClassID, 32, 1, true },
  { CtrRegs_and_V62Regs, CtrRegs_and_V62RegsBits, 139, 6, sizeof(CtrRegs_and_V62RegsBits), Hexagon::CtrRegs_and_V62RegsRegClassID, 32, 1, false },
  { PredRegs, PredRegsBits, 214, 4, sizeof(PredRegsBits), Hexagon::PredRegsRegClassID, 32, 1, true },
  { V62Regs_with_isub_hi, V62Regs_with_isub_hiBits, 96, 3, sizeof(V62Regs_with_isub_hiBits), Hexagon::V62Regs_with_isub_hiRegClassID, 32, 1, false },
  { ModRegs, ModRegsBits, 249, 2, sizeof(ModRegsBits), Hexagon::ModRegsRegClassID, 32, 1, true },
  { CtrRegs_with_subreg_overflow, CtrRegs_with_subreg_overflowBits, 331, 1, sizeof(CtrRegs_with_subreg_overflowBits), Hexagon::CtrRegs_with_subreg_overflowRegClassID, 32, 1, false },
  { V65Regs, V65RegsBits, 169, 1, sizeof(V65RegsBits), Hexagon::V65RegsRegClassID, 32, 1, false },
  { SysRegs64, SysRegs64Bits, 10, 40, sizeof(SysRegs64Bits), Hexagon::SysRegs64RegClassID, 64, 1, false },
  { DoubleRegs, DoubleRegsBits, 257, 16, sizeof(DoubleRegsBits), Hexagon::DoubleRegsRegClassID, 64, 1, true },
  { GuestRegs64, GuestRegs64Bits, 20, 16, sizeof(GuestRegs64Bits), Hexagon::GuestRegs64RegClassID, 64, 1, false },
  { VectRegRev, VectRegRevBits, 320, 16, sizeof(VectRegRevBits), Hexagon::VectRegRevRegClassID, 64, 1, true },
  { CtrRegs64, CtrRegs64Bits, 0, 11, sizeof(CtrRegs64Bits), Hexagon::CtrRegs64RegClassID, 64, 1, false },
  { GeneralDoubleLow8Regs, GeneralDoubleLow8RegsBits, 177, 8, sizeof(GeneralDoubleLow8RegsBits), Hexagon::GeneralDoubleLow8RegsRegClassID, 64, 1, true },
  { DoubleRegs_with_isub_hi_in_IntRegsLow8, DoubleRegs_with_isub_hi_in_IntRegsLow8Bits, 32, 4, sizeof(DoubleRegs_with_isub_hi_in_IntRegsLow8Bits), Hexagon::DoubleRegs_with_isub_hi_in_IntRegsLow8RegClassID, 64, 1, true },
  { CtrRegs64_and_V62Regs, CtrRegs64_and_V62RegsBits, 117, 3, sizeof(CtrRegs64_and_V62RegsBits), Hexagon::CtrRegs64_and_V62RegsRegClassID, 64, 1, false },
  { CtrRegs64_with_isub_hi_in_ModRegs, CtrRegs64_with_isub_hi_in_ModRegsBits, 223, 1, sizeof(CtrRegs64_with_isub_hi_in_ModRegsBits), Hexagon::CtrRegs64_with_isub_hi_in_ModRegsRegClassID, 64, 1, false },
  { HvxQR, HvxQRBits, 78, 4, sizeof(HvxQRBits), Hexagon::HvxQRRegClassID, 0, 1, true },
  { HvxVR, HvxVRBits, 84, 33, sizeof(HvxVRBits), Hexagon::HvxVRRegClassID, 0, 1, true },
  { HvxVR_and_V65Regs, HvxVR_and_V65RegsBits, 159, 1, sizeof(HvxVR_and_V65RegsBits), Hexagon::HvxVR_and_V65RegsRegClassID, 0, 1, true },
  { HvxWR, HvxWRBits, 90, 32, sizeof(HvxWRBits), Hexagon::HvxWRRegClassID, 0, 1, true },
  { HvxWR_and_VectRegRev, HvxWR_and_VectRegRevBits, 310, 16, sizeof(HvxWR_and_VectRegRevBits), Hexagon::HvxWR_and_VectRegRevRegClassID, 0, 1, true },
  { HvxVQR, HvxVQRBits, 71, 8, sizeof(HvxVQRBits), Hexagon::HvxVQRRegClassID, 0, 1, true },
};

// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::R29 },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::D0 },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::C1_0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::C3_2 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::P3_0 },
  { 72U, Hexagon::C7_6 },
  { 73U, Hexagon::M0 },
  { 74U, Hexagon::C9_8 },
  { 75U, Hexagon::C8 },
  { 76U, Hexagon::C11_10 },
  { 77U, Hexagon::UGP },
  { 78U, Hexagon::GP },
  { 79U, Hexagon::CS0 },
  { 80U, Hexagon::CS1 },
  { 81U, Hexagon::UPCYCLELO },
  { 82U, Hexagon::UPCYCLEHI },
  { 83U, Hexagon::C17_16 },
  { 84U, Hexagon::FRAMEKEY },
  { 85U, Hexagon::PKTCOUNTLO },
  { 86U, Hexagon::PKTCOUNTHI },
  { 97U, Hexagon::UTIMERLO },
  { 98U, Hexagon::UTIMERHI },
  { 99U, Hexagon::W0 },
  { 100U, Hexagon::V1 },
  { 101U, Hexagon::W1 },
  { 102U, Hexagon::V3 },
  { 103U, Hexagon::W2 },
  { 104U, Hexagon::V5 },
  { 105U, Hexagon::W3 },
  { 106U, Hexagon::V7 },
  { 107U, Hexagon::W4 },
  { 108U, Hexagon::V9 },
  { 109U, Hexagon::W5 },
  { 110U, Hexagon::V11 },
  { 111U, Hexagon::W6 },
  { 112U, Hexagon::V13 },
  { 113U, Hexagon::W7 },
  { 114U, Hexagon::V15 },
  { 115U, Hexagon::W8 },
  { 116U, Hexagon::V17 },
  { 117U, Hexagon::W9 },
  { 118U, Hexagon::V19 },
  { 119U, Hexagon::W10 },
  { 120U, Hexagon::V21 },
  { 121U, Hexagon::W11 },
  { 122U, Hexagon::V23 },
  { 123U, Hexagon::W12 },
  { 124U, Hexagon::V25 },
  { 125U, Hexagon::W13 },
  { 126U, Hexagon::V27 },
  { 127U, Hexagon::W14 },
  { 128U, Hexagon::V29 },
  { 129U, Hexagon::W15 },
  { 130U, Hexagon::V31 },
  { 131U, Hexagon::Q0 },
  { 132U, Hexagon::Q1 },
  { 133U, Hexagon::Q2 },
  { 134U, Hexagon::Q3 },
  { 144U, Hexagon::SGP1_0 },
  { 145U, Hexagon::SGP1 },
  { 146U, Hexagon::S3_2 },
  { 147U, Hexagon::ELR },
  { 148U, Hexagon::S5_4 },
  { 149U, Hexagon::BADVA1 },
  { 150U, Hexagon::S7_6 },
  { 151U, Hexagon::CCR },
  { 152U, Hexagon::S9_8 },
  { 153U, Hexagon::BADVA },
  { 154U, Hexagon::S11_10 },
  { 155U, Hexagon::S11 },
  { 156U, Hexagon::S13_12 },
  { 157U, Hexagon::S13 },
  { 158U, Hexagon::S15_14 },
  { 159U, Hexagon::S15 },
  { 160U, Hexagon::S17_16 },
  { 161U, Hexagon::WR0 },
  { 162U, Hexagon::S19_18 },
  { 163U, Hexagon::WR2 },
  { 164U, Hexagon::S21_20 },
  { 165U, Hexagon::WR4 },
  { 166U, Hexagon::S23_22 },
  { 167U, Hexagon::WR6 },
  { 168U, Hexagon::S25_24 },
  { 169U, Hexagon::WR8 },
  { 170U, Hexagon::S27_26 },
  { 171U, Hexagon::WR10 },
  { 172U, Hexagon::S29_28 },
  { 173U, Hexagon::WR12 },
  { 174U, Hexagon::S31_30 },
  { 175U, Hexagon::WR14 },
  { 176U, Hexagon::S33_32 },
  { 177U, Hexagon::ISDBCFG0 },
  { 178U, Hexagon::S35_34 },
  { 179U, Hexagon::S35 },
  { 180U, Hexagon::S37_36 },
  { 181U, Hexagon::BRKPTCFG0 },
  { 182U, Hexagon::S39_38 },
  { 183U, Hexagon::BRKPTCFG1 },
  { 184U, Hexagon::S41_40 },
  { 185U, Hexagon::ISDBMBXOUT },
  { 186U, Hexagon::S43_42 },
  { 187U, Hexagon::ISDBGPR },
  { 188U, Hexagon::S45_44 },
  { 189U, Hexagon::S45 },
  { 190U, Hexagon::S47_46 },
  { 191U, Hexagon::S47 },
  { 192U, Hexagon::S49_48 },
  { 193U, Hexagon::PMUCNT1 },
  { 194U, Hexagon::S51_50 },
  { 195U, Hexagon::PMUCNT3 },
  { 196U, Hexagon::S53_52 },
  { 197U, Hexagon::PMUCFG },
  { 198U, Hexagon::S55_54 },
  { 199U, Hexagon::S55 },
  { 200U, Hexagon::S57_56 },
  { 201U, Hexagon::S57 },
  { 202U, Hexagon::S59_58 },
  { 203U, Hexagon::S59 },
  { 204U, Hexagon::S61_60 },
  { 205U, Hexagon::S61 },
  { 206U, Hexagon::S63_62 },
  { 207U, Hexagon::S63 },
  { 208U, Hexagon::S65_64 },
  { 209U, Hexagon::S65 },
  { 210U, Hexagon::S67_66 },
  { 211U, Hexagon::S67 },
  { 212U, Hexagon::S69_68 },
  { 213U, Hexagon::S69 },
  { 214U, Hexagon::S71_70 },
  { 215U, Hexagon::S71 },
  { 216U, Hexagon::S73_72 },
  { 217U, Hexagon::S73 },
  { 218U, Hexagon::S75_74 },
  { 219U, Hexagon::S77_76 },
  { 220U, Hexagon::S79_78 },
  { 221U, Hexagon::S77 },
  { 222U, Hexagon::G3_2 },
  { 223U, Hexagon::S79 },
  { 224U, Hexagon::G5_4 },
  { 225U, Hexagon::G5 },
  { 226U, Hexagon::G7_6 },
  { 227U, Hexagon::G7 },
  { 228U, Hexagon::G9_8 },
  { 229U, Hexagon::G9 },
  { 230U, Hexagon::G11_10 },
  { 231U, Hexagon::G11 },
  { 232U, Hexagon::G13_12 },
  { 233U, Hexagon::G13 },
  { 234U, Hexagon::G15_14 },
  { 235U, Hexagon::G15 },
  { 236U, Hexagon::G17_16 },
  { 237U, Hexagon::GPMUCNT5 },
  { 238U, Hexagon::G19_18 },
  { 239U, Hexagon::GPMUCNT7 },
  { 240U, Hexagon::G21_20 },
  { 241U, Hexagon::G21 },
  { 242U, Hexagon::G23_22 },
  { 243U, Hexagon::G23 },
  { 244U, Hexagon::G25_24 },
  { 245U, Hexagon::GPCYCLEHI },
  { 246U, Hexagon::G27_26 },
  { 247U, Hexagon::GPMUCNT1 },
  { 248U, Hexagon::G29_28 },
  { 249U, Hexagon::GPMUCNT3 },
  { 250U, Hexagon::G31_30 },
  { 251U, Hexagon::G31 },
  { 252U, Hexagon::VQ0 },
  { 253U, Hexagon::VQ1 },
  { 254U, Hexagon::VQ2 },
  { 255U, Hexagon::VQ3 },
  { 256U, Hexagon::VQ4 },
  { 257U, Hexagon::VQ5 },
  { 258U, Hexagon::VQ6 },
  { 259U, Hexagon::VQ7 },
  { 999999U, Hexagon::VF0 },
  { 1000000U, Hexagon::VF1 },
  { 1000001U, Hexagon::VF2 },
  { 1000002U, Hexagon::VF3 },
  { 1000003U, Hexagon::VF4 },
  { 1000004U, Hexagon::VF5 },
  { 1000005U, Hexagon::VF6 },
  { 1000006U, Hexagon::VF7 },
  { 1000007U, Hexagon::VF8 },
  { 1000008U, Hexagon::VF9 },
  { 1000009U, Hexagon::VF10 },
  { 1000010U, Hexagon::VF11 },
  { 1000011U, Hexagon::VF12 },
  { 1000012U, Hexagon::VF13 },
  { 1000013U, Hexagon::VF14 },
  { 1000014U, Hexagon::VF15 },
  { 1000015U, Hexagon::VF16 },
  { 1000016U, Hexagon::VF17 },
  { 1000017U, Hexagon::VF18 },
  { 1000018U, Hexagon::VF19 },
  { 1000019U, Hexagon::VF20 },
  { 1000020U, Hexagon::VF21 },
  { 1000021U, Hexagon::VF22 },
  { 1000022U, Hexagon::VF23 },
  { 1000023U, Hexagon::VF24 },
  { 1000024U, Hexagon::VF25 },
  { 1000025U, Hexagon::VF26 },
  { 1000026U, Hexagon::VF27 },
  { 1000027U, Hexagon::VF28 },
  { 1000028U, Hexagon::VF29 },
  { 1000029U, Hexagon::VF30 },
  { 1000030U, Hexagon::VF31 },
  { 9999999U, Hexagon::VFR0 },
  { 10000000U, Hexagon::VFR1 },
  { 10000001U, Hexagon::VFR2 },
  { 10000002U, Hexagon::VFR3 },
  { 10000003U, Hexagon::VFR4 },
  { 10000004U, Hexagon::VFR5 },
  { 10000005U, Hexagon::VFR6 },
  { 10000006U, Hexagon::VFR7 },
  { 10000007U, Hexagon::VFR8 },
  { 10000008U, Hexagon::VFR9 },
  { 10000009U, Hexagon::VFR10 },
  { 10000010U, Hexagon::VFR11 },
  { 10000011U, Hexagon::VFR12 },
  { 10000012U, Hexagon::VFR13 },
  { 10000013U, Hexagon::VFR14 },
  { 10000014U, Hexagon::VFR15 },
  { 10000015U, Hexagon::VFR16 },
  { 10000016U, Hexagon::VFR17 },
  { 10000017U, Hexagon::VFR18 },
  { 10000018U, Hexagon::VFR19 },
  { 10000019U, Hexagon::VFR20 },
  { 10000020U, Hexagon::VFR21 },
  { 10000021U, Hexagon::VFR22 },
  { 10000022U, Hexagon::VFR23 },
  { 10000023U, Hexagon::VFR24 },
  { 10000024U, Hexagon::VFR25 },
  { 10000025U, Hexagon::VFR26 },
  { 10000026U, Hexagon::VFR27 },
  { 10000027U, Hexagon::VFR28 },
  { 10000028U, Hexagon::VFR29 },
  { 10000029U, Hexagon::VFR30 },
  { 10000030U, Hexagon::VFR31 },
};
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize = array_lengthof(HexagonDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[] = {
  { 0U, Hexagon::R0 },
  { 1U, Hexagon::R1 },
  { 2U, Hexagon::R2 },
  { 3U, Hexagon::R3 },
  { 4U, Hexagon::R4 },
  { 5U, Hexagon::R5 },
  { 6U, Hexagon::R6 },
  { 7U, Hexagon::R7 },
  { 8U, Hexagon::R8 },
  { 9U, Hexagon::R9 },
  { 10U, Hexagon::R10 },
  { 11U, Hexagon::R11 },
  { 12U, Hexagon::R12 },
  { 13U, Hexagon::R13 },
  { 14U, Hexagon::R14 },
  { 15U, Hexagon::R15 },
  { 16U, Hexagon::R16 },
  { 17U, Hexagon::R17 },
  { 18U, Hexagon::R18 },
  { 19U, Hexagon::R19 },
  { 20U, Hexagon::R20 },
  { 21U, Hexagon::R21 },
  { 22U, Hexagon::R22 },
  { 23U, Hexagon::R23 },
  { 24U, Hexagon::R24 },
  { 25U, Hexagon::R25 },
  { 26U, Hexagon::R26 },
  { 27U, Hexagon::R27 },
  { 28U, Hexagon::R28 },
  { 29U, Hexagon::R29 },
  { 30U, Hexagon::R30 },
  { 31U, Hexagon::R31 },
  { 32U, Hexagon::D0 },
  { 34U, Hexagon::D1 },
  { 36U, Hexagon::D2 },
  { 38U, Hexagon::D3 },
  { 40U, Hexagon::D4 },
  { 42U, Hexagon::D5 },
  { 44U, Hexagon::D6 },
  { 46U, Hexagon::D7 },
  { 48U, Hexagon::D8 },
  { 50U, Hexagon::D9 },
  { 52U, Hexagon::D10 },
  { 54U, Hexagon::D11 },
  { 56U, Hexagon::D12 },
  { 58U, Hexagon::D13 },
  { 60U, Hexagon::D14 },
  { 62U, Hexagon::D15 },
  { 63U, Hexagon::P0 },
  { 64U, Hexagon::P1 },
  { 65U, Hexagon::P2 },
  { 66U, Hexagon::P3 },
  { 67U, Hexagon::C1_0 },
  { 68U, Hexagon::LC0 },
  { 69U, Hexagon::C3_2 },
  { 70U, Hexagon::LC1 },
  { 71U, Hexagon::P3_0 },
  { 72U, Hexagon::C7_6 },
  { 73U, Hexagon::M0 },
  { 74U, Hexagon::C9_8 },
  { 75U, Hexagon::C8 },
  { 76U, Hexagon::C11_10 },
  { 77U, Hexagon::UGP },
  { 78U, Hexagon::GP },
  { 79U, Hexagon::CS0 },
  { 80U, Hexagon::CS1 },
  { 81U, Hexagon::UPCYCLELO },
  { 82U, Hexagon::UPCYCLEHI },
  { 83U, Hexagon::C17_16 },
  { 84U, Hexagon::FRAMEKEY },
  { 85U, Hexagon::PKTCOUNTLO },
  { 86U, Hexagon::PKTCOUNTHI },
  { 97U, Hexagon::UTIMERLO },
  { 98U, Hexagon::UTIMERHI },
  { 99U, Hexagon::W0 },
  { 100U, Hexagon::V1 },
  { 101U, Hexagon::W1 },
  { 102U, Hexagon::V3 },
  { 103U, Hexagon::W2 },
  { 104U, Hexagon::V5 },
  { 105U, Hexagon::W3 },
  { 106U, Hexagon::V7 },
  { 107U, Hexagon::W4 },
  { 108U, Hexagon::V9 },
  { 109U, Hexagon::W5 },
  { 110U, Hexagon::V11 },
  { 111U, Hexagon::W6 },
  { 112U, Hexagon::V13 },
  { 113U, Hexagon::W7 },
  { 114U, Hexagon::V15 },
  { 115U, Hexagon::W8 },
  { 116U, Hexagon::V17 },
  { 117U, Hexagon::W9 },
  { 118U, Hexagon::V19 },
  { 119U, Hexagon::W10 },
  { 120U, Hexagon::V21 },
  { 121U, Hexagon::W11 },
  { 122U, Hexagon::V23 },
  { 123U, Hexagon::W12 },
  { 124U, Hexagon::V25 },
  { 125U, Hexagon::W13 },
  { 126U, Hexagon::V27 },
  { 127U, Hexagon::W14 },
  { 128U, Hexagon::V29 },
  { 129U, Hexagon::W15 },
  { 130U, Hexagon::V31 },
  { 131U, Hexagon::Q0 },
  { 132U, Hexagon::Q1 },
  { 133U, Hexagon::Q2 },
  { 134U, Hexagon::Q3 },
  { 144U, Hexagon::SGP1_0 },
  { 145U, Hexagon::SGP1 },
  { 146U, Hexagon::S3_2 },
  { 147U, Hexagon::ELR },
  { 148U, Hexagon::S5_4 },
  { 149U, Hexagon::BADVA1 },
  { 150U, Hexagon::S7_6 },
  { 151U, Hexagon::CCR },
  { 152U, Hexagon::S9_8 },
  { 153U, Hexagon::BADVA },
  { 154U, Hexagon::S11_10 },
  { 155U, Hexagon::S11 },
  { 156U, Hexagon::S13_12 },
  { 157U, Hexagon::S13 },
  { 158U, Hexagon::S15_14 },
  { 159U, Hexagon::S15 },
  { 160U, Hexagon::S17_16 },
  { 161U, Hexagon::WR0 },
  { 162U, Hexagon::S19_18 },
  { 163U, Hexagon::WR2 },
  { 164U, Hexagon::S21_20 },
  { 165U, Hexagon::WR4 },
  { 166U, Hexagon::S23_22 },
  { 167U, Hexagon::WR6 },
  { 168U, Hexagon::S25_24 },
  { 169U, Hexagon::WR8 },
  { 170U, Hexagon::S27_26 },
  { 171U, Hexagon::WR10 },
  { 172U, Hexagon::S29_28 },
  { 173U, Hexagon::WR12 },
  { 174U, Hexagon::S31_30 },
  { 175U, Hexagon::WR14 },
  { 176U, Hexagon::S33_32 },
  { 177U, Hexagon::ISDBCFG0 },
  { 178U, Hexagon::S35_34 },
  { 179U, Hexagon::S35 },
  { 180U, Hexagon::S37_36 },
  { 181U, Hexagon::BRKPTCFG0 },
  { 182U, Hexagon::S39_38 },
  { 183U, Hexagon::BRKPTCFG1 },
  { 184U, Hexagon::S41_40 },
  { 185U, Hexagon::ISDBMBXOUT },
  { 186U, Hexagon::S43_42 },
  { 187U, Hexagon::ISDBGPR },
  { 188U, Hexagon::S45_44 },
  { 189U, Hexagon::S45 },
  { 190U, Hexagon::S47_46 },
  { 191U, Hexagon::S47 },
  { 192U, Hexagon::S49_48 },
  { 193U, Hexagon::PMUCNT1 },
  { 194U, Hexagon::S51_50 },
  { 195U, Hexagon::PMUCNT3 },
  { 196U, Hexagon::S53_52 },
  { 197U, Hexagon::PMUCFG },
  { 198U, Hexagon::S55_54 },
  { 199U, Hexagon::S55 },
  { 200U, Hexagon::S57_56 },
  { 201U, Hexagon::S57 },
  { 202U, Hexagon::S59_58 },
  { 203U, Hexagon::S59 },
  { 204U, Hexagon::S61_60 },
  { 205U, Hexagon::S61 },
  { 206U, Hexagon::S63_62 },
  { 207U, Hexagon::S63 },
  { 208U, Hexagon::S65_64 },
  { 209U, Hexagon::S65 },
  { 210U, Hexagon::S67_66 },
  { 211U, Hexagon::S67 },
  { 212U, Hexagon::S69_68 },
  { 213U, Hexagon::S69 },
  { 214U, Hexagon::S71_70 },
  { 215U, Hexagon::S71 },
  { 216U, Hexagon::S73_72 },
  { 217U, Hexagon::S73 },
  { 218U, Hexagon::S75_74 },
  { 219U, Hexagon::S77_76 },
  { 220U, Hexagon::S79_78 },
  { 221U, Hexagon::S77 },
  { 222U, Hexagon::G3_2 },
  { 223U, Hexagon::S79 },
  { 224U, Hexagon::G5_4 },
  { 225U, Hexagon::G5 },
  { 226U, Hexagon::G7_6 },
  { 227U, Hexagon::G7 },
  { 228U, Hexagon::G9_8 },
  { 229U, Hexagon::G9 },
  { 230U, Hexagon::G11_10 },
  { 231U, Hexagon::G11 },
  { 232U, Hexagon::G13_12 },
  { 233U, Hexagon::G13 },
  { 234U, Hexagon::G15_14 },
  { 235U, Hexagon::G15 },
  { 236U, Hexagon::G17_16 },
  { 237U, Hexagon::GPMUCNT5 },
  { 238U, Hexagon::G19_18 },
  { 239U, Hexagon::GPMUCNT7 },
  { 240U, Hexagon::G21_20 },
  { 241U, Hexagon::G21 },
  { 242U, Hexagon::G23_22 },
  { 243U, Hexagon::G23 },
  { 244U, Hexagon::G25_24 },
  { 245U, Hexagon::GPCYCLEHI },
  { 246U, Hexagon::G27_26 },
  { 247U, Hexagon::GPMUCNT1 },
  { 248U, Hexagon::G29_28 },
  { 249U, Hexagon::GPMUCNT3 },
  { 250U, Hexagon::G31_30 },
  { 251U, Hexagon::G31 },
  { 252U, Hexagon::VQ0 },
  { 253U, Hexagon::VQ1 },
  { 254U, Hexagon::VQ2 },
  { 255U, Hexagon::VQ3 },
  { 256U, Hexagon::VQ4 },
  { 257U, Hexagon::VQ5 },
  { 258U, Hexagon::VQ6 },
  { 259U, Hexagon::VQ7 },
  { 999999U, Hexagon::VF0 },
  { 1000000U, Hexagon::VF1 },
  { 1000001U, Hexagon::VF2 },
  { 1000002U, Hexagon::VF3 },
  { 1000003U, Hexagon::VF4 },
  { 1000004U, Hexagon::VF5 },
  { 1000005U, Hexagon::VF6 },
  { 1000006U, Hexagon::VF7 },
  { 1000007U, Hexagon::VF8 },
  { 1000008U, Hexagon::VF9 },
  { 1000009U, Hexagon::VF10 },
  { 1000010U, Hexagon::VF11 },
  { 1000011U, Hexagon::VF12 },
  { 1000012U, Hexagon::VF13 },
  { 1000013U, Hexagon::VF14 },
  { 1000014U, Hexagon::VF15 },
  { 1000015U, Hexagon::VF16 },
  { 1000016U, Hexagon::VF17 },
  { 1000017U, Hexagon::VF18 },
  { 1000018U, Hexagon::VF19 },
  { 1000019U, Hexagon::VF20 },
  { 1000020U, Hexagon::VF21 },
  { 1000021U, Hexagon::VF22 },
  { 1000022U, Hexagon::VF23 },
  { 1000023U, Hexagon::VF24 },
  { 1000024U, Hexagon::VF25 },
  { 1000025U, Hexagon::VF26 },
  { 1000026U, Hexagon::VF27 },
  { 1000027U, Hexagon::VF28 },
  { 1000028U, Hexagon::VF29 },
  { 1000029U, Hexagon::VF30 },
  { 1000030U, Hexagon::VF31 },
  { 9999999U, Hexagon::VFR0 },
  { 10000000U, Hexagon::VFR1 },
  { 10000001U, Hexagon::VFR2 },
  { 10000002U, Hexagon::VFR3 },
  { 10000003U, Hexagon::VFR4 },
  { 10000004U, Hexagon::VFR5 },
  { 10000005U, Hexagon::VFR6 },
  { 10000006U, Hexagon::VFR7 },
  { 10000007U, Hexagon::VFR8 },
  { 10000008U, Hexagon::VFR9 },
  { 10000009U, Hexagon::VFR10 },
  { 10000010U, Hexagon::VFR11 },
  { 10000011U, Hexagon::VFR12 },
  { 10000012U, Hexagon::VFR13 },
  { 10000013U, Hexagon::VFR14 },
  { 10000014U, Hexagon::VFR15 },
  { 10000015U, Hexagon::VFR16 },
  { 10000016U, Hexagon::VFR17 },
  { 10000017U, Hexagon::VFR18 },
  { 10000018U, Hexagon::VFR19 },
  { 10000019U, Hexagon::VFR20 },
  { 10000020U, Hexagon::VFR21 },
  { 10000021U, Hexagon::VFR22 },
  { 10000022U, Hexagon::VFR23 },
  { 10000023U, Hexagon::VFR24 },
  { 10000024U, Hexagon::VFR25 },
  { 10000025U, Hexagon::VFR26 },
  { 10000026U, Hexagon::VFR27 },
  { 10000027U, Hexagon::VFR28 },
  { 10000028U, Hexagon::VFR29 },
  { 10000029U, Hexagon::VFR30 },
  { 10000030U, Hexagon::VFR31 },
};
extern const unsigned HexagonEHFlavour0Dwarf2LSize = array_lengthof(HexagonEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[] = {
  { Hexagon::BADVA, 153U },
  { Hexagon::CCR, 151U },
  { Hexagon::CFGBASE, 171U },
  { Hexagon::CS, 78U },
  { Hexagon::DIAG, 172U },
  { Hexagon::ELR, 147U },
  { Hexagon::EVB, 160U },
  { Hexagon::FRAMEKEY, 84U },
  { Hexagon::FRAMELIMIT, 83U },
  { Hexagon::GELR, 220U },
  { Hexagon::GOSP, 222U },
  { Hexagon::GP, 78U },
  { Hexagon::GPCYCLEHI, 245U },
  { Hexagon::GPCYCLELO, 244U },
  { Hexagon::GSR, 221U },
  { Hexagon::HTID, 152U },
  { Hexagon::IMASK, 154U },
  { Hexagon::ISDBEN, 186U },
  { Hexagon::ISDBGPR, 187U },
  { Hexagon::ISDBMBXIN, 184U },
  { Hexagon::ISDBMBXOUT, 185U },
  { Hexagon::ISDBST, 176U },
  { Hexagon::MODECTL, 161U },
  { Hexagon::PC, 76U },
  { Hexagon::PCYCLEHI, 175U },
  { Hexagon::PCYCLELO, 174U },
  { Hexagon::PKTCOUNT, 85U },
  { Hexagon::PKTCOUNTHI, 86U },
  { Hexagon::PKTCOUNTLO, 85U },
  { Hexagon::PMUCFG, 197U },
  { Hexagon::PMUEVTCFG, 196U },
  { Hexagon::REV, 173U },
  { Hexagon::SSR, 150U },
  { Hexagon::STID, 146U },
  { Hexagon::SYSCFG, 162U },
  { Hexagon::UGP, 77U },
  { Hexagon::UPCYCLE, 80U },
  { Hexagon::UPCYCLEHI, 82U },
  { Hexagon::UPCYCLELO, 81U },
  { Hexagon::USR, 75U },
  { Hexagon::UTIMER, 97U },
  { Hexagon::UTIMERHI, 98U },
  { Hexagon::UTIMERLO, 97U },
  { Hexagon::VID, 165U },
  { Hexagon::VTMP, 131U },
  { Hexagon::BADVA0, 148U },
  { Hexagon::BADVA1, 149U },
  { Hexagon::BRKPTCFG0, 181U },
  { Hexagon::BRKPTCFG1, 183U },
  { Hexagon::BRKPTPC0, 180U },
  { Hexagon::BRKPTPC1, 182U },
  { Hexagon::C5, 72U },
  { Hexagon::C8, 75U },
  { Hexagon::CS0, 79U },
  { Hexagon::CS1, 80U },
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::G3, 223U },
  { Hexagon::G4, 224U },
  { Hexagon::G5, 225U },
  { Hexagon::G6, 226U },
  { Hexagon::G7, 227U },
  { Hexagon::G8, 228U },
  { Hexagon::G9, 229U },
  { Hexagon::G10, 230U },
  { Hexagon::G11, 231U },
  { Hexagon::G12, 232U },
  { Hexagon::G13, 233U },
  { Hexagon::G14, 234U },
  { Hexagon::G15, 235U },
  { Hexagon::G20, 240U },
  { Hexagon::G21, 241U },
  { Hexagon::G22, 242U },
  { Hexagon::G23, 243U },
  { Hexagon::G30, 250U },
  { Hexagon::G31, 251U },
  { Hexagon::GPMUCNT0, 246U },
  { Hexagon::GPMUCNT1, 247U },
  { Hexagon::GPMUCNT2, 248U },
  { Hexagon::GPMUCNT3, 249U },
  { Hexagon::GPMUCNT4, 236U },
  { Hexagon::GPMUCNT5, 237U },
  { Hexagon::GPMUCNT6, 238U },
  { Hexagon::GPMUCNT7, 239U },
  { Hexagon::ISDBCFG0, 177U },
  { Hexagon::ISDBCFG1, 178U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::M0, 73U },
  { Hexagon::M1, 74U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::PMUCNT0, 192U },
  { Hexagon::PMUCNT1, 193U },
  { Hexagon::PMUCNT2, 194U },
  { Hexagon::PMUCNT3, 195U },
  { Hexagon::Q0, 131U },
  { Hexagon::Q1, 132U },
  { Hexagon::Q2, 133U },
  { Hexagon::Q3, 134U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::S11, 155U },
  { Hexagon::S12, 156U },
  { Hexagon::S13, 157U },
  { Hexagon::S14, 158U },
  { Hexagon::S15, 159U },
  { Hexagon::S19, 163U },
  { Hexagon::S20, 164U },
  { Hexagon::S22, 166U },
  { Hexagon::S23, 167U },
  { Hexagon::S24, 168U },
  { Hexagon::S25, 169U },
  { Hexagon::S26, 170U },
  { Hexagon::S35, 179U },
  { Hexagon::S44, 188U },
  { Hexagon::S45, 189U },
  { Hexagon::S46, 190U },
  { Hexagon::S47, 191U },
  { Hexagon::S54, 198U },
  { Hexagon::S55, 199U },
  { Hexagon::S56, 200U },
  { Hexagon::S57, 201U },
  { Hexagon::S58, 202U },
  { Hexagon::S59, 203U },
  { Hexagon::S60, 204U },
  { Hexagon::S61, 205U },
  { Hexagon::S62, 206U },
  { Hexagon::S63, 207U },
  { Hexagon::S64, 208U },
  { Hexagon::S65, 209U },
  { Hexagon::S66, 210U },
  { Hexagon::S67, 211U },
  { Hexagon::S68, 212U },
  { Hexagon::S69, 213U },
  { Hexagon::S70, 214U },
  { Hexagon::S71, 215U },
  { Hexagon::S72, 216U },
  { Hexagon::S73, 217U },
  { Hexagon::S74, 218U },
  { Hexagon::S75, 219U },
  { Hexagon::S76, 220U },
  { Hexagon::S77, 221U },
  { Hexagon::S78, 222U },
  { Hexagon::S79, 223U },
  { Hexagon::S80, 224U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::SGP0, 144U },
  { Hexagon::SGP1, 145U },
  { Hexagon::V0, 99U },
  { Hexagon::V1, 100U },
  { Hexagon::V2, 101U },
  { Hexagon::V3, 102U },
  { Hexagon::V4, 103U },
  { Hexagon::V5, 104U },
  { Hexagon::V6, 105U },
  { Hexagon::V7, 106U },
  { Hexagon::V8, 107U },
  { Hexagon::V9, 108U },
  { Hexagon::V10, 109U },
  { Hexagon::V11, 110U },
  { Hexagon::V12, 111U },
  { Hexagon::V13, 112U },
  { Hexagon::V14, 113U },
  { Hexagon::V15, 114U },
  { Hexagon::V16, 115U },
  { Hexagon::V17, 116U },
  { Hexagon::V18, 117U },
  { Hexagon::V19, 118U },
  { Hexagon::V20, 119U },
  { Hexagon::V21, 120U },
  { Hexagon::V22, 121U },
  { Hexagon::V23, 122U },
  { Hexagon::V24, 123U },
  { Hexagon::V25, 124U },
  { Hexagon::V26, 125U },
  { Hexagon::V27, 126U },
  { Hexagon::V28, 127U },
  { Hexagon::V29, 128U },
  { Hexagon::V30, 129U },
  { Hexagon::V31, 130U },
  { Hexagon::VF0, 999999U },
  { Hexagon::VF1, 1000000U },
  { Hexagon::VF2, 1000001U },
  { Hexagon::VF3, 1000002U },
  { Hexagon::VF4, 1000003U },
  { Hexagon::VF5, 1000004U },
  { Hexagon::VF6, 1000005U },
  { Hexagon::VF7, 1000006U },
  { Hexagon::VF8, 1000007U },
  { Hexagon::VF9, 1000008U },
  { Hexagon::VF10, 1000009U },
  { Hexagon::VF11, 1000010U },
  { Hexagon::VF12, 1000011U },
  { Hexagon::VF13, 1000012U },
  { Hexagon::VF14, 1000013U },
  { Hexagon::VF15, 1000014U },
  { Hexagon::VF16, 1000015U },
  { Hexagon::VF17, 1000016U },
  { Hexagon::VF18, 1000017U },
  { Hexagon::VF19, 1000018U },
  { Hexagon::VF20, 1000019U },
  { Hexagon::VF21, 1000020U },
  { Hexagon::VF22, 1000021U },
  { Hexagon::VF23, 1000022U },
  { Hexagon::VF24, 1000023U },
  { Hexagon::VF25, 1000024U },
  { Hexagon::VF26, 1000025U },
  { Hexagon::VF27, 1000026U },
  { Hexagon::VF28, 1000027U },
  { Hexagon::VF29, 1000028U },
  { Hexagon::VF30, 1000029U },
  { Hexagon::VF31, 1000030U },
  { Hexagon::VFR0, 9999999U },
  { Hexagon::VFR1, 10000000U },
  { Hexagon::VFR2, 10000001U },
  { Hexagon::VFR3, 10000002U },
  { Hexagon::VFR4, 10000003U },
  { Hexagon::VFR5, 10000004U },
  { Hexagon::VFR6, 10000005U },
  { Hexagon::VFR7, 10000006U },
  { Hexagon::VFR8, 10000007U },
  { Hexagon::VFR9, 10000008U },
  { Hexagon::VFR10, 10000009U },
  { Hexagon::VFR11, 10000010U },
  { Hexagon::VFR12, 10000011U },
  { Hexagon::VFR13, 10000012U },
  { Hexagon::VFR14, 10000013U },
  { Hexagon::VFR15, 10000014U },
  { Hexagon::VFR16, 10000015U },
  { Hexagon::VFR17, 10000016U },
  { Hexagon::VFR18, 10000017U },
  { Hexagon::VFR19, 10000018U },
  { Hexagon::VFR20, 10000019U },
  { Hexagon::VFR21, 10000020U },
  { Hexagon::VFR22, 10000021U },
  { Hexagon::VFR23, 10000022U },
  { Hexagon::VFR24, 10000023U },
  { Hexagon::VFR25, 10000024U },
  { Hexagon::VFR26, 10000025U },
  { Hexagon::VFR27, 10000026U },
  { Hexagon::VFR28, 10000027U },
  { Hexagon::VFR29, 10000028U },
  { Hexagon::VFR30, 10000029U },
  { Hexagon::VFR31, 10000030U },
  { Hexagon::VQ0, 252U },
  { Hexagon::VQ1, 253U },
  { Hexagon::VQ2, 254U },
  { Hexagon::VQ3, 255U },
  { Hexagon::VQ4, 256U },
  { Hexagon::VQ5, 257U },
  { Hexagon::VQ6, 258U },
  { Hexagon::VQ7, 259U },
  { Hexagon::W0, 99U },
  { Hexagon::W1, 101U },
  { Hexagon::W2, 103U },
  { Hexagon::W3, 105U },
  { Hexagon::W4, 107U },
  { Hexagon::W5, 109U },
  { Hexagon::W6, 111U },
  { Hexagon::W7, 113U },
  { Hexagon::W8, 115U },
  { Hexagon::W9, 117U },
  { Hexagon::W10, 119U },
  { Hexagon::W11, 121U },
  { Hexagon::W12, 123U },
  { Hexagon::W13, 125U },
  { Hexagon::W14, 127U },
  { Hexagon::W15, 129U },
  { Hexagon::WR0, 161U },
  { Hexagon::WR1, 162U },
  { Hexagon::WR2, 163U },
  { Hexagon::WR3, 164U },
  { Hexagon::WR4, 165U },
  { Hexagon::WR5, 166U },
  { Hexagon::WR6, 167U },
  { Hexagon::WR7, 168U },
  { Hexagon::WR8, 169U },
  { Hexagon::WR9, 170U },
  { Hexagon::WR10, 171U },
  { Hexagon::WR11, 172U },
  { Hexagon::WR12, 173U },
  { Hexagon::WR13, 174U },
  { Hexagon::WR14, 175U },
  { Hexagon::WR15, 176U },
  { Hexagon::C1_0, 67U },
  { Hexagon::C3_2, 69U },
  { Hexagon::C5_4, 71U },
  { Hexagon::C7_6, 72U },
  { Hexagon::C9_8, 74U },
  { Hexagon::C11_10, 76U },
  { Hexagon::C17_16, 83U },
  { Hexagon::G1_0, 220U },
  { Hexagon::G3_2, 222U },
  { Hexagon::G5_4, 224U },
  { Hexagon::G7_6, 226U },
  { Hexagon::G9_8, 228U },
  { Hexagon::G11_10, 230U },
  { Hexagon::G13_12, 232U },
  { Hexagon::G15_14, 234U },
  { Hexagon::G17_16, 236U },
  { Hexagon::G19_18, 238U },
  { Hexagon::G21_20, 240U },
  { Hexagon::G23_22, 242U },
  { Hexagon::G25_24, 244U },
  { Hexagon::G27_26, 246U },
  { Hexagon::G29_28, 248U },
  { Hexagon::G31_30, 250U },
  { Hexagon::P3_0, 71U },
  { Hexagon::S3_2, 146U },
  { Hexagon::S5_4, 148U },
  { Hexagon::S7_6, 150U },
  { Hexagon::S9_8, 152U },
  { Hexagon::S11_10, 154U },
  { Hexagon::S13_12, 156U },
  { Hexagon::S15_14, 158U },
  { Hexagon::S17_16, 160U },
  { Hexagon::S19_18, 162U },
  { Hexagon::S21_20, 164U },
  { Hexagon::S23_22, 166U },
  { Hexagon::S25_24, 168U },
  { Hexagon::S27_26, 170U },
  { Hexagon::S29_28, 172U },
  { Hexagon::S31_30, 174U },
  { Hexagon::S33_32, 176U },
  { Hexagon::S35_34, 178U },
  { Hexagon::S37_36, 180U },
  { Hexagon::S39_38, 182U },
  { Hexagon::S41_40, 184U },
  { Hexagon::S43_42, 186U },
  { Hexagon::S45_44, 188U },
  { Hexagon::S47_46, 190U },
  { Hexagon::S49_48, 192U },
  { Hexagon::S51_50, 194U },
  { Hexagon::S53_52, 196U },
  { Hexagon::S55_54, 198U },
  { Hexagon::S57_56, 200U },
  { Hexagon::S59_58, 202U },
  { Hexagon::S61_60, 204U },
  { Hexagon::S63_62, 206U },
  { Hexagon::S65_64, 208U },
  { Hexagon::S67_66, 210U },
  { Hexagon::S69_68, 212U },
  { Hexagon::S71_70, 214U },
  { Hexagon::S73_72, 216U },
  { Hexagon::S75_74, 218U },
  { Hexagon::S77_76, 219U },
  { Hexagon::S79_78, 220U },
  { Hexagon::SGP1_0, 144U },
};
extern const unsigned HexagonDwarfFlavour0L2DwarfSize = array_lengthof(HexagonDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[] = {
  { Hexagon::BADVA, 153U },
  { Hexagon::CCR, 151U },
  { Hexagon::CFGBASE, 171U },
  { Hexagon::CS, 78U },
  { Hexagon::DIAG, 172U },
  { Hexagon::ELR, 147U },
  { Hexagon::EVB, 160U },
  { Hexagon::FRAMEKEY, 84U },
  { Hexagon::FRAMELIMIT, 83U },
  { Hexagon::GELR, 220U },
  { Hexagon::GOSP, 222U },
  { Hexagon::GP, 78U },
  { Hexagon::GPCYCLEHI, 245U },
  { Hexagon::GPCYCLELO, 244U },
  { Hexagon::GSR, 221U },
  { Hexagon::HTID, 152U },
  { Hexagon::IMASK, 154U },
  { Hexagon::ISDBEN, 186U },
  { Hexagon::ISDBGPR, 187U },
  { Hexagon::ISDBMBXIN, 184U },
  { Hexagon::ISDBMBXOUT, 185U },
  { Hexagon::ISDBST, 176U },
  { Hexagon::MODECTL, 161U },
  { Hexagon::PC, 76U },
  { Hexagon::PCYCLEHI, 175U },
  { Hexagon::PCYCLELO, 174U },
  { Hexagon::PKTCOUNT, 85U },
  { Hexagon::PKTCOUNTHI, 86U },
  { Hexagon::PKTCOUNTLO, 85U },
  { Hexagon::PMUCFG, 197U },
  { Hexagon::PMUEVTCFG, 196U },
  { Hexagon::REV, 173U },
  { Hexagon::SSR, 150U },
  { Hexagon::STID, 146U },
  { Hexagon::SYSCFG, 162U },
  { Hexagon::UGP, 77U },
  { Hexagon::UPCYCLE, 80U },
  { Hexagon::UPCYCLEHI, 82U },
  { Hexagon::UPCYCLELO, 81U },
  { Hexagon::USR, 75U },
  { Hexagon::UTIMER, 97U },
  { Hexagon::UTIMERHI, 98U },
  { Hexagon::UTIMERLO, 97U },
  { Hexagon::VID, 165U },
  { Hexagon::VTMP, 131U },
  { Hexagon::BADVA0, 148U },
  { Hexagon::BADVA1, 149U },
  { Hexagon::BRKPTCFG0, 181U },
  { Hexagon::BRKPTCFG1, 183U },
  { Hexagon::BRKPTPC0, 180U },
  { Hexagon::BRKPTPC1, 182U },
  { Hexagon::C5, 72U },
  { Hexagon::C8, 75U },
  { Hexagon::CS0, 79U },
  { Hexagon::CS1, 80U },
  { Hexagon::D0, 32U },
  { Hexagon::D1, 34U },
  { Hexagon::D2, 36U },
  { Hexagon::D3, 38U },
  { Hexagon::D4, 40U },
  { Hexagon::D5, 42U },
  { Hexagon::D6, 44U },
  { Hexagon::D7, 46U },
  { Hexagon::D8, 48U },
  { Hexagon::D9, 50U },
  { Hexagon::D10, 52U },
  { Hexagon::D11, 54U },
  { Hexagon::D12, 56U },
  { Hexagon::D13, 58U },
  { Hexagon::D14, 60U },
  { Hexagon::D15, 62U },
  { Hexagon::G3, 223U },
  { Hexagon::G4, 224U },
  { Hexagon::G5, 225U },
  { Hexagon::G6, 226U },
  { Hexagon::G7, 227U },
  { Hexagon::G8, 228U },
  { Hexagon::G9, 229U },
  { Hexagon::G10, 230U },
  { Hexagon::G11, 231U },
  { Hexagon::G12, 232U },
  { Hexagon::G13, 233U },
  { Hexagon::G14, 234U },
  { Hexagon::G15, 235U },
  { Hexagon::G20, 240U },
  { Hexagon::G21, 241U },
  { Hexagon::G22, 242U },
  { Hexagon::G23, 243U },
  { Hexagon::G30, 250U },
  { Hexagon::G31, 251U },
  { Hexagon::GPMUCNT0, 246U },
  { Hexagon::GPMUCNT1, 247U },
  { Hexagon::GPMUCNT2, 248U },
  { Hexagon::GPMUCNT3, 249U },
  { Hexagon::GPMUCNT4, 236U },
  { Hexagon::GPMUCNT5, 237U },
  { Hexagon::GPMUCNT6, 238U },
  { Hexagon::GPMUCNT7, 239U },
  { Hexagon::ISDBCFG0, 177U },
  { Hexagon::ISDBCFG1, 178U },
  { Hexagon::LC0, 68U },
  { Hexagon::LC1, 70U },
  { Hexagon::M0, 73U },
  { Hexagon::M1, 74U },
  { Hexagon::P0, 63U },
  { Hexagon::P1, 64U },
  { Hexagon::P2, 65U },
  { Hexagon::P3, 66U },
  { Hexagon::PMUCNT0, 192U },
  { Hexagon::PMUCNT1, 193U },
  { Hexagon::PMUCNT2, 194U },
  { Hexagon::PMUCNT3, 195U },
  { Hexagon::Q0, 131U },
  { Hexagon::Q1, 132U },
  { Hexagon::Q2, 133U },
  { Hexagon::Q3, 134U },
  { Hexagon::R0, 0U },
  { Hexagon::R1, 1U },
  { Hexagon::R2, 2U },
  { Hexagon::R3, 3U },
  { Hexagon::R4, 4U },
  { Hexagon::R5, 5U },
  { Hexagon::R6, 6U },
  { Hexagon::R7, 7U },
  { Hexagon::R8, 8U },
  { Hexagon::R9, 9U },
  { Hexagon::R10, 10U },
  { Hexagon::R11, 11U },
  { Hexagon::R12, 12U },
  { Hexagon::R13, 13U },
  { Hexagon::R14, 14U },
  { Hexagon::R15, 15U },
  { Hexagon::R16, 16U },
  { Hexagon::R17, 17U },
  { Hexagon::R18, 18U },
  { Hexagon::R19, 19U },
  { Hexagon::R20, 20U },
  { Hexagon::R21, 21U },
  { Hexagon::R22, 22U },
  { Hexagon::R23, 23U },
  { Hexagon::R24, 24U },
  { Hexagon::R25, 25U },
  { Hexagon::R26, 26U },
  { Hexagon::R27, 27U },
  { Hexagon::R28, 28U },
  { Hexagon::R29, 29U },
  { Hexagon::R30, 30U },
  { Hexagon::R31, 31U },
  { Hexagon::S11, 155U },
  { Hexagon::S12, 156U },
  { Hexagon::S13, 157U },
  { Hexagon::S14, 158U },
  { Hexagon::S15, 159U },
  { Hexagon::S19, 163U },
  { Hexagon::S20, 164U },
  { Hexagon::S22, 166U },
  { Hexagon::S23, 167U },
  { Hexagon::S24, 168U },
  { Hexagon::S25, 169U },
  { Hexagon::S26, 170U },
  { Hexagon::S35, 179U },
  { Hexagon::S44, 188U },
  { Hexagon::S45, 189U },
  { Hexagon::S46, 190U },
  { Hexagon::S47, 191U },
  { Hexagon::S54, 198U },
  { Hexagon::S55, 199U },
  { Hexagon::S56, 200U },
  { Hexagon::S57, 201U },
  { Hexagon::S58, 202U },
  { Hexagon::S59, 203U },
  { Hexagon::S60, 204U },
  { Hexagon::S61, 205U },
  { Hexagon::S62, 206U },
  { Hexagon::S63, 207U },
  { Hexagon::S64, 208U },
  { Hexagon::S65, 209U },
  { Hexagon::S66, 210U },
  { Hexagon::S67, 211U },
  { Hexagon::S68, 212U },
  { Hexagon::S69, 213U },
  { Hexagon::S70, 214U },
  { Hexagon::S71, 215U },
  { Hexagon::S72, 216U },
  { Hexagon::S73, 217U },
  { Hexagon::S74, 218U },
  { Hexagon::S75, 219U },
  { Hexagon::S76, 220U },
  { Hexagon::S77, 221U },
  { Hexagon::S78, 222U },
  { Hexagon::S79, 223U },
  { Hexagon::S80, 224U },
  { Hexagon::SA0, 67U },
  { Hexagon::SA1, 69U },
  { Hexagon::SGP0, 144U },
  { Hexagon::SGP1, 145U },
  { Hexagon::V0, 99U },
  { Hexagon::V1, 100U },
  { Hexagon::V2, 101U },
  { Hexagon::V3, 102U },
  { Hexagon::V4, 103U },
  { Hexagon::V5, 104U },
  { Hexagon::V6, 105U },
  { Hexagon::V7, 106U },
  { Hexagon::V8, 107U },
  { Hexagon::V9, 108U },
  { Hexagon::V10, 109U },
  { Hexagon::V11, 110U },
  { Hexagon::V12, 111U },
  { Hexagon::V13, 112U },
  { Hexagon::V14, 113U },
  { Hexagon::V15, 114U },
  { Hexagon::V16, 115U },
  { Hexagon::V17, 116U },
  { Hexagon::V18, 117U },
  { Hexagon::V19, 118U },
  { Hexagon::V20, 119U },
  { Hexagon::V21, 120U },
  { Hexagon::V22, 121U },
  { Hexagon::V23, 122U },
  { Hexagon::V24, 123U },
  { Hexagon::V25, 124U },
  { Hexagon::V26, 125U },
  { Hexagon::V27, 126U },
  { Hexagon::V28, 127U },
  { Hexagon::V29, 128U },
  { Hexagon::V30, 129U },
  { Hexagon::V31, 130U },
  { Hexagon::VF0, 999999U },
  { Hexagon::VF1, 1000000U },
  { Hexagon::VF2, 1000001U },
  { Hexagon::VF3, 1000002U },
  { Hexagon::VF4, 1000003U },
  { Hexagon::VF5, 1000004U },
  { Hexagon::VF6, 1000005U },
  { Hexagon::VF7, 1000006U },
  { Hexagon::VF8, 1000007U },
  { Hexagon::VF9, 1000008U },
  { Hexagon::VF10, 1000009U },
  { Hexagon::VF11, 1000010U },
  { Hexagon::VF12, 1000011U },
  { Hexagon::VF13, 1000012U },
  { Hexagon::VF14, 1000013U },
  { Hexagon::VF15, 1000014U },
  { Hexagon::VF16, 1000015U },
  { Hexagon::VF17, 1000016U },
  { Hexagon::VF18, 1000017U },
  { Hexagon::VF19, 1000018U },
  { Hexagon::VF20, 1000019U },
  { Hexagon::VF21, 1000020U },
  { Hexagon::VF22, 1000021U },
  { Hexagon::VF23, 1000022U },
  { Hexagon::VF24, 1000023U },
  { Hexagon::VF25, 1000024U },
  { Hexagon::VF26, 1000025U },
  { Hexagon::VF27, 1000026U },
  { Hexagon::VF28, 1000027U },
  { Hexagon::VF29, 1000028U },
  { Hexagon::VF30, 1000029U },
  { Hexagon::VF31, 1000030U },
  { Hexagon::VFR0, 9999999U },
  { Hexagon::VFR1, 10000000U },
  { Hexagon::VFR2, 10000001U },
  { Hexagon::VFR3, 10000002U },
  { Hexagon::VFR4, 10000003U },
  { Hexagon::VFR5, 10000004U },
  { Hexagon::VFR6, 10000005U },
  { Hexagon::VFR7, 10000006U },
  { Hexagon::VFR8, 10000007U },
  { Hexagon::VFR9, 10000008U },
  { Hexagon::VFR10, 10000009U },
  { Hexagon::VFR11, 10000010U },
  { Hexagon::VFR12, 10000011U },
  { Hexagon::VFR13, 10000012U },
  { Hexagon::VFR14, 10000013U },
  { Hexagon::VFR15, 10000014U },
  { Hexagon::VFR16, 10000015U },
  { Hexagon::VFR17, 10000016U },
  { Hexagon::VFR18, 10000017U },
  { Hexagon::VFR19, 10000018U },
  { Hexagon::VFR20, 10000019U },
  { Hexagon::VFR21, 10000020U },
  { Hexagon::VFR22, 10000021U },
  { Hexagon::VFR23, 10000022U },
  { Hexagon::VFR24, 10000023U },
  { Hexagon::VFR25, 10000024U },
  { Hexagon::VFR26, 10000025U },
  { Hexagon::VFR27, 10000026U },
  { Hexagon::VFR28, 10000027U },
  { Hexagon::VFR29, 10000028U },
  { Hexagon::VFR30, 10000029U },
  { Hexagon::VFR31, 10000030U },
  { Hexagon::VQ0, 252U },
  { Hexagon::VQ1, 253U },
  { Hexagon::VQ2, 254U },
  { Hexagon::VQ3, 255U },
  { Hexagon::VQ4, 256U },
  { Hexagon::VQ5, 257U },
  { Hexagon::VQ6, 258U },
  { Hexagon::VQ7, 259U },
  { Hexagon::W0, 99U },
  { Hexagon::W1, 101U },
  { Hexagon::W2, 103U },
  { Hexagon::W3, 105U },
  { Hexagon::W4, 107U },
  { Hexagon::W5, 109U },
  { Hexagon::W6, 111U },
  { Hexagon::W7, 113U },
  { Hexagon::W8, 115U },
  { Hexagon::W9, 117U },
  { Hexagon::W10, 119U },
  { Hexagon::W11, 121U },
  { Hexagon::W12, 123U },
  { Hexagon::W13, 125U },
  { Hexagon::W14, 127U },
  { Hexagon::W15, 129U },
  { Hexagon::WR0, 161U },
  { Hexagon::WR1, 162U },
  { Hexagon::WR2, 163U },
  { Hexagon::WR3, 164U },
  { Hexagon::WR4, 165U },
  { Hexagon::WR5, 166U },
  { Hexagon::WR6, 167U },
  { Hexagon::WR7, 168U },
  { Hexagon::WR8, 169U },
  { Hexagon::WR9, 170U },
  { Hexagon::WR10, 171U },
  { Hexagon::WR11, 172U },
  { Hexagon::WR12, 173U },
  { Hexagon::WR13, 174U },
  { Hexagon::WR14, 175U },
  { Hexagon::WR15, 176U },
  { Hexagon::C1_0, 67U },
  { Hexagon::C3_2, 69U },
  { Hexagon::C5_4, 71U },
  { Hexagon::C7_6, 72U },
  { Hexagon::C9_8, 74U },
  { Hexagon::C11_10, 76U },
  { Hexagon::C17_16, 83U },
  { Hexagon::G1_0, 220U },
  { Hexagon::G3_2, 222U },
  { Hexagon::G5_4, 224U },
  { Hexagon::G7_6, 226U },
  { Hexagon::G9_8, 228U },
  { Hexagon::G11_10, 230U },
  { Hexagon::G13_12, 232U },
  { Hexagon::G15_14, 234U },
  { Hexagon::G17_16, 236U },
  { Hexagon::G19_18, 238U },
  { Hexagon::G21_20, 240U },
  { Hexagon::G23_22, 242U },
  { Hexagon::G25_24, 244U },
  { Hexagon::G27_26, 246U },
  { Hexagon::G29_28, 248U },
  { Hexagon::G31_30, 250U },
  { Hexagon::P3_0, 71U },
  { Hexagon::S3_2, 146U },
  { Hexagon::S5_4, 148U },
  { Hexagon::S7_6, 150U },
  { Hexagon::S9_8, 152U },
  { Hexagon::S11_10, 154U },
  { Hexagon::S13_12, 156U },
  { Hexagon::S15_14, 158U },
  { Hexagon::S17_16, 160U },
  { Hexagon::S19_18, 162U },
  { Hexagon::S21_20, 164U },
  { Hexagon::S23_22, 166U },
  { Hexagon::S25_24, 168U },
  { Hexagon::S27_26, 170U },
  { Hexagon::S29_28, 172U },
  { Hexagon::S31_30, 174U },
  { Hexagon::S33_32, 176U },
  { Hexagon::S35_34, 178U },
  { Hexagon::S37_36, 180U },
  { Hexagon::S39_38, 182U },
  { Hexagon::S41_40, 184U },
  { Hexagon::S43_42, 186U },
  { Hexagon::S45_44, 188U },
  { Hexagon::S47_46, 190U },
  { Hexagon::S49_48, 192U },
  { Hexagon::S51_50, 194U },
  { Hexagon::S53_52, 196U },
  { Hexagon::S55_54, 198U },
  { Hexagon::S57_56, 200U },
  { Hexagon::S59_58, 202U },
  { Hexagon::S61_60, 204U },
  { Hexagon::S63_62, 206U },
  { Hexagon::S65_64, 208U },
  { Hexagon::S67_66, 210U },
  { Hexagon::S69_68, 212U },
  { Hexagon::S71_70, 214U },
  { Hexagon::S73_72, 216U },
  { Hexagon::S75_74, 218U },
  { Hexagon::S77_76, 219U },
  { Hexagon::S79_78, 220U },
  { Hexagon::SGP1_0, 144U },
};
extern const unsigned HexagonEHFlavour0L2DwarfSize = array_lengthof(HexagonEHFlavour0L2Dwarf);

extern const uint16_t HexagonRegEncodingTable[] = {
  0,
  9,
  7,
  27,
  12,
  28,
  3,
  16,
  17,
  16,
  0,
  2,
  11,
  25,
  24,
  1,
  8,
  10,
  42,
  43,
  40,
  41,
  32,
  17,
  9,
  31,
  30,
  18,
  19,
  18,
  53,
  52,
  29,
  6,
  2,
  18,
  10,
  14,
  15,
  14,
  8,
  0,
  30,
  31,
  30,
  21,
  0,
  4,
  5,
  37,
  39,
  36,
  38,
  5,
  8,
  12,
  13,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  20,
  21,
  22,
  23,
  30,
  31,
  26,
  27,
  28,
  29,
  16,
  17,
  18,
  19,
  33,
  34,
  1,
  3,
  6,
  7,
  0,
  1,
  2,
  3,
  48,
  49,
  50,
  51,
  0,
  1,
  2,
  3,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  11,
  12,
  13,
  14,
  15,
  19,
  20,
  22,
  23,
  24,
  25,
  26,
  35,
  44,
  45,
  46,
  47,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  0,
  2,
  0,
  1,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  8,
  12,
  16,
  20,
  24,
  28,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  31,
  0,
  2,
  4,
  6,
  8,
  10,
  16,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  4,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  32,
  34,
  36,
  38,
  40,
  42,
  44,
  46,
  48,
  50,
  52,
  54,
  56,
  58,
  60,
  62,
  64,
  66,
  68,
  70,
  72,
  74,
  76,
  78,
  0,
};
static inline void InitHexagonMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(HexagonRegDesc, 398, RA, PC, HexagonMCRegisterClasses, 29, HexagonRegUnitRoots, 272, HexagonRegDiffLists, HexagonLaneMaskLists, HexagonRegStrings, HexagonRegClassStrings, HexagonSubRegIdxLists, 12,
HexagonSubRegIdxRanges, HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/CodeGen/TargetRegisterInfo.h"

namespace llvm {

class HexagonFrameLowering;

struct HexagonGenRegisterInfo : public TargetRegisterInfo {
  explicit HexagonGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0,
      unsigned PC = 0, unsigned HwMode = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass *, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  bool isGeneralPurposeRegister(const MachineFunction &, MCRegister) const override;
  bool isFixedRegister(const MachineFunction &, MCRegister) const override;
  bool isArgumentRegister(const MachineFunction &, MCRegister) const override;
  /// Devirtualized TargetFrameLowering.
  static const HexagonFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace Hexagon { // Register classes
  extern const TargetRegisterClass UsrBitsRegClass;
  extern const TargetRegisterClass SysRegsRegClass;
  extern const TargetRegisterClass GuestRegsRegClass;
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass CtrRegsRegClass;
  extern const TargetRegisterClass GeneralSubRegsRegClass;
  extern const TargetRegisterClass V62RegsRegClass;
  extern const TargetRegisterClass IntRegsLow8RegClass;
  extern const TargetRegisterClass CtrRegs_and_V62RegsRegClass;
  extern const TargetRegisterClass PredRegsRegClass;
  extern const TargetRegisterClass V62Regs_with_isub_hiRegClass;
  extern const TargetRegisterClass ModRegsRegClass;
  extern const TargetRegisterClass CtrRegs_with_subreg_overflowRegClass;
  extern const TargetRegisterClass V65RegsRegClass;
  extern const TargetRegisterClass SysRegs64RegClass;
  extern const TargetRegisterClass DoubleRegsRegClass;
  extern const TargetRegisterClass GuestRegs64RegClass;
  extern const TargetRegisterClass VectRegRevRegClass;
  extern const TargetRegisterClass CtrRegs64RegClass;
  extern const TargetRegisterClass GeneralDoubleLow8RegsRegClass;
  extern const TargetRegisterClass DoubleRegs_with_isub_hi_in_IntRegsLow8RegClass;
  extern const TargetRegisterClass CtrRegs64_and_V62RegsRegClass;
  extern const TargetRegisterClass CtrRegs64_with_isub_hi_in_ModRegsRegClass;
  extern const TargetRegisterClass HvxQRRegClass;
  extern const TargetRegisterClass HvxVRRegClass;
  extern const TargetRegisterClass HvxVR_and_V65RegsRegClass;
  extern const TargetRegisterClass HvxWRRegClass;
  extern const TargetRegisterClass HvxWR_and_VectRegRevRegClass;
  extern const TargetRegisterClass HvxVQRRegClass;
} // end namespace Hexagon

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass HexagonMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i1, MVT::v2i1, MVT::v4i1, MVT::v8i1, MVT::v4i8, MVT::v2i16, MVT::i32, MVT::Other,
  /* 10 */ MVT::i64, MVT::Other,
  /* 12 */ MVT::v64i1, MVT::v64i1, MVT::v32i1, MVT::v16i1, MVT::Other,
  /* 17 */ MVT::v128i1, MVT::v128i1, MVT::v64i1, MVT::v32i1, MVT::Other,
  /* 22 */ MVT::i32, MVT::f32, MVT::v4i8, MVT::v2i16, MVT::Other,
  /* 27 */ MVT::i64, MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::Other,
  /* 33 */ MVT::v64i8, MVT::v32i16, MVT::v16i32, MVT::v32f16, MVT::v16f32, MVT::Other,
  /* 39 */ MVT::v128i8, MVT::v64i16, MVT::v32i32, MVT::v64f16, MVT::v32f32, MVT::Other,
  /* 45 */ MVT::v256i8, MVT::v128i16, MVT::v64i32, MVT::v128f16, MVT::v64f32, MVT::Other,
  /* 51 */ MVT::Untyped, MVT::Other,
};

static const char *SubRegIndexNameTable[] = { "isub_hi", "isub_lo", "subreg_overflow", "vsub_fake", "vsub_hi", "vsub_lo", "wsub_hi", "wsub_lo", "wsub_hi_then_vsub_fake", "wsub_hi_then_vsub_hi", "wsub_hi_then_vsub_lo", "" };


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x0000000000000001), // isub_hi
  LaneBitmask(0x0000000000000002), // isub_lo
  LaneBitmask(0x0000000000000004), // subreg_overflow
  LaneBitmask(0x0000000000000008), // vsub_fake
  LaneBitmask(0x0000000000000010), // vsub_hi
  LaneBitmask(0x0000000000000020), // vsub_lo
  LaneBitmask(0x00000000000001C0), // wsub_hi
  LaneBitmask(0x0000000000000038), // wsub_lo
  LaneBitmask(0x0000000000000040), // wsub_hi_then_vsub_fake
  LaneBitmask(0x0000000000000080), // wsub_hi_then_vsub_hi
  LaneBitmask(0x0000000000000100), // wsub_hi_then_vsub_lo
 };



static const TargetRegisterInfo::RegClassInfo RegClassInfos[] = {
  // Mode = 0 (Default)
  { 1, 1, 0, VTLists+0 },    // UsrBits
  { 32, 32, 32, VTLists+8 },    // SysRegs
  { 32, 32, 32, VTLists+8 },    // GuestRegs
  { 32, 32, 32, VTLists+22 },    // IntRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs
  { 32, 32, 32, VTLists+8 },    // GeneralSubRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs
  { 32, 32, 32, VTLists+8 },    // IntRegsLow8
  { 32, 32, 32, VTLists+8 },    // CtrRegs_and_V62Regs
  { 32, 32, 32, VTLists+2 },    // PredRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs_with_isub_hi
  { 32, 32, 32, VTLists+8 },    // ModRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs_with_subreg_overflow
  { 32, 32, 32, VTLists+8 },    // V65Regs
  { 64, 64, 64, VTLists+10 },    // SysRegs64
  { 64, 64, 64, VTLists+27 },    // DoubleRegs
  { 64, 64, 64, VTLists+10 },    // GuestRegs64
  { 64, 64, 64, VTLists+10 },    // VectRegRev
  { 64, 64, 64, VTLists+10 },    // CtrRegs64
  { 64, 64, 64, VTLists+10 },    // GeneralDoubleLow8Regs
  { 64, 64, 64, VTLists+10 },    // DoubleRegs_with_isub_hi_in_IntRegsLow8
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_and_V62Regs
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_with_isub_hi_in_ModRegs
  { 64, 512, 512, VTLists+12 },    // HvxQR
  { 512, 512, 512, VTLists+33 },    // HvxVR
  { 512, 512, 512, VTLists+33 },    // HvxVR_and_V65Regs
  { 1024, 1024, 1024, VTLists+39 },    // HvxWR
  { 1024, 1024, 1024, VTLists+39 },    // HvxWR_and_VectRegRev
  { 2048, 2048, 2048, VTLists+51 },    // HvxVQR
  // Mode = 1 (Hvx128)
  { 1, 1, 0, VTLists+0 },    // UsrBits
  { 32, 32, 32, VTLists+8 },    // SysRegs
  { 32, 32, 32, VTLists+8 },    // GuestRegs
  { 32, 32, 32, VTLists+22 },    // IntRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs
  { 32, 32, 32, VTLists+8 },    // GeneralSubRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs
  { 32, 32, 32, VTLists+8 },    // IntRegsLow8
  { 32, 32, 32, VTLists+8 },    // CtrRegs_and_V62Regs
  { 32, 32, 32, VTLists+2 },    // PredRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs_with_isub_hi
  { 32, 32, 32, VTLists+8 },    // ModRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs_with_subreg_overflow
  { 32, 32, 32, VTLists+8 },    // V65Regs
  { 64, 64, 64, VTLists+10 },    // SysRegs64
  { 64, 64, 64, VTLists+27 },    // DoubleRegs
  { 64, 64, 64, VTLists+10 },    // GuestRegs64
  { 64, 64, 64, VTLists+10 },    // VectRegRev
  { 64, 64, 64, VTLists+10 },    // CtrRegs64
  { 64, 64, 64, VTLists+10 },    // GeneralDoubleLow8Regs
  { 64, 64, 64, VTLists+10 },    // DoubleRegs_with_isub_hi_in_IntRegsLow8
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_and_V62Regs
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_with_isub_hi_in_ModRegs
  { 128, 1024, 1024, VTLists+17 },    // HvxQR
  { 1024, 1024, 1024, VTLists+39 },    // HvxVR
  { 1024, 1024, 1024, VTLists+39 },    // HvxVR_and_V65Regs
  { 2048, 2048, 2048, VTLists+45 },    // HvxWR
  { 2048, 2048, 2048, VTLists+45 },    // HvxWR_and_VectRegRev
  { 4096, 4096, 4096, VTLists+51 },    // HvxVQR
  // Mode = 2 (Hvx64)
  { 1, 1, 0, VTLists+0 },    // UsrBits
  { 32, 32, 32, VTLists+8 },    // SysRegs
  { 32, 32, 32, VTLists+8 },    // GuestRegs
  { 32, 32, 32, VTLists+22 },    // IntRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs
  { 32, 32, 32, VTLists+8 },    // GeneralSubRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs
  { 32, 32, 32, VTLists+8 },    // IntRegsLow8
  { 32, 32, 32, VTLists+8 },    // CtrRegs_and_V62Regs
  { 32, 32, 32, VTLists+2 },    // PredRegs
  { 32, 32, 32, VTLists+8 },    // V62Regs_with_isub_hi
  { 32, 32, 32, VTLists+8 },    // ModRegs
  { 32, 32, 32, VTLists+8 },    // CtrRegs_with_subreg_overflow
  { 32, 32, 32, VTLists+8 },    // V65Regs
  { 64, 64, 64, VTLists+10 },    // SysRegs64
  { 64, 64, 64, VTLists+27 },    // DoubleRegs
  { 64, 64, 64, VTLists+10 },    // GuestRegs64
  { 64, 64, 64, VTLists+10 },    // VectRegRev
  { 64, 64, 64, VTLists+10 },    // CtrRegs64
  { 64, 64, 64, VTLists+10 },    // GeneralDoubleLow8Regs
  { 64, 64, 64, VTLists+10 },    // DoubleRegs_with_isub_hi_in_IntRegsLow8
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_and_V62Regs
  { 64, 64, 64, VTLists+10 },    // CtrRegs64_with_isub_hi_in_ModRegs
  { 64, 512, 512, VTLists+12 },    // HvxQR
  { 512, 512, 512, VTLists+33 },    // HvxVR
  { 512, 512, 512, VTLists+33 },    // HvxVR_and_V65Regs
  { 1024, 1024, 1024, VTLists+39 },    // HvxWR
  { 1024, 1024, 1024, VTLists+39 },    // HvxWR_and_VectRegRev
  { 2048, 2048, 2048, VTLists+51 },    // HvxVQR
};

static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t UsrBitsSubClassMask[] = {
  0x00000001, 
  0x00001000, // subreg_overflow
};

static const uint32_t SysRegsSubClassMask[] = {
  0x00000002, 
  0x00004000, // isub_hi
  0x00004000, // isub_lo
};

static const uint32_t GuestRegsSubClassMask[] = {
  0x00000004, 
  0x00010000, // isub_hi
  0x00010000, // isub_lo
};

static const uint32_t IntRegsSubClassMask[] = {
  0x000000a8, 
  0x00188000, // isub_hi
  0x00188000, // isub_lo
};

static const uint32_t CtrRegsSubClassMask[] = {
  0x00001910, 
  0x00640400, // isub_hi
  0x00640400, // isub_lo
};

static const uint32_t GeneralSubRegsSubClassMask[] = {
  0x000000a0, 
  0x00180000, // isub_hi
  0x00180000, // isub_lo
};

static const uint32_t V62RegsSubClassMask[] = {
  0x00200540, 
  0x00200400, // isub_hi
  0x00200400, // isub_lo
};

static const uint32_t IntRegsLow8SubClassMask[] = {
  0x00000080, 
  0x00100000, // isub_hi
  0x00100000, // isub_lo
};

static const uint32_t CtrRegs_and_V62RegsSubClassMask[] = {
  0x00000100, 
  0x00200400, // isub_hi
  0x00200400, // isub_lo
};

static const uint32_t PredRegsSubClassMask[] = {
  0x00000200, 
};

static const uint32_t V62Regs_with_isub_hiSubClassMask[] = {
  0x00200400, 
};

static const uint32_t ModRegsSubClassMask[] = {
  0x00000800, 
  0x00400000, // isub_hi
  0x00400000, // isub_lo
};

static const uint32_t CtrRegs_with_subreg_overflowSubClassMask[] = {
  0x00001000, 
};

static const uint32_t V65RegsSubClassMask[] = {
  0x02002000, 
};

static const uint32_t SysRegs64SubClassMask[] = {
  0x00004000, 
};

static const uint32_t DoubleRegsSubClassMask[] = {
  0x00188000, 
};

static const uint32_t GuestRegs64SubClassMask[] = {
  0x00010000, 
};

static const uint32_t VectRegRevSubClassMask[] = {
  0x08020000, 
};

static const uint32_t CtrRegs64SubClassMask[] = {
  0x00640000, 
};

static const uint32_t GeneralDoubleLow8RegsSubClassMask[] = {
  0x00180000, 
};

static const uint32_t DoubleRegs_with_isub_hi_in_IntRegsLow8SubClassMask[] = {
  0x00100000, 
};

static const uint32_t CtrRegs64_and_V62RegsSubClassMask[] = {
  0x00200000, 
};

static const uint32_t CtrRegs64_with_isub_hi_in_ModRegsSubClassMask[] = {
  0x00400000, 
};

static const uint32_t HvxQRSubClassMask[] = {
  0x00800000, 
};

static const uint32_t HvxVRSubClassMask[] = {
  0x03000000, 
  0x1c020000, // vsub_hi
  0x1c020000, // vsub_lo
  0x10000000, // wsub_hi_then_vsub_hi
  0x10000000, // wsub_hi_then_vsub_lo
};

static const uint32_t HvxVR_and_V65RegsSubClassMask[] = {
  0x02000000, 
};

static const uint32_t HvxWRSubClassMask[] = {
  0x0c000000, 
  0x10000000, // wsub_hi
  0x10000000, // wsub_lo
};

static const uint32_t HvxWR_and_VectRegRevSubClassMask[] = {
  0x08000000, 
};

static const uint32_t HvxVQRSubClassMask[] = {
  0x10000000, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 0,
  /* 3 */ 3, 0,
  /* 5 */ 7, 8, 0,
  /* 8 */ 5, 6, 10, 11, 0,
};

static const TargetRegisterClass *const GeneralSubRegsSuperclasses[] = {
  &Hexagon::IntRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const IntRegsLow8Superclasses[] = {
  &Hexagon::IntRegsRegClass,
  &Hexagon::GeneralSubRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs_and_V62RegsSuperclasses[] = {
  &Hexagon::CtrRegsRegClass,
  &Hexagon::V62RegsRegClass,
  nullptr
};

static const TargetRegisterClass *const V62Regs_with_isub_hiSuperclasses[] = {
  &Hexagon::V62RegsRegClass,
  nullptr
};

static const TargetRegisterClass *const ModRegsSuperclasses[] = {
  &Hexagon::CtrRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs_with_subreg_overflowSuperclasses[] = {
  &Hexagon::CtrRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const GeneralDoubleLow8RegsSuperclasses[] = {
  &Hexagon::DoubleRegsRegClass,
  nullptr
};

static const TargetRegisterClass *const DoubleRegs_with_isub_hi_in_IntRegsLow8Superclasses[] = {
  &Hexagon::DoubleRegsRegClass,
  &Hexagon::GeneralDoubleLow8RegsRegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs64_and_V62RegsSuperclasses[] = {
  &Hexagon::V62RegsRegClass,
  &Hexagon::V62Regs_with_isub_hiRegClass,
  &Hexagon::CtrRegs64RegClass,
  nullptr
};

static const TargetRegisterClass *const CtrRegs64_with_isub_hi_in_ModRegsSuperclasses[] = {
  &Hexagon::CtrRegs64RegClass,
  nullptr
};

static const TargetRegisterClass *const HvxVR_and_V65RegsSuperclasses[] = {
  &Hexagon::V65RegsRegClass,
  &Hexagon::HvxVRRegClass,
  nullptr
};

static const TargetRegisterClass *const HvxWR_and_VectRegRevSuperclasses[] = {
  &Hexagon::VectRegRevRegClass,
  &Hexagon::HvxWRRegClass,
  nullptr
};


namespace Hexagon {   // Register class instances
  extern const TargetRegisterClass UsrBitsRegClass = {
    &HexagonMCRegisterClasses[UsrBitsRegClassID],
    UsrBitsSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass SysRegsRegClass = {
    &HexagonMCRegisterClasses[SysRegsRegClassID],
    SysRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GuestRegsRegClass = {
    &HexagonMCRegisterClasses[GuestRegsRegClassID],
    GuestRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass IntRegsRegClass = {
    &HexagonMCRegisterClasses[IntRegsRegClassID],
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegsRegClass = {
    &HexagonMCRegisterClasses[CtrRegsRegClassID],
    CtrRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000004),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GeneralSubRegsRegClass = {
    &HexagonMCRegisterClasses[GeneralSubRegsRegClassID],
    GeneralSubRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    GeneralSubRegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass V62RegsRegClass = {
    &HexagonMCRegisterClasses[V62RegsRegClassID],
    V62RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass IntRegsLow8RegClass = {
    &HexagonMCRegisterClasses[IntRegsLow8RegClassID],
    IntRegsLow8SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    IntRegsLow8Superclasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs_and_V62RegsRegClass = {
    &HexagonMCRegisterClasses[CtrRegs_and_V62RegsRegClassID],
    CtrRegs_and_V62RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    CtrRegs_and_V62RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass PredRegsRegClass = {
    &HexagonMCRegisterClasses[PredRegsRegClassID],
    PredRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass V62Regs_with_isub_hiRegClass = {
    &HexagonMCRegisterClasses[V62Regs_with_isub_hiRegClassID],
    V62Regs_with_isub_hiSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    V62Regs_with_isub_hiSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ModRegsRegClass = {
    &HexagonMCRegisterClasses[ModRegsRegClassID],
    ModRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    ModRegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs_with_subreg_overflowRegClass = {
    &HexagonMCRegisterClasses[CtrRegs_with_subreg_overflowRegClassID],
    CtrRegs_with_subreg_overflowSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000004),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    CtrRegs_with_subreg_overflowSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass V65RegsRegClass = {
    &HexagonMCRegisterClasses[V65RegsRegClassID],
    V65RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass SysRegs64RegClass = {
    &HexagonMCRegisterClasses[SysRegs64RegClassID],
    SysRegs64SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass DoubleRegsRegClass = {
    &HexagonMCRegisterClasses[DoubleRegsRegClassID],
    DoubleRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GuestRegs64RegClass = {
    &HexagonMCRegisterClasses[GuestRegs64RegClassID],
    GuestRegs64SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VectRegRevRegClass = {
    &HexagonMCRegisterClasses[VectRegRevRegClassID],
    VectRegRevSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000030),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs64RegClass = {
    &HexagonMCRegisterClasses[CtrRegs64RegClassID],
    CtrRegs64SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GeneralDoubleLow8RegsRegClass = {
    &HexagonMCRegisterClasses[GeneralDoubleLow8RegsRegClassID],
    GeneralDoubleLow8RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    GeneralDoubleLow8RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass DoubleRegs_with_isub_hi_in_IntRegsLow8RegClass = {
    &HexagonMCRegisterClasses[DoubleRegs_with_isub_hi_in_IntRegsLow8RegClassID],
    DoubleRegs_with_isub_hi_in_IntRegsLow8SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    DoubleRegs_with_isub_hi_in_IntRegsLow8Superclasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs64_and_V62RegsRegClass = {
    &HexagonMCRegisterClasses[CtrRegs64_and_V62RegsRegClassID],
    CtrRegs64_and_V62RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    CtrRegs64_and_V62RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CtrRegs64_with_isub_hi_in_ModRegsRegClass = {
    &HexagonMCRegisterClasses[CtrRegs64_with_isub_hi_in_ModRegsRegClassID],
    CtrRegs64_with_isub_hi_in_ModRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000003),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    CtrRegs64_with_isub_hi_in_ModRegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass HvxQRRegClass = {
    &HexagonMCRegisterClasses[HvxQRRegClassID],
    HvxQRSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass HvxVRRegClass = {
    &HexagonMCRegisterClasses[HvxVRRegClassID],
    HvxVRSubClassMask,
    SuperRegIdxSeqs + 8,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass HvxVR_and_V65RegsRegClass = {
    &HexagonMCRegisterClasses[HvxVR_and_V65RegsRegClassID],
    HvxVR_and_V65RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    HvxVR_and_V65RegsSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass HvxWRRegClass = {
    &HexagonMCRegisterClasses[HvxWRRegClassID],
    HvxWRSubClassMask,
    SuperRegIdxSeqs + 5,
    LaneBitmask(0x0000000000000030),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass HvxWR_and_VectRegRevRegClass = {
    &HexagonMCRegisterClasses[HvxWR_and_VectRegRevRegClassID],
    HvxWR_and_VectRegRevSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000030),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    HvxWR_and_VectRegRevSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass HvxVQRRegClass = {
    &HexagonMCRegisterClasses[HvxVQRRegClassID],
    HvxVQRSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001F8),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    true, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

} // end namespace Hexagon

namespace {
  const TargetRegisterClass *const RegisterClasses[] = {
    &Hexagon::UsrBitsRegClass,
    &Hexagon::SysRegsRegClass,
    &Hexagon::GuestRegsRegClass,
    &Hexagon::IntRegsRegClass,
    &Hexagon::CtrRegsRegClass,
    &Hexagon::GeneralSubRegsRegClass,
    &Hexagon::V62RegsRegClass,
    &Hexagon::IntRegsLow8RegClass,
    &Hexagon::CtrRegs_and_V62RegsRegClass,
    &Hexagon::PredRegsRegClass,
    &Hexagon::V62Regs_with_isub_hiRegClass,
    &Hexagon::ModRegsRegClass,
    &Hexagon::CtrRegs_with_subreg_overflowRegClass,
    &Hexagon::V65RegsRegClass,
    &Hexagon::SysRegs64RegClass,
    &Hexagon::DoubleRegsRegClass,
    &Hexagon::GuestRegs64RegClass,
    &Hexagon::VectRegRevRegClass,
    &Hexagon::CtrRegs64RegClass,
    &Hexagon::GeneralDoubleLow8RegsRegClass,
    &Hexagon::DoubleRegs_with_isub_hi_in_IntRegsLow8RegClass,
    &Hexagon::CtrRegs64_and_V62RegsRegClass,
    &Hexagon::CtrRegs64_with_isub_hi_in_ModRegsRegClass,
    &Hexagon::HvxQRRegClass,
    &Hexagon::HvxVRRegClass,
    &Hexagon::HvxVR_and_V65RegsRegClass,
    &Hexagon::HvxWRRegClass,
    &Hexagon::HvxWR_and_VectRegRevRegClass,
    &Hexagon::HvxVQRRegClass,
  };
} // end anonymous namespace

static const uint8_t CostPerUseTable[] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


static const bool InAllocatableClassTable[] = { 
false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, };


static const TargetRegisterInfoDesc HexagonRegInfoDesc = { // Extra Descriptors
CostPerUseTable, 1, InAllocatableClassTable};

unsigned HexagonGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[11] = {
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
  };
  static const uint8_t Rows[2][11] = {
    { 0, 0, 0, Hexagon::wsub_hi_then_vsub_fake, Hexagon::wsub_hi_then_vsub_hi, Hexagon::wsub_hi_then_vsub_lo, 0, 0, 0, 0, 0, },
    { 0, 0, 0, Hexagon::vsub_fake, Hexagon::vsub_hi, Hexagon::vsub_lo, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 11); (void) IdxA;
  --IdxB; assert(IdxB < 11);
  return Rows[RowMap[IdxA]][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 },   // Sequence 0
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  1 }, { LaneBitmask::getNone(), 0 },   // Sequence 2
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 4
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  3 }, { LaneBitmask::getNone(), 0 },   // Sequence 6
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  4 }, { LaneBitmask::getNone(), 0 },   // Sequence 8
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  5 }, { LaneBitmask::getNone(), 0 },   // Sequence 10
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  6 }, { LaneBitmask::getNone(), 0 },   // Sequence 12
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  7 }, { LaneBitmask::getNone(), 0 },   // Sequence 14
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  8 }, { LaneBitmask::getNone(), 0 }  // Sequence 16
  };
  static const uint8_t CompositeSequences[] = {
    0, // to isub_hi
    2, // to isub_lo
    4, // to subreg_overflow
    6, // to vsub_fake
    8, // to vsub_hi
    10, // to vsub_lo
    6, // to wsub_hi
    0, // to wsub_lo
    12, // to wsub_hi_then_vsub_fake
    14, // to wsub_hi_then_vsub_hi
    16 // to wsub_hi_then_vsub_lo
  };

LaneBitmask HexagonGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 11 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask HexagonGenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 11 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *HexagonGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[29][11] = {
    {	// UsrBits
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// SysRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// GuestRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// IntRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs
      0,	// isub_hi
      0,	// isub_lo
      13,	// subreg_overflow -> CtrRegs_with_subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// GeneralSubRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// V62Regs
      11,	// isub_hi -> V62Regs_with_isub_hi
      11,	// isub_lo -> V62Regs_with_isub_hi
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// IntRegsLow8
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs_and_V62Regs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// PredRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// V62Regs_with_isub_hi
      11,	// isub_hi -> V62Regs_with_isub_hi
      11,	// isub_lo -> V62Regs_with_isub_hi
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// ModRegs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs_with_subreg_overflow
      0,	// isub_hi
      0,	// isub_lo
      13,	// subreg_overflow -> CtrRegs_with_subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// V65Regs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// SysRegs64
      15,	// isub_hi -> SysRegs64
      15,	// isub_lo -> SysRegs64
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// DoubleRegs
      16,	// isub_hi -> DoubleRegs
      16,	// isub_lo -> DoubleRegs
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// GuestRegs64
      17,	// isub_hi -> GuestRegs64
      17,	// isub_lo -> GuestRegs64
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// VectRegRev
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      18,	// vsub_hi -> VectRegRev
      18,	// vsub_lo -> VectRegRev
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs64
      19,	// isub_hi -> CtrRegs64
      19,	// isub_lo -> CtrRegs64
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// GeneralDoubleLow8Regs
      20,	// isub_hi -> GeneralDoubleLow8Regs
      20,	// isub_lo -> GeneralDoubleLow8Regs
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// DoubleRegs_with_isub_hi_in_IntRegsLow8
      21,	// isub_hi -> DoubleRegs_with_isub_hi_in_IntRegsLow8
      21,	// isub_lo -> DoubleRegs_with_isub_hi_in_IntRegsLow8
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs64_and_V62Regs
      22,	// isub_hi -> CtrRegs64_and_V62Regs
      22,	// isub_lo -> CtrRegs64_and_V62Regs
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// CtrRegs64_with_isub_hi_in_ModRegs
      23,	// isub_hi -> CtrRegs64_with_isub_hi_in_ModRegs
      23,	// isub_lo -> CtrRegs64_with_isub_hi_in_ModRegs
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxQR
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxVR
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxVR_and_V65Regs
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      0,	// vsub_hi
      0,	// vsub_lo
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxWR
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      27,	// vsub_hi -> HvxWR
      27,	// vsub_lo -> HvxWR
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxWR_and_VectRegRev
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      28,	// vsub_hi -> HvxWR_and_VectRegRev
      28,	// vsub_lo -> HvxWR_and_VectRegRev
      0,	// wsub_hi
      0,	// wsub_lo
      0,	// wsub_hi_then_vsub_fake
      0,	// wsub_hi_then_vsub_hi
      0,	// wsub_hi_then_vsub_lo
    },
    {	// HvxVQR
      0,	// isub_hi
      0,	// isub_lo
      0,	// subreg_overflow
      0,	// vsub_fake
      29,	// vsub_hi -> HvxVQR
      29,	// vsub_lo -> HvxVQR
      29,	// wsub_hi -> HvxVQR
      29,	// wsub_lo -> HvxVQR
      0,	// wsub_hi_then_vsub_fake
      29,	// wsub_hi_then_vsub_hi -> HvxVQR
      29,	// wsub_hi_then_vsub_lo -> HvxVQR
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 11 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &HexagonGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {0, 0},  	// UsrBits
    {0, 0},  	// SysRegs
    {0, 0},  	// GuestRegs
    {1, 32},  	// IntRegs
    {0, 6},  	// CtrRegs
    {1, 16},  	// GeneralSubRegs
    {0, 0},  	// V62Regs
    {1, 8},  	// IntRegsLow8
    {0, 0},  	// CtrRegs_and_V62Regs
    {1, 4},  	// PredRegs
    {0, 0},  	// V62Regs_with_isub_hi
    {1, 2},  	// ModRegs
    {0, 0},  	// CtrRegs_with_subreg_overflow
    {1, 1},  	// V65Regs
    {0, 0},  	// SysRegs64
    {2, 32},  	// DoubleRegs
    {0, 0},  	// GuestRegs64
    {2, 32},  	// VectRegRev
    {0, 6},  	// CtrRegs64
    {2, 16},  	// GeneralDoubleLow8Regs
    {2, 8},  	// DoubleRegs_with_isub_hi_in_IntRegsLow8
    {0, 0},  	// CtrRegs64_and_V62Regs
    {2, 2},  	// CtrRegs64_with_isub_hi_in_ModRegs
    {1, 4},  	// HvxQR
    {1, 33},  	// HvxVR
    {1, 1},  	// HvxVR_and_V65Regs
    {2, 32},  	// HvxWR
    {2, 32},  	// HvxWR_and_VectRegRev
    {4, 32},  	// HvxVQR
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned HexagonGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 272 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned HexagonGenRegisterInfo::getNumRegPressureSets() const {
  return 8;
}

// Get the name of this register unit pressure set.
const char *HexagonGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "HvxVR_and_V65Regs",
    "ModRegs",
    "PredRegs",
    "HvxQR",
    "IntRegsLow8",
    "GeneralSubRegs",
    "IntRegs",
    "HvxVR",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned HexagonGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    1,  	// 0: HvxVR_and_V65Regs
    2,  	// 1: ModRegs
    4,  	// 2: PredRegs
    4,  	// 3: HvxQR
    8,  	// 4: IntRegsLow8
    16,  	// 5: GeneralSubRegs
    32,  	// 6: IntRegs
    33,  	// 7: HvxVR
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 1, -1,
  /* 2 */ 2, -1,
  /* 4 */ 3, -1,
  /* 6 */ 4, 5, 6, -1,
  /* 10 */ 0, 7, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int *HexagonGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    1,1,1,8,1,7,1,6,1,2,1,0,1,1,1,8,1,11,1,7,6,1,1,4,11,10,11,11,11,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int *HexagonGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 272 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc HexagonRegDesc[];
extern const MCPhysReg HexagonRegDiffLists[];
extern const LaneBitmask HexagonLaneMaskLists[];
extern const char HexagonRegStrings[];
extern const char HexagonRegClassStrings[];
extern const MCPhysReg HexagonRegUnitRoots[][2];
extern const uint16_t HexagonSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits HexagonSubRegIdxRanges[];
extern const uint16_t HexagonRegEncodingTable[];
// Hexagon Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0Dwarf2L[];
extern const unsigned HexagonDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0Dwarf2L[];
extern const unsigned HexagonEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonDwarfFlavour0L2Dwarf[];
extern const unsigned HexagonDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair HexagonEHFlavour0L2Dwarf[];
extern const unsigned HexagonEHFlavour0L2DwarfSize;

HexagonGenRegisterInfo::
HexagonGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour,
      unsigned PC, unsigned HwMode)
  : TargetRegisterInfo(&HexagonRegInfoDesc, RegisterClasses, RegisterClasses+29,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable,
             LaneBitmask(0xFFFFFFFFFFFFFFFB), RegClassInfos, HwMode) {
  InitMCRegisterInfo(HexagonRegDesc, 398, RA, PC,
                     HexagonMCRegisterClasses, 29,
                     HexagonRegUnitRoots,
                     272,
                     HexagonRegDiffLists,
                     HexagonLaneMaskLists,
                     HexagonRegStrings,
                     HexagonRegClassStrings,
                     HexagonSubRegIdxLists,
                     12,
                     HexagonSubRegIdxRanges,
                     HexagonRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonDwarfFlavour0Dwarf2L, HexagonDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(HexagonEHFlavour0Dwarf2L, HexagonEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonDwarfFlavour0L2Dwarf, HexagonDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(HexagonEHFlavour0L2Dwarf, HexagonEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg HexagonCSR_SaveList[] = { Hexagon::R16, Hexagon::R17, Hexagon::R18, Hexagon::R19, Hexagon::R20, Hexagon::R21, Hexagon::R22, Hexagon::R23, Hexagon::R24, Hexagon::R25, Hexagon::R26, Hexagon::R27, 0 };
static const uint32_t HexagonCSR_RegMask[] = { 0x00000000, 0x00000000, 0x0000007e, 0x00000000, 0x0003ffc0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };


ArrayRef<const uint32_t *> HexagonGenRegisterInfo::getRegMasks() const {
  static const uint32_t *const Masks[] = {
    HexagonCSR_RegMask,
  };
  return makeArrayRef(Masks);
}

bool HexagonGenRegisterInfo::
isGeneralPurposeRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool HexagonGenRegisterInfo::
isFixedRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool HexagonGenRegisterInfo::
isArgumentRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

ArrayRef<const char *> HexagonGenRegisterInfo::getRegMaskNames() const {
  static const char *Names[] = {
    "HexagonCSR",
  };
  return makeArrayRef(Names);
}

const HexagonFrameLowering *
HexagonGenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const HexagonFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

