/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register Enum Values                                                *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM

namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass PPCMCRegisterClasses[];

namespace PPC {
enum {
  NoRegister,
  BP = 1,
  CARRY = 2,
  CTR = 3,
  FP = 4,
  LR = 5,
  RM = 6,
  SPEFSCR = 7,
  VRSAVE = 8,
  XER = 9,
  ZERO = 10,
  ACC0 = 11,
  ACC1 = 12,
  ACC2 = 13,
  ACC3 = 14,
  ACC4 = 15,
  ACC5 = 16,
  ACC6 = 17,
  ACC7 = 18,
  BP8 = 19,
  CR0 = 20,
  CR1 = 21,
  CR2 = 22,
  CR3 = 23,
  CR4 = 24,
  CR5 = 25,
  CR6 = 26,
  CR7 = 27,
  CTR8 = 28,
  F0 = 29,
  F1 = 30,
  F2 = 31,
  F3 = 32,
  F4 = 33,
  F5 = 34,
  F6 = 35,
  F7 = 36,
  F8 = 37,
  F9 = 38,
  F10 = 39,
  F11 = 40,
  F12 = 41,
  F13 = 42,
  F14 = 43,
  F15 = 44,
  F16 = 45,
  F17 = 46,
  F18 = 47,
  F19 = 48,
  F20 = 49,
  F21 = 50,
  F22 = 51,
  F23 = 52,
  F24 = 53,
  F25 = 54,
  F26 = 55,
  F27 = 56,
  F28 = 57,
  F29 = 58,
  F30 = 59,
  F31 = 60,
  FP8 = 61,
  LR8 = 62,
  R0 = 63,
  R1 = 64,
  R2 = 65,
  R3 = 66,
  R4 = 67,
  R5 = 68,
  R6 = 69,
  R7 = 70,
  R8 = 71,
  R9 = 72,
  R10 = 73,
  R11 = 74,
  R12 = 75,
  R13 = 76,
  R14 = 77,
  R15 = 78,
  R16 = 79,
  R17 = 80,
  R18 = 81,
  R19 = 82,
  R20 = 83,
  R21 = 84,
  R22 = 85,
  R23 = 86,
  R24 = 87,
  R25 = 88,
  R26 = 89,
  R27 = 90,
  R28 = 91,
  R29 = 92,
  R30 = 93,
  R31 = 94,
  S0 = 95,
  S1 = 96,
  S2 = 97,
  S3 = 98,
  S4 = 99,
  S5 = 100,
  S6 = 101,
  S7 = 102,
  S8 = 103,
  S9 = 104,
  S10 = 105,
  S11 = 106,
  S12 = 107,
  S13 = 108,
  S14 = 109,
  S15 = 110,
  S16 = 111,
  S17 = 112,
  S18 = 113,
  S19 = 114,
  S20 = 115,
  S21 = 116,
  S22 = 117,
  S23 = 118,
  S24 = 119,
  S25 = 120,
  S26 = 121,
  S27 = 122,
  S28 = 123,
  S29 = 124,
  S30 = 125,
  S31 = 126,
  UACC0 = 127,
  UACC1 = 128,
  UACC2 = 129,
  UACC3 = 130,
  UACC4 = 131,
  UACC5 = 132,
  UACC6 = 133,
  UACC7 = 134,
  V0 = 135,
  V1 = 136,
  V2 = 137,
  V3 = 138,
  V4 = 139,
  V5 = 140,
  V6 = 141,
  V7 = 142,
  V8 = 143,
  V9 = 144,
  V10 = 145,
  V11 = 146,
  V12 = 147,
  V13 = 148,
  V14 = 149,
  V15 = 150,
  V16 = 151,
  V17 = 152,
  V18 = 153,
  V19 = 154,
  V20 = 155,
  V21 = 156,
  V22 = 157,
  V23 = 158,
  V24 = 159,
  V25 = 160,
  V26 = 161,
  V27 = 162,
  V28 = 163,
  V29 = 164,
  V30 = 165,
  V31 = 166,
  VF0 = 167,
  VF1 = 168,
  VF2 = 169,
  VF3 = 170,
  VF4 = 171,
  VF5 = 172,
  VF6 = 173,
  VF7 = 174,
  VF8 = 175,
  VF9 = 176,
  VF10 = 177,
  VF11 = 178,
  VF12 = 179,
  VF13 = 180,
  VF14 = 181,
  VF15 = 182,
  VF16 = 183,
  VF17 = 184,
  VF18 = 185,
  VF19 = 186,
  VF20 = 187,
  VF21 = 188,
  VF22 = 189,
  VF23 = 190,
  VF24 = 191,
  VF25 = 192,
  VF26 = 193,
  VF27 = 194,
  VF28 = 195,
  VF29 = 196,
  VF30 = 197,
  VF31 = 198,
  VSL0 = 199,
  VSL1 = 200,
  VSL2 = 201,
  VSL3 = 202,
  VSL4 = 203,
  VSL5 = 204,
  VSL6 = 205,
  VSL7 = 206,
  VSL8 = 207,
  VSL9 = 208,
  VSL10 = 209,
  VSL11 = 210,
  VSL12 = 211,
  VSL13 = 212,
  VSL14 = 213,
  VSL15 = 214,
  VSL16 = 215,
  VSL17 = 216,
  VSL18 = 217,
  VSL19 = 218,
  VSL20 = 219,
  VSL21 = 220,
  VSL22 = 221,
  VSL23 = 222,
  VSL24 = 223,
  VSL25 = 224,
  VSL26 = 225,
  VSL27 = 226,
  VSL28 = 227,
  VSL29 = 228,
  VSL30 = 229,
  VSL31 = 230,
  VSRp0 = 231,
  VSRp1 = 232,
  VSRp2 = 233,
  VSRp3 = 234,
  VSRp4 = 235,
  VSRp5 = 236,
  VSRp6 = 237,
  VSRp7 = 238,
  VSRp8 = 239,
  VSRp9 = 240,
  VSRp10 = 241,
  VSRp11 = 242,
  VSRp12 = 243,
  VSRp13 = 244,
  VSRp14 = 245,
  VSRp15 = 246,
  VSRp16 = 247,
  VSRp17 = 248,
  VSRp18 = 249,
  VSRp19 = 250,
  VSRp20 = 251,
  VSRp21 = 252,
  VSRp22 = 253,
  VSRp23 = 254,
  VSRp24 = 255,
  VSRp25 = 256,
  VSRp26 = 257,
  VSRp27 = 258,
  VSRp28 = 259,
  VSRp29 = 260,
  VSRp30 = 261,
  VSRp31 = 262,
  VSX32 = 263,
  VSX33 = 264,
  VSX34 = 265,
  VSX35 = 266,
  VSX36 = 267,
  VSX37 = 268,
  VSX38 = 269,
  VSX39 = 270,
  VSX40 = 271,
  VSX41 = 272,
  VSX42 = 273,
  VSX43 = 274,
  VSX44 = 275,
  VSX45 = 276,
  VSX46 = 277,
  VSX47 = 278,
  VSX48 = 279,
  VSX49 = 280,
  VSX50 = 281,
  VSX51 = 282,
  VSX52 = 283,
  VSX53 = 284,
  VSX54 = 285,
  VSX55 = 286,
  VSX56 = 287,
  VSX57 = 288,
  VSX58 = 289,
  VSX59 = 290,
  VSX60 = 291,
  VSX61 = 292,
  VSX62 = 293,
  VSX63 = 294,
  X0 = 295,
  X1 = 296,
  X2 = 297,
  X3 = 298,
  X4 = 299,
  X5 = 300,
  X6 = 301,
  X7 = 302,
  X8 = 303,
  X9 = 304,
  X10 = 305,
  X11 = 306,
  X12 = 307,
  X13 = 308,
  X14 = 309,
  X15 = 310,
  X16 = 311,
  X17 = 312,
  X18 = 313,
  X19 = 314,
  X20 = 315,
  X21 = 316,
  X22 = 317,
  X23 = 318,
  X24 = 319,
  X25 = 320,
  X26 = 321,
  X27 = 322,
  X28 = 323,
  X29 = 324,
  X30 = 325,
  X31 = 326,
  ZERO8 = 327,
  CR0EQ = 328,
  CR1EQ = 329,
  CR2EQ = 330,
  CR3EQ = 331,
  CR4EQ = 332,
  CR5EQ = 333,
  CR6EQ = 334,
  CR7EQ = 335,
  CR0GT = 336,
  CR1GT = 337,
  CR2GT = 338,
  CR3GT = 339,
  CR4GT = 340,
  CR5GT = 341,
  CR6GT = 342,
  CR7GT = 343,
  CR0LT = 344,
  CR1LT = 345,
  CR2LT = 346,
  CR3LT = 347,
  CR4LT = 348,
  CR5LT = 349,
  CR6LT = 350,
  CR7LT = 351,
  CR0UN = 352,
  CR1UN = 353,
  CR2UN = 354,
  CR3UN = 355,
  CR4UN = 356,
  CR5UN = 357,
  CR6UN = 358,
  CR7UN = 359,
  G8p0 = 360,
  G8p1 = 361,
  G8p2 = 362,
  G8p3 = 363,
  G8p4 = 364,
  G8p5 = 365,
  G8p6 = 366,
  G8p7 = 367,
  G8p8 = 368,
  G8p9 = 369,
  G8p10 = 370,
  G8p11 = 371,
  G8p12 = 372,
  G8p13 = 373,
  G8p14 = 374,
  G8p15 = 375,
  NUM_TARGET_REGS // 376
};
} // end namespace PPC

// Register classes

namespace PPC {
enum {
  VSSRCRegClassID = 0,
  GPRCRegClassID = 1,
  GPRC_NOR0RegClassID = 2,
  GPRC_and_GPRC_NOR0RegClassID = 3,
  CRBITRCRegClassID = 4,
  F4RCRegClassID = 5,
  CRRCRegClassID = 6,
  CARRYRCRegClassID = 7,
  CTRRCRegClassID = 8,
  LRRCRegClassID = 9,
  VRSAVERCRegClassID = 10,
  SPILLTOVSRRCRegClassID = 11,
  VSFRCRegClassID = 12,
  G8RCRegClassID = 13,
  G8RC_NOX0RegClassID = 14,
  SPILLTOVSRRC_and_VSFRCRegClassID = 15,
  G8RC_and_G8RC_NOX0RegClassID = 16,
  F8RCRegClassID = 17,
  SPERCRegClassID = 18,
  VFRCRegClassID = 19,
  SPERC_with_sub_32_in_GPRC_NOR0RegClassID = 20,
  SPILLTOVSRRC_and_VFRCRegClassID = 21,
  SPILLTOVSRRC_and_F4RCRegClassID = 22,
  CTRRC8RegClassID = 23,
  LR8RCRegClassID = 24,
  VSRCRegClassID = 25,
  VSRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 26,
  VRRCRegClassID = 27,
  VSLRCRegClassID = 28,
  VRRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 29,
  G8pRCRegClassID = 30,
  G8pRC_with_sub_32_in_GPRC_NOR0RegClassID = 31,
  VSLRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 32,
  VSRpRCRegClassID = 33,
  VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 34,
  VSRpRC_with_sub_64_in_F4RCRegClassID = 35,
  VSRpRC_with_sub_64_in_VFRCRegClassID = 36,
  VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClassID = 37,
  VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClassID = 38,
  ACCRCRegClassID = 39,
  UACCRCRegClassID = 40,
  ACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 41,
  UACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID = 42,
  ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID = 43,
  UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID = 44,

};
} // end namespace PPC


// Subregister indices

namespace PPC {
enum : uint16_t {
  NoSubRegister,
  sub_32,	// 1
  sub_64,	// 2
  sub_eq,	// 3
  sub_gp8_x0,	// 4
  sub_gp8_x1,	// 5
  sub_gt,	// 6
  sub_lt,	// 7
  sub_pair0,	// 8
  sub_pair1,	// 9
  sub_un,	// 10
  sub_vsx0,	// 11
  sub_vsx1,	// 12
  sub_vsx1_then_sub_64,	// 13
  sub_pair1_then_sub_64,	// 14
  sub_pair1_then_sub_vsx0,	// 15
  sub_pair1_then_sub_vsx1,	// 16
  sub_pair1_then_sub_vsx1_then_sub_64,	// 17
  sub_gp8_x1_then_sub_32,	// 18
  NUM_TARGET_SUBREGS
};
} // end namespace PPC

// Register pressure sets enum.
namespace PPC {
enum RegisterPressureSets {
  CARRYRC = 0,
  VRSAVERC = 1,
  SPILLTOVSRRC_and_F4RC = 2,
  SPILLTOVSRRC_and_VFRC = 3,
  CRBITRC = 4,
  F4RC = 5,
  VFRC = 6,
  GPRC = 7,
  SPILLTOVSRRC_and_VSFRC = 8,
  SPILLTOVSRRC_and_VSFRC_with_VFRC = 9,
  F4RC_with_SPILLTOVSRRC_and_VSFRC = 10,
  VSSRC = 11,
  SPILLTOVSRRC = 12,
  SPILLTOVSRRC_with_SPILLTOVSRRC_and_F4RC = 13,
  SPILLTOVSRRC_with_VFRC = 14,
  F4RC_with_SPILLTOVSRRC = 15,
  VSSRC_with_SPILLTOVSRRC = 16,
};
} // end namespace PPC

} // end namespace llvm

#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* MC Register Information                                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC

namespace llvm {

extern const MCPhysReg PPCRegDiffLists[] = {
  /* 0 */ 0, 0,
  /* 2 */ 65037, 1, 1, 1, 0,
  /* 7 */ 65497, 1, 1, 1, 0,
  /* 12 */ 65501, 1, 1, 1, 0,
  /* 17 */ 64891, 1, 0,
  /* 20 */ 65083, 1, 0,
  /* 23 */ 65149, 1, 0,
  /* 26 */ 3, 0,
  /* 28 */ 8, 0,
  /* 30 */ 12, 0,
  /* 32 */ 18, 0,
  /* 34 */ 324, 65528, 65528, 24, 0,
  /* 39 */ 65424, 32, 65505, 32, 0,
  /* 44 */ 65425, 32, 65505, 32, 0,
  /* 49 */ 65426, 32, 65505, 32, 0,
  /* 54 */ 65427, 32, 65505, 32, 0,
  /* 59 */ 65428, 32, 65505, 32, 0,
  /* 64 */ 65429, 32, 65505, 32, 0,
  /* 69 */ 65430, 32, 65505, 32, 0,
  /* 74 */ 65431, 32, 65505, 32, 0,
  /* 79 */ 65432, 32, 65505, 32, 0,
  /* 84 */ 65433, 32, 65505, 32, 0,
  /* 89 */ 65434, 32, 65505, 32, 0,
  /* 94 */ 65435, 32, 65505, 32, 0,
  /* 99 */ 65436, 32, 65505, 32, 0,
  /* 104 */ 65437, 32, 65505, 32, 0,
  /* 109 */ 65438, 32, 65505, 32, 0,
  /* 114 */ 65439, 32, 65505, 32, 0,
  /* 119 */ 32, 200, 49, 0,
  /* 123 */ 32, 200, 50, 0,
  /* 127 */ 32, 200, 51, 0,
  /* 131 */ 32, 200, 52, 0,
  /* 135 */ 32, 200, 53, 0,
  /* 139 */ 32, 200, 54, 0,
  /* 143 */ 32, 200, 55, 0,
  /* 147 */ 32, 200, 56, 0,
  /* 151 */ 32, 200, 57, 0,
  /* 155 */ 32, 200, 58, 0,
  /* 159 */ 32, 200, 59, 0,
  /* 163 */ 32, 200, 60, 0,
  /* 167 */ 32, 200, 61, 0,
  /* 171 */ 32, 200, 62, 0,
  /* 175 */ 32, 200, 63, 0,
  /* 179 */ 32, 200, 64, 0,
  /* 183 */ 32, 200, 65, 0,
  /* 187 */ 73, 0,
  /* 189 */ 65504, 96, 0,
  /* 192 */ 65504, 97, 0,
  /* 195 */ 65504, 98, 0,
  /* 198 */ 65504, 99, 0,
  /* 201 */ 65504, 100, 0,
  /* 204 */ 65504, 101, 0,
  /* 207 */ 65504, 102, 0,
  /* 210 */ 65504, 103, 0,
  /* 213 */ 65504, 104, 0,
  /* 216 */ 65504, 105, 0,
  /* 219 */ 65504, 106, 0,
  /* 222 */ 65504, 107, 0,
  /* 225 */ 65504, 108, 0,
  /* 228 */ 65504, 109, 0,
  /* 231 */ 65504, 110, 0,
  /* 234 */ 65504, 111, 0,
  /* 237 */ 65504, 112, 0,
  /* 240 */ 170, 16, 65308, 116, 0,
  /* 245 */ 170, 17, 65308, 116, 0,
  /* 250 */ 170, 17, 65309, 116, 0,
  /* 255 */ 170, 18, 65309, 116, 0,
  /* 260 */ 170, 19, 65309, 116, 0,
  /* 265 */ 170, 19, 65310, 116, 0,
  /* 270 */ 170, 20, 65310, 116, 0,
  /* 275 */ 170, 21, 65310, 116, 0,
  /* 280 */ 170, 21, 65311, 116, 0,
  /* 285 */ 170, 22, 65311, 116, 0,
  /* 290 */ 170, 23, 65311, 116, 0,
  /* 295 */ 170, 23, 65312, 116, 0,
  /* 300 */ 170, 24, 65312, 116, 0,
  /* 305 */ 170, 25, 65312, 116, 0,
  /* 310 */ 170, 25, 65313, 116, 0,
  /* 315 */ 170, 26, 65313, 116, 0,
  /* 320 */ 170, 27, 65313, 116, 0,
  /* 325 */ 170, 27, 65314, 116, 0,
  /* 330 */ 170, 28, 65314, 116, 0,
  /* 335 */ 170, 29, 65314, 116, 0,
  /* 340 */ 170, 29, 65315, 116, 0,
  /* 345 */ 170, 30, 65315, 116, 0,
  /* 350 */ 170, 31, 65315, 116, 0,
  /* 355 */ 170, 31, 65316, 116, 0,
  /* 360 */ 170, 32, 65316, 116, 0,
  /* 365 */ 317, 0,
  /* 367 */ 64172, 0,
  /* 369 */ 64201, 0,
  /* 371 */ 64234, 0,
  /* 373 */ 64267, 0,
  /* 375 */ 65204, 0,
  /* 377 */ 65212, 0,
  /* 379 */ 65219, 0,
  /* 381 */ 65220, 0,
  /* 383 */ 65228, 0,
  /* 385 */ 65471, 65304, 233, 65304, 0,
  /* 390 */ 65472, 65304, 233, 65304, 0,
  /* 395 */ 65473, 65304, 233, 65304, 0,
  /* 400 */ 65474, 65304, 233, 65304, 0,
  /* 405 */ 65475, 65304, 233, 65304, 0,
  /* 410 */ 65476, 65304, 233, 65304, 0,
  /* 415 */ 65477, 65304, 233, 65304, 0,
  /* 420 */ 65478, 65304, 233, 65304, 0,
  /* 425 */ 65479, 65304, 233, 65304, 0,
  /* 430 */ 65480, 65304, 233, 65304, 0,
  /* 435 */ 65481, 65304, 233, 65304, 0,
  /* 440 */ 65482, 65304, 233, 65304, 0,
  /* 445 */ 65483, 65304, 233, 65304, 0,
  /* 450 */ 65484, 65304, 233, 65304, 0,
  /* 455 */ 65485, 65304, 233, 65304, 0,
  /* 460 */ 65486, 65304, 233, 65304, 0,
  /* 465 */ 65316, 0,
  /* 467 */ 65346, 0,
  /* 469 */ 65504, 65366, 171, 65366, 0,
  /* 474 */ 104, 65504, 65366, 171, 65366, 202, 65505, 65366, 171, 65366, 0,
  /* 485 */ 220, 65504, 65366, 171, 65366, 202, 65505, 65366, 171, 65366, 0,
  /* 496 */ 65506, 65366, 171, 65366, 0,
  /* 501 */ 105, 65506, 65366, 171, 65366, 200, 65507, 65366, 171, 65366, 0,
  /* 512 */ 221, 65506, 65366, 171, 65366, 200, 65507, 65366, 171, 65366, 0,
  /* 523 */ 65508, 65366, 171, 65366, 0,
  /* 528 */ 106, 65508, 65366, 171, 65366, 198, 65509, 65366, 171, 65366, 0,
  /* 539 */ 222, 65508, 65366, 171, 65366, 198, 65509, 65366, 171, 65366, 0,
  /* 550 */ 65510, 65366, 171, 65366, 0,
  /* 555 */ 107, 65510, 65366, 171, 65366, 196, 65511, 65366, 171, 65366, 0,
  /* 566 */ 223, 65510, 65366, 171, 65366, 196, 65511, 65366, 171, 65366, 0,
  /* 577 */ 65512, 65366, 171, 65366, 0,
  /* 582 */ 108, 65512, 65366, 171, 65366, 194, 65513, 65366, 171, 65366, 0,
  /* 593 */ 224, 65512, 65366, 171, 65366, 194, 65513, 65366, 171, 65366, 0,
  /* 604 */ 65514, 65366, 171, 65366, 0,
  /* 609 */ 109, 65514, 65366, 171, 65366, 192, 65515, 65366, 171, 65366, 0,
  /* 620 */ 225, 65514, 65366, 171, 65366, 192, 65515, 65366, 171, 65366, 0,
  /* 631 */ 65516, 65366, 171, 65366, 0,
  /* 636 */ 110, 65516, 65366, 171, 65366, 190, 65517, 65366, 171, 65366, 0,
  /* 647 */ 226, 65516, 65366, 171, 65366, 190, 65517, 65366, 171, 65366, 0,
  /* 658 */ 65518, 65366, 171, 65366, 0,
  /* 663 */ 111, 65518, 65366, 171, 65366, 188, 65519, 65366, 171, 65366, 0,
  /* 674 */ 227, 65518, 65366, 171, 65366, 188, 65519, 65366, 171, 65366, 0,
  /* 685 */ 65412, 0,
  /* 687 */ 65474, 0,
  /* 689 */ 65476, 0,
  /* 691 */ 65479, 0,
  /* 693 */ 65504, 0,
  /* 695 */ 65508, 0,
  /* 697 */ 65516, 0,
  /* 699 */ 65518, 0,
  /* 701 */ 65535, 0,
};

extern const LaneBitmask PPCLaneMaskLists[] = {
  /* 0 */ LaneBitmask(0x0000000000000000), LaneBitmask::getAll(),
  /* 2 */ LaneBitmask(0x0000000000000001), LaneBitmask::getAll(),
  /* 4 */ LaneBitmask(0x0000000000000002), LaneBitmask::getAll(),
  /* 6 */ LaneBitmask(0x0000000000000010), LaneBitmask(0x0000000000000008), LaneBitmask(0x0000000000000004), LaneBitmask(0x0000000000000020), LaneBitmask::getAll(),
  /* 11 */ LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000040), LaneBitmask::getAll(),
  /* 14 */ LaneBitmask(0x0000000000000002), LaneBitmask(0x0000000000000040), LaneBitmask(0x0000000000000080), LaneBitmask(0x0000000000000100), LaneBitmask::getAll(),
  /* 19 */ LaneBitmask(0x0000000000000001), LaneBitmask(0x0000000000000200), LaneBitmask::getAll(),
};

extern const uint16_t PPCSubRegIdxLists[] = {
  /* 0 */ 1, 0,
  /* 2 */ 2, 0,
  /* 4 */ 7, 6, 3, 10, 0,
  /* 9 */ 11, 2, 12, 13, 0,
  /* 14 */ 8, 11, 2, 12, 13, 9, 15, 14, 16, 17, 0,
  /* 25 */ 4, 1, 5, 18, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits PPCSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_32
  { 0, 64 },	// sub_64
  { 2, 1 },	// sub_eq
  { 0, 64 },	// sub_gp8_x0
  { 64, 64 },	// sub_gp8_x1
  { 1, 1 },	// sub_gt
  { 0, 1 },	// sub_lt
  { 0, 256 },	// sub_pair0
  { 256, 256 },	// sub_pair1
  { 3, 1 },	// sub_un
  { 0, 128 },	// sub_vsx0
  { 128, 128 },	// sub_vsx1
  { 128, 64 },	// sub_vsx1_then_sub_64
  { 256, 64 },	// sub_pair1_then_sub_64
  { 256, 128 },	// sub_pair1_then_sub_vsx0
  { 384, 128 },	// sub_pair1_then_sub_vsx1
  { 384, 64 },	// sub_pair1_then_sub_vsx1_then_sub_64
  { 64, 32 },	// sub_gp8_x1_then_sub_32
};

extern const char PPCRegStrings[] = {
  /* 0 */ 'V', 'F', '1', '0', 0,
  /* 5 */ 'V', 'S', 'L', '1', '0', 0,
  /* 11 */ 'R', '1', '0', 0,
  /* 15 */ 'S', '1', '0', 0,
  /* 19 */ 'V', '1', '0', 0,
  /* 23 */ 'X', '1', '0', 0,
  /* 27 */ 'G', '8', 'p', '1', '0', 0,
  /* 33 */ 'V', 'S', 'R', 'p', '1', '0', 0,
  /* 40 */ 'V', 'F', '2', '0', 0,
  /* 45 */ 'V', 'S', 'L', '2', '0', 0,
  /* 51 */ 'R', '2', '0', 0,
  /* 55 */ 'S', '2', '0', 0,
  /* 59 */ 'V', '2', '0', 0,
  /* 63 */ 'X', '2', '0', 0,
  /* 67 */ 'V', 'S', 'R', 'p', '2', '0', 0,
  /* 74 */ 'V', 'F', '3', '0', 0,
  /* 79 */ 'V', 'S', 'L', '3', '0', 0,
  /* 85 */ 'R', '3', '0', 0,
  /* 89 */ 'S', '3', '0', 0,
  /* 93 */ 'V', '3', '0', 0,
  /* 97 */ 'X', '3', '0', 0,
  /* 101 */ 'V', 'S', 'R', 'p', '3', '0', 0,
  /* 108 */ 'V', 'S', 'X', '4', '0', 0,
  /* 114 */ 'V', 'S', 'X', '5', '0', 0,
  /* 120 */ 'V', 'S', 'X', '6', '0', 0,
  /* 126 */ 'U', 'A', 'C', 'C', '0', 0,
  /* 132 */ 'V', 'F', '0', 0,
  /* 136 */ 'V', 'S', 'L', '0', 0,
  /* 141 */ 'C', 'R', '0', 0,
  /* 145 */ 'S', '0', 0,
  /* 148 */ 'V', '0', 0,
  /* 151 */ 'X', '0', 0,
  /* 154 */ 'G', '8', 'p', '0', 0,
  /* 159 */ 'V', 'S', 'R', 'p', '0', 0,
  /* 165 */ 'V', 'F', '1', '1', 0,
  /* 170 */ 'V', 'S', 'L', '1', '1', 0,
  /* 176 */ 'R', '1', '1', 0,
  /* 180 */ 'S', '1', '1', 0,
  /* 184 */ 'V', '1', '1', 0,
  /* 188 */ 'X', '1', '1', 0,
  /* 192 */ 'G', '8', 'p', '1', '1', 0,
  /* 198 */ 'V', 'S', 'R', 'p', '1', '1', 0,
  /* 205 */ 'V', 'F', '2', '1', 0,
  /* 210 */ 'V', 'S', 'L', '2', '1', 0,
  /* 216 */ 'R', '2', '1', 0,
  /* 220 */ 'S', '2', '1', 0,
  /* 224 */ 'V', '2', '1', 0,
  /* 228 */ 'X', '2', '1', 0,
  /* 232 */ 'V', 'S', 'R', 'p', '2', '1', 0,
  /* 239 */ 'V', 'F', '3', '1', 0,
  /* 244 */ 'V', 'S', 'L', '3', '1', 0,
  /* 250 */ 'R', '3', '1', 0,
  /* 254 */ 'S', '3', '1', 0,
  /* 258 */ 'V', '3', '1', 0,
  /* 262 */ 'X', '3', '1', 0,
  /* 266 */ 'V', 'S', 'R', 'p', '3', '1', 0,
  /* 273 */ 'V', 'S', 'X', '4', '1', 0,
  /* 279 */ 'V', 'S', 'X', '5', '1', 0,
  /* 285 */ 'V', 'S', 'X', '6', '1', 0,
  /* 291 */ 'U', 'A', 'C', 'C', '1', 0,
  /* 297 */ 'V', 'F', '1', 0,
  /* 301 */ 'V', 'S', 'L', '1', 0,
  /* 306 */ 'C', 'R', '1', 0,
  /* 310 */ 'S', '1', 0,
  /* 313 */ 'V', '1', 0,
  /* 316 */ 'X', '1', 0,
  /* 319 */ 'G', '8', 'p', '1', 0,
  /* 324 */ 'V', 'S', 'R', 'p', '1', 0,
  /* 330 */ 'V', 'F', '1', '2', 0,
  /* 335 */ 'V', 'S', 'L', '1', '2', 0,
  /* 341 */ 'R', '1', '2', 0,
  /* 345 */ 'S', '1', '2', 0,
  /* 349 */ 'V', '1', '2', 0,
  /* 353 */ 'X', '1', '2', 0,
  /* 357 */ 'G', '8', 'p', '1', '2', 0,
  /* 363 */ 'V', 'S', 'R', 'p', '1', '2', 0,
  /* 370 */ 'V', 'F', '2', '2', 0,
  /* 375 */ 'V', 'S', 'L', '2', '2', 0,
  /* 381 */ 'R', '2', '2', 0,
  /* 385 */ 'S', '2', '2', 0,
  /* 389 */ 'V', '2', '2', 0,
  /* 393 */ 'X', '2', '2', 0,
  /* 397 */ 'V', 'S', 'R', 'p', '2', '2', 0,
  /* 404 */ 'V', 'S', 'X', '3', '2', 0,
  /* 410 */ 'V', 'S', 'X', '4', '2', 0,
  /* 416 */ 'V', 'S', 'X', '5', '2', 0,
  /* 422 */ 'V', 'S', 'X', '6', '2', 0,
  /* 428 */ 'U', 'A', 'C', 'C', '2', 0,
  /* 434 */ 'V', 'F', '2', 0,
  /* 438 */ 'V', 'S', 'L', '2', 0,
  /* 443 */ 'C', 'R', '2', 0,
  /* 447 */ 'S', '2', 0,
  /* 450 */ 'V', '2', 0,
  /* 453 */ 'X', '2', 0,
  /* 456 */ 'G', '8', 'p', '2', 0,
  /* 461 */ 'V', 'S', 'R', 'p', '2', 0,
  /* 467 */ 'V', 'F', '1', '3', 0,
  /* 472 */ 'V', 'S', 'L', '1', '3', 0,
  /* 478 */ 'R', '1', '3', 0,
  /* 482 */ 'S', '1', '3', 0,
  /* 486 */ 'V', '1', '3', 0,
  /* 490 */ 'X', '1', '3', 0,
  /* 494 */ 'G', '8', 'p', '1', '3', 0,
  /* 500 */ 'V', 'S', 'R', 'p', '1', '3', 0,
  /* 507 */ 'V', 'F', '2', '3', 0,
  /* 512 */ 'V', 'S', 'L', '2', '3', 0,
  /* 518 */ 'R', '2', '3', 0,
  /* 522 */ 'S', '2', '3', 0,
  /* 526 */ 'V', '2', '3', 0,
  /* 530 */ 'X', '2', '3', 0,
  /* 534 */ 'V', 'S', 'R', 'p', '2', '3', 0,
  /* 541 */ 'V', 'S', 'X', '3', '3', 0,
  /* 547 */ 'V', 'S', 'X', '4', '3', 0,
  /* 553 */ 'V', 'S', 'X', '5', '3', 0,
  /* 559 */ 'V', 'S', 'X', '6', '3', 0,
  /* 565 */ 'U', 'A', 'C', 'C', '3', 0,
  /* 571 */ 'V', 'F', '3', 0,
  /* 575 */ 'V', 'S', 'L', '3', 0,
  /* 580 */ 'C', 'R', '3', 0,
  /* 584 */ 'S', '3', 0,
  /* 587 */ 'V', '3', 0,
  /* 590 */ 'X', '3', 0,
  /* 593 */ 'G', '8', 'p', '3', 0,
  /* 598 */ 'V', 'S', 'R', 'p', '3', 0,
  /* 604 */ 'V', 'F', '1', '4', 0,
  /* 609 */ 'V', 'S', 'L', '1', '4', 0,
  /* 615 */ 'R', '1', '4', 0,
  /* 619 */ 'S', '1', '4', 0,
  /* 623 */ 'V', '1', '4', 0,
  /* 627 */ 'X', '1', '4', 0,
  /* 631 */ 'G', '8', 'p', '1', '4', 0,
  /* 637 */ 'V', 'S', 'R', 'p', '1', '4', 0,
  /* 644 */ 'V', 'F', '2', '4', 0,
  /* 649 */ 'V', 'S', 'L', '2', '4', 0,
  /* 655 */ 'R', '2', '4', 0,
  /* 659 */ 'S', '2', '4', 0,
  /* 663 */ 'V', '2', '4', 0,
  /* 667 */ 'X', '2', '4', 0,
  /* 671 */ 'V', 'S', 'R', 'p', '2', '4', 0,
  /* 678 */ 'V', 'S', 'X', '3', '4', 0,
  /* 684 */ 'V', 'S', 'X', '4', '4', 0,
  /* 690 */ 'V', 'S', 'X', '5', '4', 0,
  /* 696 */ 'U', 'A', 'C', 'C', '4', 0,
  /* 702 */ 'V', 'F', '4', 0,
  /* 706 */ 'V', 'S', 'L', '4', 0,
  /* 711 */ 'C', 'R', '4', 0,
  /* 715 */ 'S', '4', 0,
  /* 718 */ 'V', '4', 0,
  /* 721 */ 'X', '4', 0,
  /* 724 */ 'G', '8', 'p', '4', 0,
  /* 729 */ 'V', 'S', 'R', 'p', '4', 0,
  /* 735 */ 'V', 'F', '1', '5', 0,
  /* 740 */ 'V', 'S', 'L', '1', '5', 0,
  /* 746 */ 'R', '1', '5', 0,
  /* 750 */ 'S', '1', '5', 0,
  /* 754 */ 'V', '1', '5', 0,
  /* 758 */ 'X', '1', '5', 0,
  /* 762 */ 'G', '8', 'p', '1', '5', 0,
  /* 768 */ 'V', 'S', 'R', 'p', '1', '5', 0,
  /* 775 */ 'V', 'F', '2', '5', 0,
  /* 780 */ 'V', 'S', 'L', '2', '5', 0,
  /* 786 */ 'R', '2', '5', 0,
  /* 790 */ 'S', '2', '5', 0,
  /* 794 */ 'V', '2', '5', 0,
  /* 798 */ 'X', '2', '5', 0,
  /* 802 */ 'V', 'S', 'R', 'p', '2', '5', 0,
  /* 809 */ 'V', 'S', 'X', '3', '5', 0,
  /* 815 */ 'V', 'S', 'X', '4', '5', 0,
  /* 821 */ 'V', 'S', 'X', '5', '5', 0,
  /* 827 */ 'U', 'A', 'C', 'C', '5', 0,
  /* 833 */ 'V', 'F', '5', 0,
  /* 837 */ 'V', 'S', 'L', '5', 0,
  /* 842 */ 'C', 'R', '5', 0,
  /* 846 */ 'S', '5', 0,
  /* 849 */ 'V', '5', 0,
  /* 852 */ 'X', '5', 0,
  /* 855 */ 'G', '8', 'p', '5', 0,
  /* 860 */ 'V', 'S', 'R', 'p', '5', 0,
  /* 866 */ 'V', 'F', '1', '6', 0,
  /* 871 */ 'V', 'S', 'L', '1', '6', 0,
  /* 877 */ 'R', '1', '6', 0,
  /* 881 */ 'S', '1', '6', 0,
  /* 885 */ 'V', '1', '6', 0,
  /* 889 */ 'X', '1', '6', 0,
  /* 893 */ 'V', 'S', 'R', 'p', '1', '6', 0,
  /* 900 */ 'V', 'F', '2', '6', 0,
  /* 905 */ 'V', 'S', 'L', '2', '6', 0,
  /* 911 */ 'R', '2', '6', 0,
  /* 915 */ 'S', '2', '6', 0,
  /* 919 */ 'V', '2', '6', 0,
  /* 923 */ 'X', '2', '6', 0,
  /* 927 */ 'V', 'S', 'R', 'p', '2', '6', 0,
  /* 934 */ 'V', 'S', 'X', '3', '6', 0,
  /* 940 */ 'V', 'S', 'X', '4', '6', 0,
  /* 946 */ 'V', 'S', 'X', '5', '6', 0,
  /* 952 */ 'U', 'A', 'C', 'C', '6', 0,
  /* 958 */ 'V', 'F', '6', 0,
  /* 962 */ 'V', 'S', 'L', '6', 0,
  /* 967 */ 'C', 'R', '6', 0,
  /* 971 */ 'S', '6', 0,
  /* 974 */ 'V', '6', 0,
  /* 977 */ 'X', '6', 0,
  /* 980 */ 'G', '8', 'p', '6', 0,
  /* 985 */ 'V', 'S', 'R', 'p', '6', 0,
  /* 991 */ 'V', 'F', '1', '7', 0,
  /* 996 */ 'V', 'S', 'L', '1', '7', 0,
  /* 1002 */ 'R', '1', '7', 0,
  /* 1006 */ 'S', '1', '7', 0,
  /* 1010 */ 'V', '1', '7', 0,
  /* 1014 */ 'X', '1', '7', 0,
  /* 1018 */ 'V', 'S', 'R', 'p', '1', '7', 0,
  /* 1025 */ 'V', 'F', '2', '7', 0,
  /* 1030 */ 'V', 'S', 'L', '2', '7', 0,
  /* 1036 */ 'R', '2', '7', 0,
  /* 1040 */ 'S', '2', '7', 0,
  /* 1044 */ 'V', '2', '7', 0,
  /* 1048 */ 'X', '2', '7', 0,
  /* 1052 */ 'V', 'S', 'R', 'p', '2', '7', 0,
  /* 1059 */ 'V', 'S', 'X', '3', '7', 0,
  /* 1065 */ 'V', 'S', 'X', '4', '7', 0,
  /* 1071 */ 'V', 'S', 'X', '5', '7', 0,
  /* 1077 */ 'U', 'A', 'C', 'C', '7', 0,
  /* 1083 */ 'V', 'F', '7', 0,
  /* 1087 */ 'V', 'S', 'L', '7', 0,
  /* 1092 */ 'C', 'R', '7', 0,
  /* 1096 */ 'S', '7', 0,
  /* 1099 */ 'V', '7', 0,
  /* 1102 */ 'X', '7', 0,
  /* 1105 */ 'G', '8', 'p', '7', 0,
  /* 1110 */ 'V', 'S', 'R', 'p', '7', 0,
  /* 1116 */ 'V', 'F', '1', '8', 0,
  /* 1121 */ 'V', 'S', 'L', '1', '8', 0,
  /* 1127 */ 'R', '1', '8', 0,
  /* 1131 */ 'S', '1', '8', 0,
  /* 1135 */ 'V', '1', '8', 0,
  /* 1139 */ 'X', '1', '8', 0,
  /* 1143 */ 'V', 'S', 'R', 'p', '1', '8', 0,
  /* 1150 */ 'V', 'F', '2', '8', 0,
  /* 1155 */ 'V', 'S', 'L', '2', '8', 0,
  /* 1161 */ 'R', '2', '8', 0,
  /* 1165 */ 'S', '2', '8', 0,
  /* 1169 */ 'V', '2', '8', 0,
  /* 1173 */ 'X', '2', '8', 0,
  /* 1177 */ 'V', 'S', 'R', 'p', '2', '8', 0,
  /* 1184 */ 'V', 'S', 'X', '3', '8', 0,
  /* 1190 */ 'V', 'S', 'X', '4', '8', 0,
  /* 1196 */ 'V', 'S', 'X', '5', '8', 0,
  /* 1202 */ 'V', 'F', '8', 0,
  /* 1206 */ 'V', 'S', 'L', '8', 0,
  /* 1211 */ 'Z', 'E', 'R', 'O', '8', 0,
  /* 1217 */ 'B', 'P', '8', 0,
  /* 1221 */ 'F', 'P', '8', 0,
  /* 1225 */ 'L', 'R', '8', 0,
  /* 1229 */ 'C', 'T', 'R', '8', 0,
  /* 1234 */ 'S', '8', 0,
  /* 1237 */ 'V', '8', 0,
  /* 1240 */ 'X', '8', 0,
  /* 1243 */ 'G', '8', 'p', '8', 0,
  /* 1248 */ 'V', 'S', 'R', 'p', '8', 0,
  /* 1254 */ 'V', 'F', '1', '9', 0,
  /* 1259 */ 'V', 'S', 'L', '1', '9', 0,
  /* 1265 */ 'R', '1', '9', 0,
  /* 1269 */ 'S', '1', '9', 0,
  /* 1273 */ 'V', '1', '9', 0,
  /* 1277 */ 'X', '1', '9', 0,
  /* 1281 */ 'V', 'S', 'R', 'p', '1', '9', 0,
  /* 1288 */ 'V', 'F', '2', '9', 0,
  /* 1293 */ 'V', 'S', 'L', '2', '9', 0,
  /* 1299 */ 'R', '2', '9', 0,
  /* 1303 */ 'S', '2', '9', 0,
  /* 1307 */ 'V', '2', '9', 0,
  /* 1311 */ 'X', '2', '9', 0,
  /* 1315 */ 'V', 'S', 'R', 'p', '2', '9', 0,
  /* 1322 */ 'V', 'S', 'X', '3', '9', 0,
  /* 1328 */ 'V', 'S', 'X', '4', '9', 0,
  /* 1334 */ 'V', 'S', 'X', '5', '9', 0,
  /* 1340 */ 'V', 'F', '9', 0,
  /* 1344 */ 'V', 'S', 'L', '9', 0,
  /* 1349 */ 'R', '9', 0,
  /* 1352 */ 'S', '9', 0,
  /* 1355 */ 'V', '9', 0,
  /* 1358 */ 'X', '9', 0,
  /* 1361 */ 'G', '8', 'p', '9', 0,
  /* 1366 */ 'V', 'S', 'R', 'p', '9', 0,
  /* 1372 */ 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 1379 */ 'R', 'M', 0,
  /* 1382 */ 'C', 'R', '0', 'U', 'N', 0,
  /* 1388 */ 'C', 'R', '1', 'U', 'N', 0,
  /* 1394 */ 'C', 'R', '2', 'U', 'N', 0,
  /* 1400 */ 'C', 'R', '3', 'U', 'N', 0,
  /* 1406 */ 'C', 'R', '4', 'U', 'N', 0,
  /* 1412 */ 'C', 'R', '5', 'U', 'N', 0,
  /* 1418 */ 'C', 'R', '6', 'U', 'N', 0,
  /* 1424 */ 'C', 'R', '7', 'U', 'N', 0,
  /* 1430 */ 'Z', 'E', 'R', 'O', 0,
  /* 1435 */ 'B', 'P', 0,
  /* 1438 */ 'F', 'P', 0,
  /* 1441 */ 'C', 'R', '0', 'E', 'Q', 0,
  /* 1447 */ 'C', 'R', '1', 'E', 'Q', 0,
  /* 1453 */ 'C', 'R', '2', 'E', 'Q', 0,
  /* 1459 */ 'C', 'R', '3', 'E', 'Q', 0,
  /* 1465 */ 'C', 'R', '4', 'E', 'Q', 0,
  /* 1471 */ 'C', 'R', '5', 'E', 'Q', 0,
  /* 1477 */ 'C', 'R', '6', 'E', 'Q', 0,
  /* 1483 */ 'C', 'R', '7', 'E', 'Q', 0,
  /* 1489 */ 'S', 'P', 'E', 'F', 'S', 'C', 'R', 0,
  /* 1497 */ 'X', 'E', 'R', 0,
  /* 1501 */ 'L', 'R', 0,
  /* 1504 */ 'C', 'T', 'R', 0,
  /* 1508 */ 'C', 'R', '0', 'G', 'T', 0,
  /* 1514 */ 'C', 'R', '1', 'G', 'T', 0,
  /* 1520 */ 'C', 'R', '2', 'G', 'T', 0,
  /* 1526 */ 'C', 'R', '3', 'G', 'T', 0,
  /* 1532 */ 'C', 'R', '4', 'G', 'T', 0,
  /* 1538 */ 'C', 'R', '5', 'G', 'T', 0,
  /* 1544 */ 'C', 'R', '6', 'G', 'T', 0,
  /* 1550 */ 'C', 'R', '7', 'G', 'T', 0,
  /* 1556 */ 'C', 'R', '0', 'L', 'T', 0,
  /* 1562 */ 'C', 'R', '1', 'L', 'T', 0,
  /* 1568 */ 'C', 'R', '2', 'L', 'T', 0,
  /* 1574 */ 'C', 'R', '3', 'L', 'T', 0,
  /* 1580 */ 'C', 'R', '4', 'L', 'T', 0,
  /* 1586 */ 'C', 'R', '5', 'L', 'T', 0,
  /* 1592 */ 'C', 'R', '6', 'L', 'T', 0,
  /* 1598 */ 'C', 'R', '7', 'L', 'T', 0,
  /* 1604 */ 'C', 'A', 'R', 'R', 'Y', 0,
  0
};

extern const MCRegisterDesc PPCRegDesc[] = { // Descriptors
  { 4, 0, 0, 0, 0, 0 },
  { 1435, 1, 32, 1, 11217, 0 },
  { 1604, 1, 1, 1, 11217, 0 },
  { 1504, 1, 1, 1, 11217, 0 },
  { 1438, 1, 153, 1, 11217, 0 },
  { 1501, 1, 1, 1, 11217, 0 },
  { 1379, 1, 1, 1, 11217, 0 },
  { 1489, 1, 1, 1, 11217, 0 },
  { 1372, 1, 1, 1, 11217, 0 },
  { 1497, 1, 1, 1, 10999, 0 },
  { 1430, 1, 365, 1, 10999, 0 },
  { 127, 485, 1, 14, 196, 14 },
  { 292, 512, 1, 14, 196, 14 },
  { 429, 539, 1, 14, 196, 14 },
  { 566, 566, 1, 14, 196, 14 },
  { 697, 593, 1, 14, 196, 14 },
  { 828, 620, 1, 14, 196, 14 },
  { 953, 647, 1, 14, 196, 14 },
  { 1078, 674, 1, 14, 196, 14 },
  { 1217, 699, 1, 0, 0, 2 },
  { 141, 34, 1, 4, 116, 6 },
  { 306, 34, 1, 4, 116, 6 },
  { 443, 34, 1, 4, 116, 6 },
  { 580, 34, 1, 4, 116, 6 },
  { 711, 34, 1, 4, 116, 6 },
  { 842, 34, 1, 4, 116, 6 },
  { 967, 34, 1, 4, 116, 6 },
  { 1092, 34, 1, 4, 116, 6 },
  { 1229, 1, 1, 1, 2992, 0 },
  { 133, 1, 360, 1, 11153, 0 },
  { 298, 1, 355, 1, 11153, 0 },
  { 435, 1, 350, 1, 11153, 0 },
  { 572, 1, 345, 1, 11153, 0 },
  { 703, 1, 345, 1, 11153, 0 },
  { 834, 1, 340, 1, 11153, 0 },
  { 959, 1, 335, 1, 11153, 0 },
  { 1084, 1, 330, 1, 11153, 0 },
  { 1203, 1, 330, 1, 11153, 0 },
  { 1341, 1, 325, 1, 11153, 0 },
  { 1, 1, 320, 1, 11153, 0 },
  { 166, 1, 315, 1, 11153, 0 },
  { 331, 1, 315, 1, 11153, 0 },
  { 468, 1, 310, 1, 11153, 0 },
  { 605, 1, 305, 1, 11153, 0 },
  { 736, 1, 300, 1, 11153, 0 },
  { 867, 1, 300, 1, 11153, 0 },
  { 992, 1, 295, 1, 11153, 0 },
  { 1117, 1, 290, 1, 11153, 0 },
  { 1255, 1, 285, 1, 11153, 0 },
  { 41, 1, 285, 1, 11153, 0 },
  { 206, 1, 280, 1, 11153, 0 },
  { 371, 1, 275, 1, 11153, 0 },
  { 508, 1, 270, 1, 11153, 0 },
  { 645, 1, 270, 1, 11153, 0 },
  { 776, 1, 265, 1, 11153, 0 },
  { 901, 1, 260, 1, 11153, 0 },
  { 1026, 1, 255, 1, 11153, 0 },
  { 1151, 1, 255, 1, 11153, 0 },
  { 1289, 1, 250, 1, 11153, 0 },
  { 75, 1, 245, 1, 11153, 0 },
  { 240, 1, 240, 1, 11153, 0 },
  { 1221, 691, 1, 0, 416, 2 },
  { 1225, 1, 1, 1, 481, 0 },
  { 142, 1, 183, 1, 481, 0 },
  { 307, 1, 179, 1, 481, 0 },
  { 444, 1, 179, 1, 481, 0 },
  { 581, 1, 175, 1, 481, 0 },
  { 712, 1, 175, 1, 481, 0 },
  { 843, 1, 171, 1, 481, 0 },
  { 968, 1, 171, 1, 481, 0 },
  { 1093, 1, 167, 1, 481, 0 },
  { 1226, 1, 167, 1, 481, 0 },
  { 1349, 1, 163, 1, 481, 0 },
  { 11, 1, 163, 1, 481, 0 },
  { 176, 1, 159, 1, 481, 0 },
  { 341, 1, 159, 1, 481, 0 },
  { 478, 1, 155, 1, 481, 0 },
  { 615, 1, 155, 1, 481, 0 },
  { 746, 1, 151, 1, 481, 0 },
  { 877, 1, 151, 1, 481, 0 },
  { 1002, 1, 147, 1, 481, 0 },
  { 1127, 1, 147, 1, 481, 0 },
  { 1265, 1, 143, 1, 481, 0 },
  { 51, 1, 143, 1, 481, 0 },
  { 216, 1, 139, 1, 481, 0 },
  { 381, 1, 139, 1, 481, 0 },
  { 518, 1, 135, 1, 481, 0 },
  { 655, 1, 135, 1, 481, 0 },
  { 786, 1, 131, 1, 481, 0 },
  { 911, 1, 131, 1, 481, 0 },
  { 1036, 1, 127, 1, 481, 0 },
  { 1161, 1, 127, 1, 481, 0 },
  { 1299, 1, 123, 1, 481, 0 },
  { 85, 1, 123, 1, 481, 0 },
  { 250, 1, 119, 1, 481, 0 },
  { 145, 693, 1, 0, 11153, 2 },
  { 310, 693, 1, 0, 11153, 2 },
  { 447, 693, 1, 0, 11153, 2 },
  { 584, 693, 1, 0, 11153, 2 },
  { 715, 693, 1, 0, 11153, 2 },
  { 846, 693, 1, 0, 11153, 2 },
  { 971, 693, 1, 0, 11153, 2 },
  { 1096, 693, 1, 0, 11153, 2 },
  { 1234, 693, 1, 0, 11153, 2 },
  { 1352, 693, 1, 0, 11153, 2 },
  { 15, 693, 1, 0, 11153, 2 },
  { 180, 693, 1, 0, 11153, 2 },
  { 345, 693, 1, 0, 11153, 2 },
  { 482, 693, 1, 0, 11153, 2 },
  { 619, 693, 1, 0, 11153, 2 },
  { 750, 693, 1, 0, 11153, 2 },
  { 881, 693, 1, 0, 11153, 2 },
  { 1006, 693, 1, 0, 11153, 2 },
  { 1131, 693, 1, 0, 11153, 2 },
  { 1269, 693, 1, 0, 11153, 2 },
  { 55, 693, 1, 0, 11153, 2 },
  { 220, 693, 1, 0, 11153, 2 },
  { 385, 693, 1, 0, 11153, 2 },
  { 522, 693, 1, 0, 11153, 2 },
  { 659, 693, 1, 0, 11153, 2 },
  { 790, 693, 1, 0, 11153, 2 },
  { 915, 693, 1, 0, 11153, 2 },
  { 1040, 693, 1, 0, 11153, 2 },
  { 1165, 693, 1, 0, 11153, 2 },
  { 1303, 693, 1, 0, 11153, 2 },
  { 89, 693, 1, 0, 11153, 2 },
  { 254, 693, 1, 0, 11153, 2 },
  { 126, 474, 1, 14, 36, 14 },
  { 291, 501, 1, 14, 36, 14 },
  { 428, 528, 1, 14, 36, 14 },
  { 565, 555, 1, 14, 36, 14 },
  { 696, 582, 1, 14, 36, 14 },
  { 827, 609, 1, 14, 36, 14 },
  { 952, 636, 1, 14, 36, 14 },
  { 1077, 663, 1, 14, 36, 14 },
  { 148, 42, 238, 2, 11121, 4 },
  { 313, 42, 235, 2, 11121, 4 },
  { 450, 42, 235, 2, 11121, 4 },
  { 587, 42, 232, 2, 11121, 4 },
  { 718, 42, 232, 2, 11121, 4 },
  { 849, 42, 229, 2, 11121, 4 },
  { 974, 42, 229, 2, 11121, 4 },
  { 1099, 42, 226, 2, 11121, 4 },
  { 1237, 42, 226, 2, 11121, 4 },
  { 1355, 42, 223, 2, 11121, 4 },
  { 19, 42, 223, 2, 11121, 4 },
  { 184, 42, 220, 2, 11121, 4 },
  { 349, 42, 220, 2, 11121, 4 },
  { 486, 42, 217, 2, 11121, 4 },
  { 623, 42, 217, 2, 11121, 4 },
  { 754, 42, 214, 2, 11121, 4 },
  { 885, 42, 214, 2, 11121, 4 },
  { 1010, 42, 211, 2, 11121, 4 },
  { 1135, 42, 211, 2, 11121, 4 },
  { 1273, 42, 208, 2, 11121, 4 },
  { 59, 42, 208, 2, 11121, 4 },
  { 224, 42, 205, 2, 11121, 4 },
  { 389, 42, 205, 2, 11121, 4 },
  { 526, 42, 202, 2, 11121, 4 },
  { 663, 42, 202, 2, 11121, 4 },
  { 794, 42, 199, 2, 11121, 4 },
  { 919, 42, 199, 2, 11121, 4 },
  { 1044, 42, 196, 2, 11121, 4 },
  { 1169, 42, 196, 2, 11121, 4 },
  { 1307, 42, 193, 2, 11121, 4 },
  { 93, 42, 193, 2, 11121, 4 },
  { 258, 42, 190, 2, 11121, 4 },
  { 132, 1, 237, 1, 11025, 0 },
  { 297, 1, 234, 1, 11025, 0 },
  { 434, 1, 234, 1, 11025, 0 },
  { 571, 1, 231, 1, 11025, 0 },
  { 702, 1, 231, 1, 11025, 0 },
  { 833, 1, 228, 1, 11025, 0 },
  { 958, 1, 228, 1, 11025, 0 },
  { 1083, 1, 225, 1, 11025, 0 },
  { 1202, 1, 225, 1, 11025, 0 },
  { 1340, 1, 222, 1, 11025, 0 },
  { 0, 1, 222, 1, 11025, 0 },
  { 165, 1, 219, 1, 11025, 0 },
  { 330, 1, 219, 1, 11025, 0 },
  { 467, 1, 216, 1, 11025, 0 },
  { 604, 1, 216, 1, 11025, 0 },
  { 735, 1, 213, 1, 11025, 0 },
  { 866, 1, 213, 1, 11025, 0 },
  { 991, 1, 210, 1, 11025, 0 },
  { 1116, 1, 210, 1, 11025, 0 },
  { 1254, 1, 207, 1, 11025, 0 },
  { 40, 1, 207, 1, 11025, 0 },
  { 205, 1, 204, 1, 11025, 0 },
  { 370, 1, 204, 1, 11025, 0 },
  { 507, 1, 201, 1, 11025, 0 },
  { 644, 1, 201, 1, 11025, 0 },
  { 775, 1, 198, 1, 11025, 0 },
  { 900, 1, 198, 1, 11025, 0 },
  { 1025, 1, 195, 1, 11025, 0 },
  { 1150, 1, 195, 1, 11025, 0 },
  { 1288, 1, 192, 1, 11025, 0 },
  { 74, 1, 192, 1, 11025, 0 },
  { 239, 1, 189, 1, 11025, 0 },
  { 136, 472, 361, 2, 7473, 4 },
  { 301, 472, 356, 2, 7473, 4 },
  { 438, 472, 351, 2, 7473, 4 },
  { 575, 472, 346, 2, 7473, 4 },
  { 706, 472, 346, 2, 7473, 4 },
  { 837, 472, 341, 2, 7473, 4 },
  { 962, 472, 336, 2, 7473, 4 },
  { 1087, 472, 331, 2, 7473, 4 },
  { 1206, 472, 331, 2, 7473, 4 },
  { 1344, 472, 326, 2, 7473, 4 },
  { 5, 472, 321, 2, 7473, 4 },
  { 170, 472, 316, 2, 7473, 4 },
  { 335, 472, 316, 2, 7473, 4 },
  { 472, 472, 311, 2, 7473, 4 },
  { 609, 472, 306, 2, 7473, 4 },
  { 740, 472, 301, 2, 7473, 4 },
  { 871, 472, 301, 2, 7473, 4 },
  { 996, 472, 296, 2, 7473, 4 },
  { 1121, 472, 291, 2, 7473, 4 },
  { 1259, 472, 286, 2, 7473, 4 },
  { 45, 472, 286, 2, 7473, 4 },
  { 210, 472, 281, 2, 7473, 4 },
  { 375, 472, 276, 2, 7473, 4 },
  { 512, 472, 271, 2, 7473, 4 },
  { 649, 472, 271, 2, 7473, 4 },
  { 780, 472, 266, 2, 7473, 4 },
  { 905, 472, 261, 2, 7473, 4 },
  { 1030, 472, 256, 2, 7473, 4 },
  { 1155, 472, 256, 2, 7473, 4 },
  { 1293, 472, 251, 2, 7473, 4 },
  { 79, 472, 246, 2, 7473, 4 },
  { 244, 472, 241, 2, 7473, 4 },
  { 159, 469, 357, 9, 322, 11 },
  { 324, 480, 342, 9, 322, 11 },
  { 461, 496, 342, 9, 322, 11 },
  { 598, 507, 327, 9, 322, 11 },
  { 729, 523, 327, 9, 322, 11 },
  { 860, 534, 312, 9, 322, 11 },
  { 985, 550, 312, 9, 322, 11 },
  { 1110, 561, 297, 9, 322, 11 },
  { 1248, 577, 297, 9, 322, 11 },
  { 1366, 588, 282, 9, 322, 11 },
  { 33, 604, 282, 9, 322, 11 },
  { 198, 615, 267, 9, 322, 11 },
  { 363, 631, 267, 9, 322, 11 },
  { 500, 642, 252, 9, 322, 11 },
  { 637, 658, 252, 9, 322, 11 },
  { 768, 669, 242, 9, 322, 11 },
  { 893, 39, 1, 9, 370, 11 },
  { 1018, 44, 1, 9, 370, 11 },
  { 1143, 49, 1, 9, 370, 11 },
  { 1281, 54, 1, 9, 370, 11 },
  { 67, 59, 1, 9, 370, 11 },
  { 232, 64, 1, 9, 370, 11 },
  { 397, 69, 1, 9, 370, 11 },
  { 534, 74, 1, 9, 370, 11 },
  { 671, 79, 1, 9, 370, 11 },
  { 802, 84, 1, 9, 370, 11 },
  { 927, 89, 1, 9, 370, 11 },
  { 1052, 94, 1, 9, 370, 11 },
  { 1177, 99, 1, 9, 370, 11 },
  { 1315, 104, 1, 9, 370, 11 },
  { 101, 109, 1, 9, 370, 11 },
  { 266, 114, 1, 9, 370, 11 },
  { 404, 1, 1, 1, 10961, 0 },
  { 541, 1, 1, 1, 10961, 0 },
  { 678, 1, 1, 1, 10961, 0 },
  { 809, 1, 1, 1, 10961, 0 },
  { 934, 1, 1, 1, 10961, 0 },
  { 1059, 1, 1, 1, 10961, 0 },
  { 1184, 1, 1, 1, 10961, 0 },
  { 1322, 1, 1, 1, 10961, 0 },
  { 108, 1, 1, 1, 10961, 0 },
  { 273, 1, 1, 1, 10961, 0 },
  { 410, 1, 1, 1, 10961, 0 },
  { 547, 1, 1, 1, 10961, 0 },
  { 684, 1, 1, 1, 10961, 0 },
  { 815, 1, 1, 1, 10961, 0 },
  { 940, 1, 1, 1, 10961, 0 },
  { 1065, 1, 1, 1, 10961, 0 },
  { 1190, 1, 1, 1, 10961, 0 },
  { 1328, 1, 1, 1, 10961, 0 },
  { 114, 1, 1, 1, 10961, 0 },
  { 279, 1, 1, 1, 10961, 0 },
  { 416, 1, 1, 1, 10961, 0 },
  { 553, 1, 1, 1, 10961, 0 },
  { 690, 1, 1, 1, 10961, 0 },
  { 821, 1, 1, 1, 10961, 0 },
  { 946, 1, 1, 1, 10961, 0 },
  { 1071, 1, 1, 1, 10961, 0 },
  { 1196, 1, 1, 1, 10961, 0 },
  { 1334, 1, 1, 1, 10961, 0 },
  { 120, 1, 1, 1, 10961, 0 },
  { 285, 1, 1, 1, 10961, 0 },
  { 422, 1, 1, 1, 10961, 0 },
  { 559, 1, 1, 1, 10961, 0 },
  { 151, 388, 185, 0, 7441, 2 },
  { 316, 388, 181, 0, 7441, 2 },
  { 453, 388, 181, 0, 7441, 2 },
  { 590, 388, 177, 0, 7441, 2 },
  { 721, 388, 177, 0, 7441, 2 },
  { 852, 388, 173, 0, 7441, 2 },
  { 977, 388, 173, 0, 7441, 2 },
  { 1102, 388, 169, 0, 7441, 2 },
  { 1240, 388, 169, 0, 7441, 2 },
  { 1358, 388, 165, 0, 7441, 2 },
  { 23, 388, 165, 0, 7441, 2 },
  { 188, 388, 161, 0, 7441, 2 },
  { 353, 388, 161, 0, 7441, 2 },
  { 490, 388, 157, 0, 7441, 2 },
  { 627, 388, 157, 0, 7441, 2 },
  { 758, 388, 153, 0, 7441, 2 },
  { 889, 388, 153, 0, 7441, 2 },
  { 1014, 388, 149, 0, 7441, 2 },
  { 1139, 388, 149, 0, 7441, 2 },
  { 1277, 388, 145, 0, 7441, 2 },
  { 63, 388, 145, 0, 7441, 2 },
  { 228, 388, 141, 0, 7441, 2 },
  { 393, 388, 141, 0, 7441, 2 },
  { 530, 388, 137, 0, 7441, 2 },
  { 667, 388, 137, 0, 7441, 2 },
  { 798, 388, 133, 0, 7441, 2 },
  { 923, 388, 133, 0, 7441, 2 },
  { 1048, 388, 129, 0, 7441, 2 },
  { 1173, 388, 129, 0, 7441, 2 },
  { 1311, 388, 125, 0, 7441, 2 },
  { 97, 388, 125, 0, 7441, 2 },
  { 262, 388, 121, 0, 7441, 2 },
  { 1211, 379, 1, 0, 448, 2 },
  { 1441, 1, 383, 1, 5972, 0 },
  { 1447, 1, 383, 1, 5972, 0 },
  { 1453, 1, 383, 1, 5972, 0 },
  { 1459, 1, 383, 1, 5972, 0 },
  { 1465, 1, 383, 1, 5972, 0 },
  { 1471, 1, 383, 1, 5972, 0 },
  { 1477, 1, 383, 1, 5972, 0 },
  { 1483, 1, 383, 1, 5972, 0 },
  { 1508, 1, 381, 1, 5940, 0 },
  { 1514, 1, 381, 1, 5940, 0 },
  { 1520, 1, 381, 1, 5940, 0 },
  { 1526, 1, 381, 1, 5940, 0 },
  { 1532, 1, 381, 1, 5940, 0 },
  { 1538, 1, 381, 1, 5940, 0 },
  { 1544, 1, 381, 1, 5940, 0 },
  { 1550, 1, 381, 1, 5940, 0 },
  { 1556, 1, 377, 1, 5908, 0 },
  { 1562, 1, 377, 1, 5908, 0 },
  { 1568, 1, 377, 1, 5908, 0 },
  { 1574, 1, 377, 1, 5908, 0 },
  { 1580, 1, 377, 1, 5908, 0 },
  { 1586, 1, 377, 1, 5908, 0 },
  { 1592, 1, 377, 1, 5908, 0 },
  { 1598, 1, 377, 1, 5908, 0 },
  { 1382, 1, 375, 1, 5876, 0 },
  { 1388, 1, 375, 1, 5876, 0 },
  { 1394, 1, 375, 1, 5876, 0 },
  { 1400, 1, 375, 1, 5876, 0 },
  { 1406, 1, 375, 1, 5876, 0 },
  { 1412, 1, 375, 1, 5876, 0 },
  { 1418, 1, 375, 1, 5876, 0 },
  { 1424, 1, 375, 1, 5876, 0 },
  { 154, 385, 1, 25, 274, 19 },
  { 319, 390, 1, 25, 274, 19 },
  { 456, 395, 1, 25, 274, 19 },
  { 593, 400, 1, 25, 274, 19 },
  { 724, 405, 1, 25, 274, 19 },
  { 855, 410, 1, 25, 274, 19 },
  { 980, 415, 1, 25, 274, 19 },
  { 1105, 420, 1, 25, 274, 19 },
  { 1243, 425, 1, 25, 274, 19 },
  { 1361, 430, 1, 25, 274, 19 },
  { 27, 435, 1, 25, 274, 19 },
  { 192, 440, 1, 25, 274, 19 },
  { 357, 445, 1, 25, 274, 19 },
  { 494, 450, 1, 25, 274, 19 },
  { 631, 455, 1, 25, 274, 19 },
  { 762, 460, 1, 25, 274, 19 },
};

extern const MCPhysReg PPCRegUnitRoots[][2] = {
  { PPC::BP },
  { PPC::CARRY, PPC::XER },
  { PPC::CTR },
  { PPC::FP },
  { PPC::LR },
  { PPC::RM },
  { PPC::SPEFSCR },
  { PPC::VRSAVE },
  { PPC::ZERO },
  { PPC::F0 },
  { PPC::F1 },
  { PPC::F2 },
  { PPC::F3 },
  { PPC::F4 },
  { PPC::F5 },
  { PPC::F6 },
  { PPC::F7 },
  { PPC::F8 },
  { PPC::F9 },
  { PPC::F10 },
  { PPC::F11 },
  { PPC::F12 },
  { PPC::F13 },
  { PPC::F14 },
  { PPC::F15 },
  { PPC::F16 },
  { PPC::F17 },
  { PPC::F18 },
  { PPC::F19 },
  { PPC::F20 },
  { PPC::F21 },
  { PPC::F22 },
  { PPC::F23 },
  { PPC::F24 },
  { PPC::F25 },
  { PPC::F26 },
  { PPC::F27 },
  { PPC::F28 },
  { PPC::F29 },
  { PPC::F30 },
  { PPC::F31 },
  { PPC::CR0LT },
  { PPC::CR0GT },
  { PPC::CR0EQ },
  { PPC::CR0UN },
  { PPC::CR1LT },
  { PPC::CR1GT },
  { PPC::CR1EQ },
  { PPC::CR1UN },
  { PPC::CR2LT },
  { PPC::CR2GT },
  { PPC::CR2EQ },
  { PPC::CR2UN },
  { PPC::CR3LT },
  { PPC::CR3GT },
  { PPC::CR3EQ },
  { PPC::CR3UN },
  { PPC::CR4LT },
  { PPC::CR4GT },
  { PPC::CR4EQ },
  { PPC::CR4UN },
  { PPC::CR5LT },
  { PPC::CR5GT },
  { PPC::CR5EQ },
  { PPC::CR5UN },
  { PPC::CR6LT },
  { PPC::CR6GT },
  { PPC::CR6EQ },
  { PPC::CR6UN },
  { PPC::CR7LT },
  { PPC::CR7GT },
  { PPC::CR7EQ },
  { PPC::CR7UN },
  { PPC::CTR8 },
  { PPC::LR8 },
  { PPC::R0 },
  { PPC::R1 },
  { PPC::R2 },
  { PPC::R3 },
  { PPC::R4 },
  { PPC::R5 },
  { PPC::R6 },
  { PPC::R7 },
  { PPC::R8 },
  { PPC::R9 },
  { PPC::R10 },
  { PPC::R11 },
  { PPC::R12 },
  { PPC::R13 },
  { PPC::R14 },
  { PPC::R15 },
  { PPC::R16 },
  { PPC::R17 },
  { PPC::R18 },
  { PPC::R19 },
  { PPC::R20 },
  { PPC::R21 },
  { PPC::R22 },
  { PPC::R23 },
  { PPC::R24 },
  { PPC::R25 },
  { PPC::R26 },
  { PPC::R27 },
  { PPC::R28 },
  { PPC::R29 },
  { PPC::R30 },
  { PPC::R31 },
  { PPC::VF0 },
  { PPC::VF1 },
  { PPC::VF2 },
  { PPC::VF3 },
  { PPC::VF4 },
  { PPC::VF5 },
  { PPC::VF6 },
  { PPC::VF7 },
  { PPC::VF8 },
  { PPC::VF9 },
  { PPC::VF10 },
  { PPC::VF11 },
  { PPC::VF12 },
  { PPC::VF13 },
  { PPC::VF14 },
  { PPC::VF15 },
  { PPC::VF16 },
  { PPC::VF17 },
  { PPC::VF18 },
  { PPC::VF19 },
  { PPC::VF20 },
  { PPC::VF21 },
  { PPC::VF22 },
  { PPC::VF23 },
  { PPC::VF24 },
  { PPC::VF25 },
  { PPC::VF26 },
  { PPC::VF27 },
  { PPC::VF28 },
  { PPC::VF29 },
  { PPC::VF30 },
  { PPC::VF31 },
  { PPC::VSX32 },
  { PPC::VSX33 },
  { PPC::VSX34 },
  { PPC::VSX35 },
  { PPC::VSX36 },
  { PPC::VSX37 },
  { PPC::VSX38 },
  { PPC::VSX39 },
  { PPC::VSX40 },
  { PPC::VSX41 },
  { PPC::VSX42 },
  { PPC::VSX43 },
  { PPC::VSX44 },
  { PPC::VSX45 },
  { PPC::VSX46 },
  { PPC::VSX47 },
  { PPC::VSX48 },
  { PPC::VSX49 },
  { PPC::VSX50 },
  { PPC::VSX51 },
  { PPC::VSX52 },
  { PPC::VSX53 },
  { PPC::VSX54 },
  { PPC::VSX55 },
  { PPC::VSX56 },
  { PPC::VSX57 },
  { PPC::VSX58 },
  { PPC::VSX59 },
  { PPC::VSX60 },
  { PPC::VSX61 },
  { PPC::VSX62 },
  { PPC::VSX63 },
};

namespace {     // Register classes...
  // VSSRC Register Class...
  const MCPhysReg VSSRC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F31, PPC::F30, PPC::F29, PPC::F28, PPC::F27, PPC::F26, PPC::F25, PPC::F24, PPC::F23, PPC::F22, PPC::F21, PPC::F20, PPC::F19, PPC::F18, PPC::F17, PPC::F16, PPC::F15, PPC::F14, PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, PPC::VF31, PPC::VF30, PPC::VF29, PPC::VF28, PPC::VF27, PPC::VF26, PPC::VF25, PPC::VF24, PPC::VF23, PPC::VF22, PPC::VF21, PPC::VF20, 
  };

  // VSSRC Bit set.
  const uint8_t VSSRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC Register Class...
  const MCPhysReg GPRC[] = {
    PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R0, PPC::R1, PPC::FP, PPC::BP, 
  };

  // GPRC Bit set.
  const uint8_t GPRCBits[] = {
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC_NOR0 Register Class...
  const MCPhysReg GPRC_NOR0[] = {
    PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R1, PPC::FP, PPC::BP, PPC::ZERO, 
  };

  // GPRC_NOR0 Bit set.
  const uint8_t GPRC_NOR0Bits[] = {
    0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // GPRC_and_GPRC_NOR0 Register Class...
  const MCPhysReg GPRC_and_GPRC_NOR0[] = {
    PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R1, PPC::FP, PPC::BP, 
  };

  // GPRC_and_GPRC_NOR0 Bit set.
  const uint8_t GPRC_and_GPRC_NOR0Bits[] = {
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // CRBITRC Register Class...
  const MCPhysReg CRBITRC[] = {
    PPC::CR2LT, PPC::CR2GT, PPC::CR2EQ, PPC::CR2UN, PPC::CR3LT, PPC::CR3GT, PPC::CR3EQ, PPC::CR3UN, PPC::CR4LT, PPC::CR4GT, PPC::CR4EQ, PPC::CR4UN, PPC::CR5LT, PPC::CR5GT, PPC::CR5EQ, PPC::CR5UN, PPC::CR6LT, PPC::CR6GT, PPC::CR6EQ, PPC::CR6UN, PPC::CR7LT, PPC::CR7GT, PPC::CR7EQ, PPC::CR7UN, PPC::CR1LT, PPC::CR1GT, PPC::CR1EQ, PPC::CR1UN, PPC::CR0LT, PPC::CR0GT, PPC::CR0EQ, PPC::CR0UN, 
  };

  // CRBITRC Bit set.
  const uint8_t CRBITRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // F4RC Register Class...
  const MCPhysReg F4RC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F31, PPC::F30, PPC::F29, PPC::F28, PPC::F27, PPC::F26, PPC::F25, PPC::F24, PPC::F23, PPC::F22, PPC::F21, PPC::F20, PPC::F19, PPC::F18, PPC::F17, PPC::F16, PPC::F15, PPC::F14, 
  };

  // F4RC Bit set.
  const uint8_t F4RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // CRRC Register Class...
  const MCPhysReg CRRC[] = {
    PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, PPC::CR2, PPC::CR3, PPC::CR4, 
  };

  // CRRC Bit set.
  const uint8_t CRRCBits[] = {
    0x00, 0x00, 0xf0, 0x0f, 
  };

  // CARRYRC Register Class...
  const MCPhysReg CARRYRC[] = {
    PPC::CARRY, PPC::XER, 
  };

  // CARRYRC Bit set.
  const uint8_t CARRYRCBits[] = {
    0x04, 0x02, 
  };

  // CTRRC Register Class...
  const MCPhysReg CTRRC[] = {
    PPC::CTR, 
  };

  // CTRRC Bit set.
  const uint8_t CTRRCBits[] = {
    0x08, 
  };

  // LRRC Register Class...
  const MCPhysReg LRRC[] = {
    PPC::LR, 
  };

  // LRRC Bit set.
  const uint8_t LRRCBits[] = {
    0x20, 
  };

  // VRSAVERC Register Class...
  const MCPhysReg VRSAVERC[] = {
    PPC::VRSAVE, 
  };

  // VRSAVERC Bit set.
  const uint8_t VRSAVERCBits[] = {
    0x00, 0x01, 
  };

  // SPILLTOVSRRC Register Class...
  const MCPhysReg SPILLTOVSRRC[] = {
    PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X0, PPC::X1, PPC::FP8, PPC::BP8, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, 
  };

  // SPILLTOVSRRC Bit set.
  const uint8_t SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x08, 0xe0, 0xff, 0x07, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSFRC Register Class...
  const MCPhysReg VSFRC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F31, PPC::F30, PPC::F29, PPC::F28, PPC::F27, PPC::F26, PPC::F25, PPC::F24, PPC::F23, PPC::F22, PPC::F21, PPC::F20, PPC::F19, PPC::F18, PPC::F17, PPC::F16, PPC::F15, PPC::F14, PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, PPC::VF31, PPC::VF30, PPC::VF29, PPC::VF28, PPC::VF27, PPC::VF26, PPC::VF25, PPC::VF24, PPC::VF23, PPC::VF22, PPC::VF21, PPC::VF20, 
  };

  // VSFRC Bit set.
  const uint8_t VSFRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // G8RC Register Class...
  const MCPhysReg G8RC[] = {
    PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X0, PPC::X1, PPC::FP8, PPC::BP8, 
  };

  // G8RC Bit set.
  const uint8_t G8RCBits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // G8RC_NOX0 Register Class...
  const MCPhysReg G8RC_NOX0[] = {
    PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8, PPC::ZERO8, 
  };

  // G8RC_NOX0 Bit set.
  const uint8_t G8RC_NOX0Bits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  };

  // SPILLTOVSRRC_and_VSFRC Register Class...
  const MCPhysReg SPILLTOVSRRC_and_VSFRC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, 
  };

  // SPILLTOVSRRC_and_VSFRC Bit set.
  const uint8_t SPILLTOVSRRC_and_VSFRCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // G8RC_and_G8RC_NOX0 Register Class...
  const MCPhysReg G8RC_and_G8RC_NOX0[] = {
    PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8, 
  };

  // G8RC_and_G8RC_NOX0 Bit set.
  const uint8_t G8RC_and_G8RC_NOX0Bits[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // F8RC Register Class...
  const MCPhysReg F8RC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F31, PPC::F30, PPC::F29, PPC::F28, PPC::F27, PPC::F26, PPC::F25, PPC::F24, PPC::F23, PPC::F22, PPC::F21, PPC::F20, PPC::F19, PPC::F18, PPC::F17, PPC::F16, PPC::F15, PPC::F14, 
  };

  // F8RC Bit set.
  const uint8_t F8RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x1f, 
  };

  // SPERC Register Class...
  const MCPhysReg SPERC[] = {
    PPC::S2, PPC::S3, PPC::S4, PPC::S5, PPC::S6, PPC::S7, PPC::S8, PPC::S9, PPC::S10, PPC::S11, PPC::S12, PPC::S30, PPC::S29, PPC::S28, PPC::S27, PPC::S26, PPC::S25, PPC::S24, PPC::S23, PPC::S22, PPC::S21, PPC::S20, PPC::S19, PPC::S18, PPC::S17, PPC::S16, PPC::S15, PPC::S14, PPC::S13, PPC::S31, PPC::S0, PPC::S1, 
  };

  // SPERC Bit set.
  const uint8_t SPERCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VFRC Register Class...
  const MCPhysReg VFRC[] = {
    PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, PPC::VF31, PPC::VF30, PPC::VF29, PPC::VF28, PPC::VF27, PPC::VF26, PPC::VF25, PPC::VF24, PPC::VF23, PPC::VF22, PPC::VF21, PPC::VF20, 
  };

  // VFRC Bit set.
  const uint8_t VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // SPERC_with_sub_32_in_GPRC_NOR0 Register Class...
  const MCPhysReg SPERC_with_sub_32_in_GPRC_NOR0[] = {
    PPC::S2, PPC::S3, PPC::S4, PPC::S5, PPC::S6, PPC::S7, PPC::S8, PPC::S9, PPC::S10, PPC::S11, PPC::S12, PPC::S30, PPC::S29, PPC::S28, PPC::S27, PPC::S26, PPC::S25, PPC::S24, PPC::S23, PPC::S22, PPC::S21, PPC::S20, PPC::S19, PPC::S18, PPC::S17, PPC::S16, PPC::S15, PPC::S14, PPC::S13, PPC::S31, PPC::S1, 
  };

  // SPERC_with_sub_32_in_GPRC_NOR0 Bit set.
  const uint8_t SPERC_with_sub_32_in_GPRC_NOR0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 
  };

  // SPILLTOVSRRC_and_VFRC Register Class...
  const MCPhysReg SPILLTOVSRRC_and_VFRC[] = {
    PPC::VF2, PPC::VF3, PPC::VF4, PPC::VF5, PPC::VF0, PPC::VF1, PPC::VF6, PPC::VF7, PPC::VF8, PPC::VF9, PPC::VF10, PPC::VF11, PPC::VF12, PPC::VF13, PPC::VF14, PPC::VF15, PPC::VF16, PPC::VF17, PPC::VF18, PPC::VF19, 
  };

  // SPILLTOVSRRC_and_VFRC Bit set.
  const uint8_t SPILLTOVSRRC_and_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // SPILLTOVSRRC_and_F4RC Register Class...
  const MCPhysReg SPILLTOVSRRC_and_F4RC[] = {
    PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, 
  };

  // SPILLTOVSRRC_and_F4RC Bit set.
  const uint8_t SPILLTOVSRRC_and_F4RCBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 
  };

  // CTRRC8 Register Class...
  const MCPhysReg CTRRC8[] = {
    PPC::CTR8, 
  };

  // CTRRC8 Bit set.
  const uint8_t CTRRC8Bits[] = {
    0x00, 0x00, 0x00, 0x10, 
  };

  // LR8RC Register Class...
  const MCPhysReg LR8RC[] = {
    PPC::LR8, 
  };

  // LR8RC Bit set.
  const uint8_t LR8RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  };

  // VSRC Register Class...
  const MCPhysReg VSRC[] = {
    PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::VSL31, PPC::VSL30, PPC::VSL29, PPC::VSL28, PPC::VSL27, PPC::VSL26, PPC::VSL25, PPC::VSL24, PPC::VSL23, PPC::VSL22, PPC::VSL21, PPC::VSL20, PPC::VSL19, PPC::VSL18, PPC::VSL17, PPC::VSL16, PPC::VSL15, PPC::VSL14, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V0, PPC::V1, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V31, PPC::V30, PPC::V29, PPC::V28, PPC::V27, PPC::V26, PPC::V25, PPC::V24, PPC::V23, PPC::V22, PPC::V21, PPC::V20, 
  };

  // VSRC Bit set.
  const uint8_t VSRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg VSRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V0, PPC::V1, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, 
  };

  // VSRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t VSRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // VRRC Register Class...
  const MCPhysReg VRRC[] = {
    PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V0, PPC::V1, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V31, PPC::V30, PPC::V29, PPC::V28, PPC::V27, PPC::V26, PPC::V25, PPC::V24, PPC::V23, PPC::V22, PPC::V21, PPC::V20, 
  };

  // VRRC Bit set.
  const uint8_t VRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSLRC Register Class...
  const MCPhysReg VSLRC[] = {
    PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::VSL31, PPC::VSL30, PPC::VSL29, PPC::VSL28, PPC::VSL27, PPC::VSL26, PPC::VSL25, PPC::VSL24, PPC::VSL23, PPC::VSL22, PPC::VSL21, PPC::VSL20, PPC::VSL19, PPC::VSL18, PPC::VSL17, PPC::VSL16, PPC::VSL15, PPC::VSL14, 
  };

  // VSLRC Bit set.
  const uint8_t VSLRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VRRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg VRRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V0, PPC::V1, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, 
  };

  // VRRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t VRRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x07, 
  };

  // G8pRC Register Class...
  const MCPhysReg G8pRC[] = {
    PPC::G8p1, PPC::G8p2, PPC::G8p3, PPC::G8p4, PPC::G8p5, PPC::G8p14, PPC::G8p13, PPC::G8p12, PPC::G8p11, PPC::G8p10, PPC::G8p9, PPC::G8p8, PPC::G8p7, PPC::G8p15, PPC::G8p6, PPC::G8p0, 
  };

  // G8pRC Bit set.
  const uint8_t G8pRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
  };

  // G8pRC_with_sub_32_in_GPRC_NOR0 Register Class...
  const MCPhysReg G8pRC_with_sub_32_in_GPRC_NOR0[] = {
    PPC::G8p1, PPC::G8p2, PPC::G8p3, PPC::G8p4, PPC::G8p5, PPC::G8p14, PPC::G8p13, PPC::G8p12, PPC::G8p11, PPC::G8p10, PPC::G8p9, PPC::G8p8, PPC::G8p7, PPC::G8p15, PPC::G8p6, 
  };

  // G8pRC_with_sub_32_in_GPRC_NOR0 Bit set.
  const uint8_t G8pRC_with_sub_32_in_GPRC_NOR0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 
  };

  // VSLRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg VSLRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, 
  };

  // VSLRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t VSLRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // VSRpRC Register Class...
  const MCPhysReg VSRpRC[] = {
    PPC::VSRp17, PPC::VSRp18, PPC::VSRp16, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp31, PPC::VSRp30, PPC::VSRp29, PPC::VSRp28, PPC::VSRp27, PPC::VSRp26, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp15, PPC::VSRp14, PPC::VSRp13, PPC::VSRp12, PPC::VSRp11, PPC::VSRp10, PPC::VSRp9, PPC::VSRp8, PPC::VSRp7, 
  };

  // VSRpRC Bit set.
  const uint8_t VSRpRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::VSRp17, PPC::VSRp18, PPC::VSRp16, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x80, 0xff, 0x01, 
  };

  // VSRpRC_with_sub_64_in_F4RC Register Class...
  const MCPhysReg VSRpRC_with_sub_64_in_F4RC[] = {
    PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp15, PPC::VSRp14, PPC::VSRp13, PPC::VSRp12, PPC::VSRp11, PPC::VSRp10, PPC::VSRp9, PPC::VSRp8, PPC::VSRp7, 
  };

  // VSRpRC_with_sub_64_in_F4RC Bit set.
  const uint8_t VSRpRC_with_sub_64_in_F4RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_VFRC Register Class...
  const MCPhysReg VSRpRC_with_sub_64_in_VFRC[] = {
    PPC::VSRp17, PPC::VSRp18, PPC::VSRp16, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp31, PPC::VSRp30, PPC::VSRp29, PPC::VSRp28, PPC::VSRp27, PPC::VSRp26, 
  };

  // VSRpRC_with_sub_64_in_VFRC Bit set.
  const uint8_t VSRpRC_with_sub_64_in_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC Register Class...
  const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC[] = {
    PPC::VSRp17, PPC::VSRp18, PPC::VSRp16, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC Bit set.
  const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC Register Class...
  const MCPhysReg VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC[] = {
    PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, 
  };

  // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC Bit set.
  const uint8_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // ACCRC Register Class...
  const MCPhysReg ACCRC[] = {
    PPC::ACC0, PPC::ACC1, PPC::ACC2, PPC::ACC3, PPC::ACC4, PPC::ACC5, PPC::ACC6, PPC::ACC7, 
  };

  // ACCRC Bit set.
  const uint8_t ACCRCBits[] = {
    0x00, 0xf8, 0x07, 
  };

  // UACCRC Register Class...
  const MCPhysReg UACCRC[] = {
    PPC::UACC0, PPC::UACC1, PPC::UACC2, PPC::UACC3, PPC::UACC4, PPC::UACC5, PPC::UACC6, PPC::UACC7, 
  };

  // UACCRC Bit set.
  const uint8_t UACCRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 
  };

  // ACCRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg ACCRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::ACC0, PPC::ACC1, PPC::ACC2, PPC::ACC3, 
  };

  // ACCRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t ACCRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x78, 
  };

  // UACCRC_with_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg UACCRC_with_sub_64_in_SPILLTOVSRRC[] = {
    PPC::UACC0, PPC::UACC1, PPC::UACC2, PPC::UACC3, 
  };

  // UACCRC_with_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t UACCRC_with_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 
  };

  // ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC[] = {
    PPC::ACC0, PPC::ACC1, PPC::ACC2, 
  };

  // ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x38, 
  };

  // UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Register Class...
  const MCPhysReg UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC[] = {
    PPC::UACC0, PPC::UACC1, PPC::UACC2, 
  };

  // UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC Bit set.
  const uint8_t UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
  };

} // end anonymous namespace

extern const char PPCRegClassStrings[] = {
  /* 0 */ 'G', 'P', 'R', 'C', '_', 'a', 'n', 'd', '_', 'G', 'P', 'R', 'C', '_', 'N', 'O', 'R', '0', 0,
  /* 19 */ 'S', 'P', 'E', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '3', '2', '_', 'i', 'n', '_', 'G', 'P', 'R', 'C', '_', 'N', 'O', 'R', '0', 0,
  /* 50 */ 'G', '8', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '3', '2', '_', 'i', 'n', '_', 'G', 'P', 'R', 'C', '_', 'N', 'O', 'R', '0', 0,
  /* 81 */ 'G', '8', 'R', 'C', '_', 'a', 'n', 'd', '_', 'G', '8', 'R', 'C', '_', 'N', 'O', 'X', '0', 0,
  /* 100 */ 'C', 'T', 'R', 'R', 'C', '8', 0,
  /* 107 */ 'V', 'S', 'R', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', '_', 'a', 'n', 'd', '_', 'F', '4', 'R', 'C', 0,
  /* 151 */ 'V', 'S', 'R', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'F', '4', 'R', 'C', 0,
  /* 178 */ 'F', '8', 'R', 'C', 0,
  /* 183 */ 'G', '8', 'R', 'C', 0,
  /* 188 */ 'L', 'R', '8', 'R', 'C', 0,
  /* 194 */ 'U', 'A', 'C', 'C', 'R', 'C', 0,
  /* 201 */ 'S', 'P', 'E', 'R', 'C', 0,
  /* 207 */ 'V', 'R', 'S', 'A', 'V', 'E', 'R', 'C', 0,
  /* 216 */ 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', '_', 'a', 'n', 'd', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 239 */ 'V', 'S', 'R', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', '_', 'a', 'n', 'd', '_', 'V', 'F', 'R', 'C', 0,
  /* 283 */ 'V', 'S', 'R', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'V', 'F', 'R', 'C', 0,
  /* 310 */ 'V', 'S', 'L', 'R', 'C', 0,
  /* 316 */ 'G', 'P', 'R', 'C', 0,
  /* 321 */ 'C', 'R', 'R', 'C', 0,
  /* 326 */ 'L', 'R', 'R', 'C', 0,
  /* 331 */ 'U', 'A', 'C', 'C', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 366 */ 'V', 'S', 'L', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 400 */ 'V', 'R', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 433 */ 'V', 'S', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 466 */ 'V', 'S', 'R', 'p', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 501 */ 'U', 'A', 'C', 'C', 'R', 'C', '_', 'w', 'i', 't', 'h', '_', 's', 'u', 'b', '_', 'p', 'a', 'i', 'r', '1', '_', 't', 'h', 'e', 'n', '_', 's', 'u', 'b', '_', '6', '4', '_', 'i', 'n', '_', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', 'R', 'C', 0,
  /* 551 */ 'C', 'T', 'R', 'R', 'C', 0,
  /* 557 */ 'V', 'R', 'R', 'C', 0,
  /* 562 */ 'V', 'S', 'S', 'R', 'C', 0,
  /* 568 */ 'V', 'S', 'R', 'C', 0,
  /* 573 */ 'C', 'R', 'B', 'I', 'T', 'R', 'C', 0,
  /* 581 */ 'C', 'A', 'R', 'R', 'Y', 'R', 'C', 0,
  /* 589 */ 'G', '8', 'p', 'R', 'C', 0,
  /* 595 */ 'V', 'S', 'R', 'p', 'R', 'C', 0,
  0
};

extern const MCRegisterClass PPCMCRegisterClasses[] = {
  { VSSRC, VSSRCBits, 562, 64, sizeof(VSSRCBits), PPC::VSSRCRegClassID, 32, 1, true },
  { GPRC, GPRCBits, 316, 34, sizeof(GPRCBits), PPC::GPRCRegClassID, 32, 1, true },
  { GPRC_NOR0, GPRC_NOR0Bits, 9, 34, sizeof(GPRC_NOR0Bits), PPC::GPRC_NOR0RegClassID, 32, 1, true },
  { GPRC_and_GPRC_NOR0, GPRC_and_GPRC_NOR0Bits, 0, 33, sizeof(GPRC_and_GPRC_NOR0Bits), PPC::GPRC_and_GPRC_NOR0RegClassID, 32, 1, true },
  { CRBITRC, CRBITRCBits, 573, 32, sizeof(CRBITRCBits), PPC::CRBITRCRegClassID, 32, 1, true },
  { F4RC, F4RCBits, 146, 32, sizeof(F4RCBits), PPC::F4RCRegClassID, 32, 1, true },
  { CRRC, CRRCBits, 321, 8, sizeof(CRRCBits), PPC::CRRCRegClassID, 32, 1, true },
  { CARRYRC, CARRYRCBits, 581, 2, sizeof(CARRYRCBits), PPC::CARRYRCRegClassID, 32, -1, true },
  { CTRRC, CTRRCBits, 551, 1, sizeof(CTRRCBits), PPC::CTRRCRegClassID, 32, 1, false },
  { LRRC, LRRCBits, 326, 1, sizeof(LRRCBits), PPC::LRRCRegClassID, 32, 1, false },
  { VRSAVERC, VRSAVERCBits, 207, 1, sizeof(VRSAVERCBits), PPC::VRSAVERCRegClassID, 32, 1, true },
  { SPILLTOVSRRC, SPILLTOVSRRCBits, 353, 68, sizeof(SPILLTOVSRRCBits), PPC::SPILLTOVSRRCRegClassID, 64, 1, true },
  { VSFRC, VSFRCBits, 233, 64, sizeof(VSFRCBits), PPC::VSFRCRegClassID, 64, 1, true },
  { G8RC, G8RCBits, 183, 34, sizeof(G8RCBits), PPC::G8RCRegClassID, 64, 1, true },
  { G8RC_NOX0, G8RC_NOX0Bits, 90, 34, sizeof(G8RC_NOX0Bits), PPC::G8RC_NOX0RegClassID, 64, 1, true },
  { SPILLTOVSRRC_and_VSFRC, SPILLTOVSRRC_and_VSFRCBits, 216, 34, sizeof(SPILLTOVSRRC_and_VSFRCBits), PPC::SPILLTOVSRRC_and_VSFRCRegClassID, 64, 1, true },
  { G8RC_and_G8RC_NOX0, G8RC_and_G8RC_NOX0Bits, 81, 33, sizeof(G8RC_and_G8RC_NOX0Bits), PPC::G8RC_and_G8RC_NOX0RegClassID, 64, 1, true },
  { F8RC, F8RCBits, 178, 32, sizeof(F8RCBits), PPC::F8RCRegClassID, 64, 1, true },
  { SPERC, SPERCBits, 201, 32, sizeof(SPERCBits), PPC::SPERCRegClassID, 64, 1, true },
  { VFRC, VFRCBits, 278, 32, sizeof(VFRCBits), PPC::VFRCRegClassID, 64, 1, true },
  { SPERC_with_sub_32_in_GPRC_NOR0, SPERC_with_sub_32_in_GPRC_NOR0Bits, 19, 31, sizeof(SPERC_with_sub_32_in_GPRC_NOR0Bits), PPC::SPERC_with_sub_32_in_GPRC_NOR0RegClassID, 64, 1, true },
  { SPILLTOVSRRC_and_VFRC, SPILLTOVSRRC_and_VFRCBits, 261, 20, sizeof(SPILLTOVSRRC_and_VFRCBits), PPC::SPILLTOVSRRC_and_VFRCRegClassID, 64, 1, true },
  { SPILLTOVSRRC_and_F4RC, SPILLTOVSRRC_and_F4RCBits, 129, 14, sizeof(SPILLTOVSRRC_and_F4RCBits), PPC::SPILLTOVSRRC_and_F4RCRegClassID, 64, 1, true },
  { CTRRC8, CTRRC8Bits, 100, 1, sizeof(CTRRC8Bits), PPC::CTRRC8RegClassID, 64, 1, false },
  { LR8RC, LR8RCBits, 188, 1, sizeof(LR8RCBits), PPC::LR8RCRegClassID, 64, 1, false },
  { VSRC, VSRCBits, 568, 64, sizeof(VSRCBits), PPC::VSRCRegClassID, 128, 1, true },
  { VSRC_with_sub_64_in_SPILLTOVSRRC, VSRC_with_sub_64_in_SPILLTOVSRRCBits, 433, 34, sizeof(VSRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::VSRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 128, 1, true },
  { VRRC, VRRCBits, 557, 32, sizeof(VRRCBits), PPC::VRRCRegClassID, 128, 1, true },
  { VSLRC, VSLRCBits, 310, 32, sizeof(VSLRCBits), PPC::VSLRCRegClassID, 128, 1, true },
  { VRRC_with_sub_64_in_SPILLTOVSRRC, VRRC_with_sub_64_in_SPILLTOVSRRCBits, 400, 20, sizeof(VRRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::VRRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 128, 1, true },
  { G8pRC, G8pRCBits, 589, 16, sizeof(G8pRCBits), PPC::G8pRCRegClassID, 128, 1, true },
  { G8pRC_with_sub_32_in_GPRC_NOR0, G8pRC_with_sub_32_in_GPRC_NOR0Bits, 50, 15, sizeof(G8pRC_with_sub_32_in_GPRC_NOR0Bits), PPC::G8pRC_with_sub_32_in_GPRC_NOR0RegClassID, 128, 1, true },
  { VSLRC_with_sub_64_in_SPILLTOVSRRC, VSLRC_with_sub_64_in_SPILLTOVSRRCBits, 366, 14, sizeof(VSLRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::VSLRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 128, 1, true },
  { VSRpRC, VSRpRCBits, 595, 32, sizeof(VSRpRCBits), PPC::VSRpRCRegClassID, 256, 1, true },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC, VSRpRC_with_sub_64_in_SPILLTOVSRRCBits, 466, 17, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 256, 1, true },
  { VSRpRC_with_sub_64_in_F4RC, VSRpRC_with_sub_64_in_F4RCBits, 151, 16, sizeof(VSRpRC_with_sub_64_in_F4RCBits), PPC::VSRpRC_with_sub_64_in_F4RCRegClassID, 256, 1, true },
  { VSRpRC_with_sub_64_in_VFRC, VSRpRC_with_sub_64_in_VFRCBits, 283, 16, sizeof(VSRpRC_with_sub_64_in_VFRCBits), PPC::VSRpRC_with_sub_64_in_VFRCRegClassID, 256, 1, true },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC, VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits, 239, 10, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCBits), PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClassID, 256, 1, true },
  { VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC, VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits, 107, 7, sizeof(VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCBits), PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClassID, 256, 1, true },
  { ACCRC, ACCRCBits, 195, 8, sizeof(ACCRCBits), PPC::ACCRCRegClassID, 512, 1, true },
  { UACCRC, UACCRCBits, 194, 8, sizeof(UACCRCBits), PPC::UACCRCRegClassID, 512, 1, true },
  { ACCRC_with_sub_64_in_SPILLTOVSRRC, ACCRC_with_sub_64_in_SPILLTOVSRRCBits, 332, 4, sizeof(ACCRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::ACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 512, 1, true },
  { UACCRC_with_sub_64_in_SPILLTOVSRRC, UACCRC_with_sub_64_in_SPILLTOVSRRCBits, 331, 4, sizeof(UACCRC_with_sub_64_in_SPILLTOVSRRCBits), PPC::UACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID, 512, 1, true },
  { ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC, ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits, 502, 3, sizeof(ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits), PPC::ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID, 512, 1, true },
  { UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC, UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits, 501, 3, sizeof(UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCBits), PPC::UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID, 512, 1, true },
};

// PPC Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour0Dwarf2L[] = {
  { 0U, PPC::X0 },
  { 1U, PPC::X1 },
  { 2U, PPC::X2 },
  { 3U, PPC::X3 },
  { 4U, PPC::X4 },
  { 5U, PPC::X5 },
  { 6U, PPC::X6 },
  { 7U, PPC::X7 },
  { 8U, PPC::X8 },
  { 9U, PPC::X9 },
  { 10U, PPC::X10 },
  { 11U, PPC::X11 },
  { 12U, PPC::X12 },
  { 13U, PPC::X13 },
  { 14U, PPC::X14 },
  { 15U, PPC::X15 },
  { 16U, PPC::X16 },
  { 17U, PPC::X17 },
  { 18U, PPC::X18 },
  { 19U, PPC::X19 },
  { 20U, PPC::X20 },
  { 21U, PPC::X21 },
  { 22U, PPC::X22 },
  { 23U, PPC::X23 },
  { 24U, PPC::X24 },
  { 25U, PPC::X25 },
  { 26U, PPC::X26 },
  { 27U, PPC::X27 },
  { 28U, PPC::X28 },
  { 29U, PPC::X29 },
  { 30U, PPC::X30 },
  { 31U, PPC::X31 },
  { 32U, PPC::F0 },
  { 33U, PPC::F1 },
  { 34U, PPC::F2 },
  { 35U, PPC::F3 },
  { 36U, PPC::F4 },
  { 37U, PPC::F5 },
  { 38U, PPC::F6 },
  { 39U, PPC::F7 },
  { 40U, PPC::F8 },
  { 41U, PPC::F9 },
  { 42U, PPC::F10 },
  { 43U, PPC::F11 },
  { 44U, PPC::F12 },
  { 45U, PPC::F13 },
  { 46U, PPC::F14 },
  { 47U, PPC::F15 },
  { 48U, PPC::F16 },
  { 49U, PPC::F17 },
  { 50U, PPC::F18 },
  { 51U, PPC::F19 },
  { 52U, PPC::F20 },
  { 53U, PPC::F21 },
  { 54U, PPC::F22 },
  { 55U, PPC::F23 },
  { 56U, PPC::F24 },
  { 57U, PPC::F25 },
  { 58U, PPC::F26 },
  { 59U, PPC::F27 },
  { 60U, PPC::F28 },
  { 61U, PPC::F29 },
  { 62U, PPC::F30 },
  { 63U, PPC::F31 },
  { 65U, PPC::LR8 },
  { 66U, PPC::CTR8 },
  { 68U, PPC::CR0 },
  { 69U, PPC::CR1 },
  { 70U, PPC::CR2 },
  { 71U, PPC::CR3 },
  { 72U, PPC::CR4 },
  { 73U, PPC::CR5 },
  { 74U, PPC::CR6 },
  { 75U, PPC::CR7 },
  { 76U, PPC::XER },
  { 77U, PPC::VF0 },
  { 78U, PPC::VF1 },
  { 79U, PPC::VF2 },
  { 80U, PPC::VF3 },
  { 81U, PPC::VF4 },
  { 82U, PPC::VF5 },
  { 83U, PPC::VF6 },
  { 84U, PPC::VF7 },
  { 85U, PPC::VF8 },
  { 86U, PPC::VF9 },
  { 87U, PPC::VF10 },
  { 88U, PPC::VF11 },
  { 89U, PPC::VF12 },
  { 90U, PPC::VF13 },
  { 91U, PPC::VF14 },
  { 92U, PPC::VF15 },
  { 93U, PPC::VF16 },
  { 94U, PPC::VF17 },
  { 95U, PPC::VF18 },
  { 96U, PPC::VF19 },
  { 97U, PPC::VF20 },
  { 98U, PPC::VF21 },
  { 99U, PPC::VF22 },
  { 100U, PPC::VF23 },
  { 101U, PPC::VF24 },
  { 102U, PPC::VF25 },
  { 103U, PPC::VF26 },
  { 104U, PPC::VF27 },
  { 105U, PPC::VF28 },
  { 106U, PPC::VF29 },
  { 107U, PPC::VF30 },
  { 108U, PPC::VF31 },
  { 109U, PPC::VRSAVE },
  { 612U, PPC::SPEFSCR },
  { 1200U, PPC::S0 },
  { 1201U, PPC::S1 },
  { 1202U, PPC::S2 },
  { 1203U, PPC::S3 },
  { 1204U, PPC::S4 },
  { 1205U, PPC::S5 },
  { 1206U, PPC::S6 },
  { 1207U, PPC::S7 },
  { 1208U, PPC::S8 },
  { 1209U, PPC::S9 },
  { 1210U, PPC::S10 },
  { 1211U, PPC::S11 },
  { 1212U, PPC::S12 },
  { 1213U, PPC::S13 },
  { 1214U, PPC::S14 },
  { 1215U, PPC::S15 },
  { 1216U, PPC::S16 },
  { 1217U, PPC::S17 },
  { 1218U, PPC::S18 },
  { 1219U, PPC::S19 },
  { 1220U, PPC::S20 },
  { 1221U, PPC::S21 },
  { 1222U, PPC::S22 },
  { 1223U, PPC::S23 },
  { 1224U, PPC::S24 },
  { 1225U, PPC::S25 },
  { 1226U, PPC::S26 },
  { 1227U, PPC::S27 },
  { 1228U, PPC::S28 },
  { 1229U, PPC::S29 },
  { 1230U, PPC::S30 },
  { 1231U, PPC::S31 },
};
extern const unsigned PPCDwarfFlavour0Dwarf2LSize = array_lengthof(PPCDwarfFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour1Dwarf2L[] = {
  { 0U, PPC::R0 },
  { 1U, PPC::R1 },
  { 2U, PPC::R2 },
  { 3U, PPC::R3 },
  { 4U, PPC::R4 },
  { 5U, PPC::R5 },
  { 6U, PPC::R6 },
  { 7U, PPC::R7 },
  { 8U, PPC::R8 },
  { 9U, PPC::R9 },
  { 10U, PPC::R10 },
  { 11U, PPC::R11 },
  { 12U, PPC::R12 },
  { 13U, PPC::R13 },
  { 14U, PPC::R14 },
  { 15U, PPC::R15 },
  { 16U, PPC::R16 },
  { 17U, PPC::R17 },
  { 18U, PPC::R18 },
  { 19U, PPC::R19 },
  { 20U, PPC::R20 },
  { 21U, PPC::R21 },
  { 22U, PPC::R22 },
  { 23U, PPC::R23 },
  { 24U, PPC::R24 },
  { 25U, PPC::R25 },
  { 26U, PPC::R26 },
  { 27U, PPC::R27 },
  { 28U, PPC::R28 },
  { 29U, PPC::R29 },
  { 30U, PPC::R30 },
  { 31U, PPC::R31 },
  { 32U, PPC::F0 },
  { 33U, PPC::F1 },
  { 34U, PPC::F2 },
  { 35U, PPC::F3 },
  { 36U, PPC::F4 },
  { 37U, PPC::F5 },
  { 38U, PPC::F6 },
  { 39U, PPC::F7 },
  { 40U, PPC::F8 },
  { 41U, PPC::F9 },
  { 42U, PPC::F10 },
  { 43U, PPC::F11 },
  { 44U, PPC::F12 },
  { 45U, PPC::F13 },
  { 46U, PPC::F14 },
  { 47U, PPC::F15 },
  { 48U, PPC::F16 },
  { 49U, PPC::F17 },
  { 50U, PPC::F18 },
  { 51U, PPC::F19 },
  { 52U, PPC::F20 },
  { 53U, PPC::F21 },
  { 54U, PPC::F22 },
  { 55U, PPC::F23 },
  { 56U, PPC::F24 },
  { 57U, PPC::F25 },
  { 58U, PPC::F26 },
  { 59U, PPC::F27 },
  { 60U, PPC::F28 },
  { 61U, PPC::F29 },
  { 62U, PPC::F30 },
  { 63U, PPC::F31 },
  { 65U, PPC::LR },
  { 66U, PPC::CTR },
  { 68U, PPC::CR0 },
  { 69U, PPC::CR1 },
  { 70U, PPC::CR2 },
  { 71U, PPC::CR3 },
  { 72U, PPC::CR4 },
  { 73U, PPC::CR5 },
  { 74U, PPC::CR6 },
  { 75U, PPC::CR7 },
  { 77U, PPC::VF0 },
  { 78U, PPC::VF1 },
  { 79U, PPC::VF2 },
  { 80U, PPC::VF3 },
  { 81U, PPC::VF4 },
  { 82U, PPC::VF5 },
  { 83U, PPC::VF6 },
  { 84U, PPC::VF7 },
  { 85U, PPC::VF8 },
  { 86U, PPC::VF9 },
  { 87U, PPC::VF10 },
  { 88U, PPC::VF11 },
  { 89U, PPC::VF12 },
  { 90U, PPC::VF13 },
  { 91U, PPC::VF14 },
  { 92U, PPC::VF15 },
  { 93U, PPC::VF16 },
  { 94U, PPC::VF17 },
  { 95U, PPC::VF18 },
  { 96U, PPC::VF19 },
  { 97U, PPC::VF20 },
  { 98U, PPC::VF21 },
  { 99U, PPC::VF22 },
  { 100U, PPC::VF23 },
  { 101U, PPC::VF24 },
  { 102U, PPC::VF25 },
  { 103U, PPC::VF26 },
  { 104U, PPC::VF27 },
  { 105U, PPC::VF28 },
  { 106U, PPC::VF29 },
  { 107U, PPC::VF30 },
  { 108U, PPC::VF31 },
  { 112U, PPC::SPEFSCR },
  { 1200U, PPC::S0 },
  { 1201U, PPC::S1 },
  { 1202U, PPC::S2 },
  { 1203U, PPC::S3 },
  { 1204U, PPC::S4 },
  { 1205U, PPC::S5 },
  { 1206U, PPC::S6 },
  { 1207U, PPC::S7 },
  { 1208U, PPC::S8 },
  { 1209U, PPC::S9 },
  { 1210U, PPC::S10 },
  { 1211U, PPC::S11 },
  { 1212U, PPC::S12 },
  { 1213U, PPC::S13 },
  { 1214U, PPC::S14 },
  { 1215U, PPC::S15 },
  { 1216U, PPC::S16 },
  { 1217U, PPC::S17 },
  { 1218U, PPC::S18 },
  { 1219U, PPC::S19 },
  { 1220U, PPC::S20 },
  { 1221U, PPC::S21 },
  { 1222U, PPC::S22 },
  { 1223U, PPC::S23 },
  { 1224U, PPC::S24 },
  { 1225U, PPC::S25 },
  { 1226U, PPC::S26 },
  { 1227U, PPC::S27 },
  { 1228U, PPC::S28 },
  { 1229U, PPC::S29 },
  { 1230U, PPC::S30 },
  { 1231U, PPC::S31 },
};
extern const unsigned PPCDwarfFlavour1Dwarf2LSize = array_lengthof(PPCDwarfFlavour1Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour0Dwarf2L[] = {
  { 0U, PPC::X0 },
  { 1U, PPC::X1 },
  { 2U, PPC::X2 },
  { 3U, PPC::X3 },
  { 4U, PPC::X4 },
  { 5U, PPC::X5 },
  { 6U, PPC::X6 },
  { 7U, PPC::X7 },
  { 8U, PPC::X8 },
  { 9U, PPC::X9 },
  { 10U, PPC::X10 },
  { 11U, PPC::X11 },
  { 12U, PPC::X12 },
  { 13U, PPC::X13 },
  { 14U, PPC::X14 },
  { 15U, PPC::X15 },
  { 16U, PPC::X16 },
  { 17U, PPC::X17 },
  { 18U, PPC::X18 },
  { 19U, PPC::X19 },
  { 20U, PPC::X20 },
  { 21U, PPC::X21 },
  { 22U, PPC::X22 },
  { 23U, PPC::X23 },
  { 24U, PPC::X24 },
  { 25U, PPC::X25 },
  { 26U, PPC::X26 },
  { 27U, PPC::X27 },
  { 28U, PPC::X28 },
  { 29U, PPC::X29 },
  { 30U, PPC::X30 },
  { 31U, PPC::X31 },
  { 32U, PPC::F0 },
  { 33U, PPC::F1 },
  { 34U, PPC::F2 },
  { 35U, PPC::F3 },
  { 36U, PPC::F4 },
  { 37U, PPC::F5 },
  { 38U, PPC::F6 },
  { 39U, PPC::F7 },
  { 40U, PPC::F8 },
  { 41U, PPC::F9 },
  { 42U, PPC::F10 },
  { 43U, PPC::F11 },
  { 44U, PPC::F12 },
  { 45U, PPC::F13 },
  { 46U, PPC::F14 },
  { 47U, PPC::F15 },
  { 48U, PPC::F16 },
  { 49U, PPC::F17 },
  { 50U, PPC::F18 },
  { 51U, PPC::F19 },
  { 52U, PPC::F20 },
  { 53U, PPC::F21 },
  { 54U, PPC::F22 },
  { 55U, PPC::F23 },
  { 56U, PPC::F24 },
  { 57U, PPC::F25 },
  { 58U, PPC::F26 },
  { 59U, PPC::F27 },
  { 60U, PPC::F28 },
  { 61U, PPC::F29 },
  { 62U, PPC::F30 },
  { 63U, PPC::F31 },
  { 65U, PPC::LR8 },
  { 66U, PPC::CTR8 },
  { 68U, PPC::CR0 },
  { 69U, PPC::CR1 },
  { 70U, PPC::CR2 },
  { 71U, PPC::CR3 },
  { 72U, PPC::CR4 },
  { 73U, PPC::CR5 },
  { 74U, PPC::CR6 },
  { 75U, PPC::CR7 },
  { 76U, PPC::XER },
  { 77U, PPC::VF0 },
  { 78U, PPC::VF1 },
  { 79U, PPC::VF2 },
  { 80U, PPC::VF3 },
  { 81U, PPC::VF4 },
  { 82U, PPC::VF5 },
  { 83U, PPC::VF6 },
  { 84U, PPC::VF7 },
  { 85U, PPC::VF8 },
  { 86U, PPC::VF9 },
  { 87U, PPC::VF10 },
  { 88U, PPC::VF11 },
  { 89U, PPC::VF12 },
  { 90U, PPC::VF13 },
  { 91U, PPC::VF14 },
  { 92U, PPC::VF15 },
  { 93U, PPC::VF16 },
  { 94U, PPC::VF17 },
  { 95U, PPC::VF18 },
  { 96U, PPC::VF19 },
  { 97U, PPC::VF20 },
  { 98U, PPC::VF21 },
  { 99U, PPC::VF22 },
  { 100U, PPC::VF23 },
  { 101U, PPC::VF24 },
  { 102U, PPC::VF25 },
  { 103U, PPC::VF26 },
  { 104U, PPC::VF27 },
  { 105U, PPC::VF28 },
  { 106U, PPC::VF29 },
  { 107U, PPC::VF30 },
  { 108U, PPC::VF31 },
  { 109U, PPC::VRSAVE },
  { 612U, PPC::SPEFSCR },
  { 1200U, PPC::S0 },
  { 1201U, PPC::S1 },
  { 1202U, PPC::S2 },
  { 1203U, PPC::S3 },
  { 1204U, PPC::S4 },
  { 1205U, PPC::S5 },
  { 1206U, PPC::S6 },
  { 1207U, PPC::S7 },
  { 1208U, PPC::S8 },
  { 1209U, PPC::S9 },
  { 1210U, PPC::S10 },
  { 1211U, PPC::S11 },
  { 1212U, PPC::S12 },
  { 1213U, PPC::S13 },
  { 1214U, PPC::S14 },
  { 1215U, PPC::S15 },
  { 1216U, PPC::S16 },
  { 1217U, PPC::S17 },
  { 1218U, PPC::S18 },
  { 1219U, PPC::S19 },
  { 1220U, PPC::S20 },
  { 1221U, PPC::S21 },
  { 1222U, PPC::S22 },
  { 1223U, PPC::S23 },
  { 1224U, PPC::S24 },
  { 1225U, PPC::S25 },
  { 1226U, PPC::S26 },
  { 1227U, PPC::S27 },
  { 1228U, PPC::S28 },
  { 1229U, PPC::S29 },
  { 1230U, PPC::S30 },
  { 1231U, PPC::S31 },
};
extern const unsigned PPCEHFlavour0Dwarf2LSize = array_lengthof(PPCEHFlavour0Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour1Dwarf2L[] = {
  { 0U, PPC::R0 },
  { 1U, PPC::R1 },
  { 2U, PPC::R2 },
  { 3U, PPC::R3 },
  { 4U, PPC::R4 },
  { 5U, PPC::R5 },
  { 6U, PPC::R6 },
  { 7U, PPC::R7 },
  { 8U, PPC::R8 },
  { 9U, PPC::R9 },
  { 10U, PPC::R10 },
  { 11U, PPC::R11 },
  { 12U, PPC::R12 },
  { 13U, PPC::R13 },
  { 14U, PPC::R14 },
  { 15U, PPC::R15 },
  { 16U, PPC::R16 },
  { 17U, PPC::R17 },
  { 18U, PPC::R18 },
  { 19U, PPC::R19 },
  { 20U, PPC::R20 },
  { 21U, PPC::R21 },
  { 22U, PPC::R22 },
  { 23U, PPC::R23 },
  { 24U, PPC::R24 },
  { 25U, PPC::R25 },
  { 26U, PPC::R26 },
  { 27U, PPC::R27 },
  { 28U, PPC::R28 },
  { 29U, PPC::R29 },
  { 30U, PPC::R30 },
  { 31U, PPC::R31 },
  { 32U, PPC::F0 },
  { 33U, PPC::F1 },
  { 34U, PPC::F2 },
  { 35U, PPC::F3 },
  { 36U, PPC::F4 },
  { 37U, PPC::F5 },
  { 38U, PPC::F6 },
  { 39U, PPC::F7 },
  { 40U, PPC::F8 },
  { 41U, PPC::F9 },
  { 42U, PPC::F10 },
  { 43U, PPC::F11 },
  { 44U, PPC::F12 },
  { 45U, PPC::F13 },
  { 46U, PPC::F14 },
  { 47U, PPC::F15 },
  { 48U, PPC::F16 },
  { 49U, PPC::F17 },
  { 50U, PPC::F18 },
  { 51U, PPC::F19 },
  { 52U, PPC::F20 },
  { 53U, PPC::F21 },
  { 54U, PPC::F22 },
  { 55U, PPC::F23 },
  { 56U, PPC::F24 },
  { 57U, PPC::F25 },
  { 58U, PPC::F26 },
  { 59U, PPC::F27 },
  { 60U, PPC::F28 },
  { 61U, PPC::F29 },
  { 62U, PPC::F30 },
  { 63U, PPC::F31 },
  { 65U, PPC::LR },
  { 66U, PPC::CTR },
  { 68U, PPC::CR0 },
  { 69U, PPC::CR1 },
  { 70U, PPC::CR2 },
  { 71U, PPC::CR3 },
  { 72U, PPC::CR4 },
  { 73U, PPC::CR5 },
  { 74U, PPC::CR6 },
  { 75U, PPC::CR7 },
  { 77U, PPC::VF0 },
  { 78U, PPC::VF1 },
  { 79U, PPC::VF2 },
  { 80U, PPC::VF3 },
  { 81U, PPC::VF4 },
  { 82U, PPC::VF5 },
  { 83U, PPC::VF6 },
  { 84U, PPC::VF7 },
  { 85U, PPC::VF8 },
  { 86U, PPC::VF9 },
  { 87U, PPC::VF10 },
  { 88U, PPC::VF11 },
  { 89U, PPC::VF12 },
  { 90U, PPC::VF13 },
  { 91U, PPC::VF14 },
  { 92U, PPC::VF15 },
  { 93U, PPC::VF16 },
  { 94U, PPC::VF17 },
  { 95U, PPC::VF18 },
  { 96U, PPC::VF19 },
  { 97U, PPC::VF20 },
  { 98U, PPC::VF21 },
  { 99U, PPC::VF22 },
  { 100U, PPC::VF23 },
  { 101U, PPC::VF24 },
  { 102U, PPC::VF25 },
  { 103U, PPC::VF26 },
  { 104U, PPC::VF27 },
  { 105U, PPC::VF28 },
  { 106U, PPC::VF29 },
  { 107U, PPC::VF30 },
  { 108U, PPC::VF31 },
  { 112U, PPC::SPEFSCR },
  { 1200U, PPC::S0 },
  { 1201U, PPC::S1 },
  { 1202U, PPC::S2 },
  { 1203U, PPC::S3 },
  { 1204U, PPC::S4 },
  { 1205U, PPC::S5 },
  { 1206U, PPC::S6 },
  { 1207U, PPC::S7 },
  { 1208U, PPC::S8 },
  { 1209U, PPC::S9 },
  { 1210U, PPC::S10 },
  { 1211U, PPC::S11 },
  { 1212U, PPC::S12 },
  { 1213U, PPC::S13 },
  { 1214U, PPC::S14 },
  { 1215U, PPC::S15 },
  { 1216U, PPC::S16 },
  { 1217U, PPC::S17 },
  { 1218U, PPC::S18 },
  { 1219U, PPC::S19 },
  { 1220U, PPC::S20 },
  { 1221U, PPC::S21 },
  { 1222U, PPC::S22 },
  { 1223U, PPC::S23 },
  { 1224U, PPC::S24 },
  { 1225U, PPC::S25 },
  { 1226U, PPC::S26 },
  { 1227U, PPC::S27 },
  { 1228U, PPC::S28 },
  { 1229U, PPC::S29 },
  { 1230U, PPC::S30 },
  { 1231U, PPC::S31 },
};
extern const unsigned PPCEHFlavour1Dwarf2LSize = array_lengthof(PPCEHFlavour1Dwarf2L);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour0L2Dwarf[] = {
  { PPC::CARRY, 76U },
  { PPC::CTR, -2U },
  { PPC::LR, -2U },
  { PPC::SPEFSCR, 612U },
  { PPC::VRSAVE, 109U },
  { PPC::XER, 76U },
  { PPC::ZERO, -2U },
  { PPC::CR0, 68U },
  { PPC::CR1, 69U },
  { PPC::CR2, 70U },
  { PPC::CR3, 71U },
  { PPC::CR4, 72U },
  { PPC::CR5, 73U },
  { PPC::CR6, 74U },
  { PPC::CR7, 75U },
  { PPC::CTR8, 66U },
  { PPC::F0, 32U },
  { PPC::F1, 33U },
  { PPC::F2, 34U },
  { PPC::F3, 35U },
  { PPC::F4, 36U },
  { PPC::F5, 37U },
  { PPC::F6, 38U },
  { PPC::F7, 39U },
  { PPC::F8, 40U },
  { PPC::F9, 41U },
  { PPC::F10, 42U },
  { PPC::F11, 43U },
  { PPC::F12, 44U },
  { PPC::F13, 45U },
  { PPC::F14, 46U },
  { PPC::F15, 47U },
  { PPC::F16, 48U },
  { PPC::F17, 49U },
  { PPC::F18, 50U },
  { PPC::F19, 51U },
  { PPC::F20, 52U },
  { PPC::F21, 53U },
  { PPC::F22, 54U },
  { PPC::F23, 55U },
  { PPC::F24, 56U },
  { PPC::F25, 57U },
  { PPC::F26, 58U },
  { PPC::F27, 59U },
  { PPC::F28, 60U },
  { PPC::F29, 61U },
  { PPC::F30, 62U },
  { PPC::F31, 63U },
  { PPC::LR8, 65U },
  { PPC::R0, -2U },
  { PPC::R1, -2U },
  { PPC::R2, -2U },
  { PPC::R3, -2U },
  { PPC::R4, -2U },
  { PPC::R5, -2U },
  { PPC::R6, -2U },
  { PPC::R7, -2U },
  { PPC::R8, -2U },
  { PPC::R9, -2U },
  { PPC::R10, -2U },
  { PPC::R11, -2U },
  { PPC::R12, -2U },
  { PPC::R13, -2U },
  { PPC::R14, -2U },
  { PPC::R15, -2U },
  { PPC::R16, -2U },
  { PPC::R17, -2U },
  { PPC::R18, -2U },
  { PPC::R19, -2U },
  { PPC::R20, -2U },
  { PPC::R21, -2U },
  { PPC::R22, -2U },
  { PPC::R23, -2U },
  { PPC::R24, -2U },
  { PPC::R25, -2U },
  { PPC::R26, -2U },
  { PPC::R27, -2U },
  { PPC::R28, -2U },
  { PPC::R29, -2U },
  { PPC::R30, -2U },
  { PPC::R31, -2U },
  { PPC::S0, 1200U },
  { PPC::S1, 1201U },
  { PPC::S2, 1202U },
  { PPC::S3, 1203U },
  { PPC::S4, 1204U },
  { PPC::S5, 1205U },
  { PPC::S6, 1206U },
  { PPC::S7, 1207U },
  { PPC::S8, 1208U },
  { PPC::S9, 1209U },
  { PPC::S10, 1210U },
  { PPC::S11, 1211U },
  { PPC::S12, 1212U },
  { PPC::S13, 1213U },
  { PPC::S14, 1214U },
  { PPC::S15, 1215U },
  { PPC::S16, 1216U },
  { PPC::S17, 1217U },
  { PPC::S18, 1218U },
  { PPC::S19, 1219U },
  { PPC::S20, 1220U },
  { PPC::S21, 1221U },
  { PPC::S22, 1222U },
  { PPC::S23, 1223U },
  { PPC::S24, 1224U },
  { PPC::S25, 1225U },
  { PPC::S26, 1226U },
  { PPC::S27, 1227U },
  { PPC::S28, 1228U },
  { PPC::S29, 1229U },
  { PPC::S30, 1230U },
  { PPC::S31, 1231U },
  { PPC::V0, 77U },
  { PPC::V1, 78U },
  { PPC::V2, 79U },
  { PPC::V3, 80U },
  { PPC::V4, 81U },
  { PPC::V5, 82U },
  { PPC::V6, 83U },
  { PPC::V7, 84U },
  { PPC::V8, 85U },
  { PPC::V9, 86U },
  { PPC::V10, 87U },
  { PPC::V11, 88U },
  { PPC::V12, 89U },
  { PPC::V13, 90U },
  { PPC::V14, 91U },
  { PPC::V15, 92U },
  { PPC::V16, 93U },
  { PPC::V17, 94U },
  { PPC::V18, 95U },
  { PPC::V19, 96U },
  { PPC::V20, 97U },
  { PPC::V21, 98U },
  { PPC::V22, 99U },
  { PPC::V23, 100U },
  { PPC::V24, 101U },
  { PPC::V25, 102U },
  { PPC::V26, 103U },
  { PPC::V27, 104U },
  { PPC::V28, 105U },
  { PPC::V29, 106U },
  { PPC::V30, 107U },
  { PPC::V31, 108U },
  { PPC::VF0, 77U },
  { PPC::VF1, 78U },
  { PPC::VF2, 79U },
  { PPC::VF3, 80U },
  { PPC::VF4, 81U },
  { PPC::VF5, 82U },
  { PPC::VF6, 83U },
  { PPC::VF7, 84U },
  { PPC::VF8, 85U },
  { PPC::VF9, 86U },
  { PPC::VF10, 87U },
  { PPC::VF11, 88U },
  { PPC::VF12, 89U },
  { PPC::VF13, 90U },
  { PPC::VF14, 91U },
  { PPC::VF15, 92U },
  { PPC::VF16, 93U },
  { PPC::VF17, 94U },
  { PPC::VF18, 95U },
  { PPC::VF19, 96U },
  { PPC::VF20, 97U },
  { PPC::VF21, 98U },
  { PPC::VF22, 99U },
  { PPC::VF23, 100U },
  { PPC::VF24, 101U },
  { PPC::VF25, 102U },
  { PPC::VF26, 103U },
  { PPC::VF27, 104U },
  { PPC::VF28, 105U },
  { PPC::VF29, 106U },
  { PPC::VF30, 107U },
  { PPC::VF31, 108U },
  { PPC::VSL0, 32U },
  { PPC::VSL1, 33U },
  { PPC::VSL2, 34U },
  { PPC::VSL3, 35U },
  { PPC::VSL4, 36U },
  { PPC::VSL5, 37U },
  { PPC::VSL6, 38U },
  { PPC::VSL7, 39U },
  { PPC::VSL8, 40U },
  { PPC::VSL9, 41U },
  { PPC::VSL10, 42U },
  { PPC::VSL11, 43U },
  { PPC::VSL12, 44U },
  { PPC::VSL13, 45U },
  { PPC::VSL14, 46U },
  { PPC::VSL15, 47U },
  { PPC::VSL16, 48U },
  { PPC::VSL17, 49U },
  { PPC::VSL18, 50U },
  { PPC::VSL19, 51U },
  { PPC::VSL20, 52U },
  { PPC::VSL21, 53U },
  { PPC::VSL22, 54U },
  { PPC::VSL23, 55U },
  { PPC::VSL24, 56U },
  { PPC::VSL25, 57U },
  { PPC::VSL26, 58U },
  { PPC::VSL27, 59U },
  { PPC::VSL28, 60U },
  { PPC::VSL29, 61U },
  { PPC::VSL30, 62U },
  { PPC::VSL31, 63U },
  { PPC::X0, 0U },
  { PPC::X1, 1U },
  { PPC::X2, 2U },
  { PPC::X3, 3U },
  { PPC::X4, 4U },
  { PPC::X5, 5U },
  { PPC::X6, 6U },
  { PPC::X7, 7U },
  { PPC::X8, 8U },
  { PPC::X9, 9U },
  { PPC::X10, 10U },
  { PPC::X11, 11U },
  { PPC::X12, 12U },
  { PPC::X13, 13U },
  { PPC::X14, 14U },
  { PPC::X15, 15U },
  { PPC::X16, 16U },
  { PPC::X17, 17U },
  { PPC::X18, 18U },
  { PPC::X19, 19U },
  { PPC::X20, 20U },
  { PPC::X21, 21U },
  { PPC::X22, 22U },
  { PPC::X23, 23U },
  { PPC::X24, 24U },
  { PPC::X25, 25U },
  { PPC::X26, 26U },
  { PPC::X27, 27U },
  { PPC::X28, 28U },
  { PPC::X29, 29U },
  { PPC::X30, 30U },
  { PPC::X31, 31U },
  { PPC::ZERO8, 0U },
};
extern const unsigned PPCDwarfFlavour0L2DwarfSize = array_lengthof(PPCDwarfFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour1L2Dwarf[] = {
  { PPC::CTR, 66U },
  { PPC::LR, 65U },
  { PPC::SPEFSCR, 112U },
  { PPC::ZERO, 0U },
  { PPC::CR0, 68U },
  { PPC::CR1, 69U },
  { PPC::CR2, 70U },
  { PPC::CR3, 71U },
  { PPC::CR4, 72U },
  { PPC::CR5, 73U },
  { PPC::CR6, 74U },
  { PPC::CR7, 75U },
  { PPC::CTR8, -2U },
  { PPC::F0, 32U },
  { PPC::F1, 33U },
  { PPC::F2, 34U },
  { PPC::F3, 35U },
  { PPC::F4, 36U },
  { PPC::F5, 37U },
  { PPC::F6, 38U },
  { PPC::F7, 39U },
  { PPC::F8, 40U },
  { PPC::F9, 41U },
  { PPC::F10, 42U },
  { PPC::F11, 43U },
  { PPC::F12, 44U },
  { PPC::F13, 45U },
  { PPC::F14, 46U },
  { PPC::F15, 47U },
  { PPC::F16, 48U },
  { PPC::F17, 49U },
  { PPC::F18, 50U },
  { PPC::F19, 51U },
  { PPC::F20, 52U },
  { PPC::F21, 53U },
  { PPC::F22, 54U },
  { PPC::F23, 55U },
  { PPC::F24, 56U },
  { PPC::F25, 57U },
  { PPC::F26, 58U },
  { PPC::F27, 59U },
  { PPC::F28, 60U },
  { PPC::F29, 61U },
  { PPC::F30, 62U },
  { PPC::F31, 63U },
  { PPC::LR8, -2U },
  { PPC::R0, 0U },
  { PPC::R1, 1U },
  { PPC::R2, 2U },
  { PPC::R3, 3U },
  { PPC::R4, 4U },
  { PPC::R5, 5U },
  { PPC::R6, 6U },
  { PPC::R7, 7U },
  { PPC::R8, 8U },
  { PPC::R9, 9U },
  { PPC::R10, 10U },
  { PPC::R11, 11U },
  { PPC::R12, 12U },
  { PPC::R13, 13U },
  { PPC::R14, 14U },
  { PPC::R15, 15U },
  { PPC::R16, 16U },
  { PPC::R17, 17U },
  { PPC::R18, 18U },
  { PPC::R19, 19U },
  { PPC::R20, 20U },
  { PPC::R21, 21U },
  { PPC::R22, 22U },
  { PPC::R23, 23U },
  { PPC::R24, 24U },
  { PPC::R25, 25U },
  { PPC::R26, 26U },
  { PPC::R27, 27U },
  { PPC::R28, 28U },
  { PPC::R29, 29U },
  { PPC::R30, 30U },
  { PPC::R31, 31U },
  { PPC::S0, 1200U },
  { PPC::S1, 1201U },
  { PPC::S2, 1202U },
  { PPC::S3, 1203U },
  { PPC::S4, 1204U },
  { PPC::S5, 1205U },
  { PPC::S6, 1206U },
  { PPC::S7, 1207U },
  { PPC::S8, 1208U },
  { PPC::S9, 1209U },
  { PPC::S10, 1210U },
  { PPC::S11, 1211U },
  { PPC::S12, 1212U },
  { PPC::S13, 1213U },
  { PPC::S14, 1214U },
  { PPC::S15, 1215U },
  { PPC::S16, 1216U },
  { PPC::S17, 1217U },
  { PPC::S18, 1218U },
  { PPC::S19, 1219U },
  { PPC::S20, 1220U },
  { PPC::S21, 1221U },
  { PPC::S22, 1222U },
  { PPC::S23, 1223U },
  { PPC::S24, 1224U },
  { PPC::S25, 1225U },
  { PPC::S26, 1226U },
  { PPC::S27, 1227U },
  { PPC::S28, 1228U },
  { PPC::S29, 1229U },
  { PPC::S30, 1230U },
  { PPC::S31, 1231U },
  { PPC::V0, 77U },
  { PPC::V1, 78U },
  { PPC::V2, 79U },
  { PPC::V3, 80U },
  { PPC::V4, 81U },
  { PPC::V5, 82U },
  { PPC::V6, 83U },
  { PPC::V7, 84U },
  { PPC::V8, 85U },
  { PPC::V9, 86U },
  { PPC::V10, 87U },
  { PPC::V11, 88U },
  { PPC::V12, 89U },
  { PPC::V13, 90U },
  { PPC::V14, 91U },
  { PPC::V15, 92U },
  { PPC::V16, 93U },
  { PPC::V17, 94U },
  { PPC::V18, 95U },
  { PPC::V19, 96U },
  { PPC::V20, 97U },
  { PPC::V21, 98U },
  { PPC::V22, 99U },
  { PPC::V23, 100U },
  { PPC::V24, 101U },
  { PPC::V25, 102U },
  { PPC::V26, 103U },
  { PPC::V27, 104U },
  { PPC::V28, 105U },
  { PPC::V29, 106U },
  { PPC::V30, 107U },
  { PPC::V31, 108U },
  { PPC::VF0, 77U },
  { PPC::VF1, 78U },
  { PPC::VF2, 79U },
  { PPC::VF3, 80U },
  { PPC::VF4, 81U },
  { PPC::VF5, 82U },
  { PPC::VF6, 83U },
  { PPC::VF7, 84U },
  { PPC::VF8, 85U },
  { PPC::VF9, 86U },
  { PPC::VF10, 87U },
  { PPC::VF11, 88U },
  { PPC::VF12, 89U },
  { PPC::VF13, 90U },
  { PPC::VF14, 91U },
  { PPC::VF15, 92U },
  { PPC::VF16, 93U },
  { PPC::VF17, 94U },
  { PPC::VF18, 95U },
  { PPC::VF19, 96U },
  { PPC::VF20, 97U },
  { PPC::VF21, 98U },
  { PPC::VF22, 99U },
  { PPC::VF23, 100U },
  { PPC::VF24, 101U },
  { PPC::VF25, 102U },
  { PPC::VF26, 103U },
  { PPC::VF27, 104U },
  { PPC::VF28, 105U },
  { PPC::VF29, 106U },
  { PPC::VF30, 107U },
  { PPC::VF31, 108U },
  { PPC::VSL0, 32U },
  { PPC::VSL1, 33U },
  { PPC::VSL2, 34U },
  { PPC::VSL3, 35U },
  { PPC::VSL4, 36U },
  { PPC::VSL5, 37U },
  { PPC::VSL6, 38U },
  { PPC::VSL7, 39U },
  { PPC::VSL8, 40U },
  { PPC::VSL9, 41U },
  { PPC::VSL10, 42U },
  { PPC::VSL11, 43U },
  { PPC::VSL12, 44U },
  { PPC::VSL13, 45U },
  { PPC::VSL14, 46U },
  { PPC::VSL15, 47U },
  { PPC::VSL16, 48U },
  { PPC::VSL17, 49U },
  { PPC::VSL18, 50U },
  { PPC::VSL19, 51U },
  { PPC::VSL20, 52U },
  { PPC::VSL21, 53U },
  { PPC::VSL22, 54U },
  { PPC::VSL23, 55U },
  { PPC::VSL24, 56U },
  { PPC::VSL25, 57U },
  { PPC::VSL26, 58U },
  { PPC::VSL27, 59U },
  { PPC::VSL28, 60U },
  { PPC::VSL29, 61U },
  { PPC::VSL30, 62U },
  { PPC::VSL31, 63U },
  { PPC::X0, -2U },
  { PPC::X1, -2U },
  { PPC::X2, -2U },
  { PPC::X3, -2U },
  { PPC::X4, -2U },
  { PPC::X5, -2U },
  { PPC::X6, -2U },
  { PPC::X7, -2U },
  { PPC::X8, -2U },
  { PPC::X9, -2U },
  { PPC::X10, -2U },
  { PPC::X11, -2U },
  { PPC::X12, -2U },
  { PPC::X13, -2U },
  { PPC::X14, -2U },
  { PPC::X15, -2U },
  { PPC::X16, -2U },
  { PPC::X17, -2U },
  { PPC::X18, -2U },
  { PPC::X19, -2U },
  { PPC::X20, -2U },
  { PPC::X21, -2U },
  { PPC::X22, -2U },
  { PPC::X23, -2U },
  { PPC::X24, -2U },
  { PPC::X25, -2U },
  { PPC::X26, -2U },
  { PPC::X27, -2U },
  { PPC::X28, -2U },
  { PPC::X29, -2U },
  { PPC::X30, -2U },
  { PPC::X31, -2U },
  { PPC::ZERO8, -2U },
};
extern const unsigned PPCDwarfFlavour1L2DwarfSize = array_lengthof(PPCDwarfFlavour1L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour0L2Dwarf[] = {
  { PPC::CARRY, 76U },
  { PPC::CTR, -2U },
  { PPC::LR, -2U },
  { PPC::SPEFSCR, 612U },
  { PPC::VRSAVE, 109U },
  { PPC::XER, 76U },
  { PPC::ZERO, -2U },
  { PPC::CR0, 68U },
  { PPC::CR1, 69U },
  { PPC::CR2, 70U },
  { PPC::CR3, 71U },
  { PPC::CR4, 72U },
  { PPC::CR5, 73U },
  { PPC::CR6, 74U },
  { PPC::CR7, 75U },
  { PPC::CTR8, 66U },
  { PPC::F0, 32U },
  { PPC::F1, 33U },
  { PPC::F2, 34U },
  { PPC::F3, 35U },
  { PPC::F4, 36U },
  { PPC::F5, 37U },
  { PPC::F6, 38U },
  { PPC::F7, 39U },
  { PPC::F8, 40U },
  { PPC::F9, 41U },
  { PPC::F10, 42U },
  { PPC::F11, 43U },
  { PPC::F12, 44U },
  { PPC::F13, 45U },
  { PPC::F14, 46U },
  { PPC::F15, 47U },
  { PPC::F16, 48U },
  { PPC::F17, 49U },
  { PPC::F18, 50U },
  { PPC::F19, 51U },
  { PPC::F20, 52U },
  { PPC::F21, 53U },
  { PPC::F22, 54U },
  { PPC::F23, 55U },
  { PPC::F24, 56U },
  { PPC::F25, 57U },
  { PPC::F26, 58U },
  { PPC::F27, 59U },
  { PPC::F28, 60U },
  { PPC::F29, 61U },
  { PPC::F30, 62U },
  { PPC::F31, 63U },
  { PPC::LR8, 65U },
  { PPC::R0, -2U },
  { PPC::R1, -2U },
  { PPC::R2, -2U },
  { PPC::R3, -2U },
  { PPC::R4, -2U },
  { PPC::R5, -2U },
  { PPC::R6, -2U },
  { PPC::R7, -2U },
  { PPC::R8, -2U },
  { PPC::R9, -2U },
  { PPC::R10, -2U },
  { PPC::R11, -2U },
  { PPC::R12, -2U },
  { PPC::R13, -2U },
  { PPC::R14, -2U },
  { PPC::R15, -2U },
  { PPC::R16, -2U },
  { PPC::R17, -2U },
  { PPC::R18, -2U },
  { PPC::R19, -2U },
  { PPC::R20, -2U },
  { PPC::R21, -2U },
  { PPC::R22, -2U },
  { PPC::R23, -2U },
  { PPC::R24, -2U },
  { PPC::R25, -2U },
  { PPC::R26, -2U },
  { PPC::R27, -2U },
  { PPC::R28, -2U },
  { PPC::R29, -2U },
  { PPC::R30, -2U },
  { PPC::R31, -2U },
  { PPC::S0, 1200U },
  { PPC::S1, 1201U },
  { PPC::S2, 1202U },
  { PPC::S3, 1203U },
  { PPC::S4, 1204U },
  { PPC::S5, 1205U },
  { PPC::S6, 1206U },
  { PPC::S7, 1207U },
  { PPC::S8, 1208U },
  { PPC::S9, 1209U },
  { PPC::S10, 1210U },
  { PPC::S11, 1211U },
  { PPC::S12, 1212U },
  { PPC::S13, 1213U },
  { PPC::S14, 1214U },
  { PPC::S15, 1215U },
  { PPC::S16, 1216U },
  { PPC::S17, 1217U },
  { PPC::S18, 1218U },
  { PPC::S19, 1219U },
  { PPC::S20, 1220U },
  { PPC::S21, 1221U },
  { PPC::S22, 1222U },
  { PPC::S23, 1223U },
  { PPC::S24, 1224U },
  { PPC::S25, 1225U },
  { PPC::S26, 1226U },
  { PPC::S27, 1227U },
  { PPC::S28, 1228U },
  { PPC::S29, 1229U },
  { PPC::S30, 1230U },
  { PPC::S31, 1231U },
  { PPC::V0, 77U },
  { PPC::V1, 78U },
  { PPC::V2, 79U },
  { PPC::V3, 80U },
  { PPC::V4, 81U },
  { PPC::V5, 82U },
  { PPC::V6, 83U },
  { PPC::V7, 84U },
  { PPC::V8, 85U },
  { PPC::V9, 86U },
  { PPC::V10, 87U },
  { PPC::V11, 88U },
  { PPC::V12, 89U },
  { PPC::V13, 90U },
  { PPC::V14, 91U },
  { PPC::V15, 92U },
  { PPC::V16, 93U },
  { PPC::V17, 94U },
  { PPC::V18, 95U },
  { PPC::V19, 96U },
  { PPC::V20, 97U },
  { PPC::V21, 98U },
  { PPC::V22, 99U },
  { PPC::V23, 100U },
  { PPC::V24, 101U },
  { PPC::V25, 102U },
  { PPC::V26, 103U },
  { PPC::V27, 104U },
  { PPC::V28, 105U },
  { PPC::V29, 106U },
  { PPC::V30, 107U },
  { PPC::V31, 108U },
  { PPC::VF0, 77U },
  { PPC::VF1, 78U },
  { PPC::VF2, 79U },
  { PPC::VF3, 80U },
  { PPC::VF4, 81U },
  { PPC::VF5, 82U },
  { PPC::VF6, 83U },
  { PPC::VF7, 84U },
  { PPC::VF8, 85U },
  { PPC::VF9, 86U },
  { PPC::VF10, 87U },
  { PPC::VF11, 88U },
  { PPC::VF12, 89U },
  { PPC::VF13, 90U },
  { PPC::VF14, 91U },
  { PPC::VF15, 92U },
  { PPC::VF16, 93U },
  { PPC::VF17, 94U },
  { PPC::VF18, 95U },
  { PPC::VF19, 96U },
  { PPC::VF20, 97U },
  { PPC::VF21, 98U },
  { PPC::VF22, 99U },
  { PPC::VF23, 100U },
  { PPC::VF24, 101U },
  { PPC::VF25, 102U },
  { PPC::VF26, 103U },
  { PPC::VF27, 104U },
  { PPC::VF28, 105U },
  { PPC::VF29, 106U },
  { PPC::VF30, 107U },
  { PPC::VF31, 108U },
  { PPC::VSL0, 32U },
  { PPC::VSL1, 33U },
  { PPC::VSL2, 34U },
  { PPC::VSL3, 35U },
  { PPC::VSL4, 36U },
  { PPC::VSL5, 37U },
  { PPC::VSL6, 38U },
  { PPC::VSL7, 39U },
  { PPC::VSL8, 40U },
  { PPC::VSL9, 41U },
  { PPC::VSL10, 42U },
  { PPC::VSL11, 43U },
  { PPC::VSL12, 44U },
  { PPC::VSL13, 45U },
  { PPC::VSL14, 46U },
  { PPC::VSL15, 47U },
  { PPC::VSL16, 48U },
  { PPC::VSL17, 49U },
  { PPC::VSL18, 50U },
  { PPC::VSL19, 51U },
  { PPC::VSL20, 52U },
  { PPC::VSL21, 53U },
  { PPC::VSL22, 54U },
  { PPC::VSL23, 55U },
  { PPC::VSL24, 56U },
  { PPC::VSL25, 57U },
  { PPC::VSL26, 58U },
  { PPC::VSL27, 59U },
  { PPC::VSL28, 60U },
  { PPC::VSL29, 61U },
  { PPC::VSL30, 62U },
  { PPC::VSL31, 63U },
  { PPC::X0, 0U },
  { PPC::X1, 1U },
  { PPC::X2, 2U },
  { PPC::X3, 3U },
  { PPC::X4, 4U },
  { PPC::X5, 5U },
  { PPC::X6, 6U },
  { PPC::X7, 7U },
  { PPC::X8, 8U },
  { PPC::X9, 9U },
  { PPC::X10, 10U },
  { PPC::X11, 11U },
  { PPC::X12, 12U },
  { PPC::X13, 13U },
  { PPC::X14, 14U },
  { PPC::X15, 15U },
  { PPC::X16, 16U },
  { PPC::X17, 17U },
  { PPC::X18, 18U },
  { PPC::X19, 19U },
  { PPC::X20, 20U },
  { PPC::X21, 21U },
  { PPC::X22, 22U },
  { PPC::X23, 23U },
  { PPC::X24, 24U },
  { PPC::X25, 25U },
  { PPC::X26, 26U },
  { PPC::X27, 27U },
  { PPC::X28, 28U },
  { PPC::X29, 29U },
  { PPC::X30, 30U },
  { PPC::X31, 31U },
  { PPC::ZERO8, 0U },
};
extern const unsigned PPCEHFlavour0L2DwarfSize = array_lengthof(PPCEHFlavour0L2Dwarf);

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour1L2Dwarf[] = {
  { PPC::CTR, 66U },
  { PPC::LR, 65U },
  { PPC::SPEFSCR, 112U },
  { PPC::ZERO, 0U },
  { PPC::CR0, 68U },
  { PPC::CR1, 69U },
  { PPC::CR2, 70U },
  { PPC::CR3, 71U },
  { PPC::CR4, 72U },
  { PPC::CR5, 73U },
  { PPC::CR6, 74U },
  { PPC::CR7, 75U },
  { PPC::CTR8, -2U },
  { PPC::F0, 32U },
  { PPC::F1, 33U },
  { PPC::F2, 34U },
  { PPC::F3, 35U },
  { PPC::F4, 36U },
  { PPC::F5, 37U },
  { PPC::F6, 38U },
  { PPC::F7, 39U },
  { PPC::F8, 40U },
  { PPC::F9, 41U },
  { PPC::F10, 42U },
  { PPC::F11, 43U },
  { PPC::F12, 44U },
  { PPC::F13, 45U },
  { PPC::F14, 46U },
  { PPC::F15, 47U },
  { PPC::F16, 48U },
  { PPC::F17, 49U },
  { PPC::F18, 50U },
  { PPC::F19, 51U },
  { PPC::F20, 52U },
  { PPC::F21, 53U },
  { PPC::F22, 54U },
  { PPC::F23, 55U },
  { PPC::F24, 56U },
  { PPC::F25, 57U },
  { PPC::F26, 58U },
  { PPC::F27, 59U },
  { PPC::F28, 60U },
  { PPC::F29, 61U },
  { PPC::F30, 62U },
  { PPC::F31, 63U },
  { PPC::LR8, -2U },
  { PPC::R0, 0U },
  { PPC::R1, 1U },
  { PPC::R2, 2U },
  { PPC::R3, 3U },
  { PPC::R4, 4U },
  { PPC::R5, 5U },
  { PPC::R6, 6U },
  { PPC::R7, 7U },
  { PPC::R8, 8U },
  { PPC::R9, 9U },
  { PPC::R10, 10U },
  { PPC::R11, 11U },
  { PPC::R12, 12U },
  { PPC::R13, 13U },
  { PPC::R14, 14U },
  { PPC::R15, 15U },
  { PPC::R16, 16U },
  { PPC::R17, 17U },
  { PPC::R18, 18U },
  { PPC::R19, 19U },
  { PPC::R20, 20U },
  { PPC::R21, 21U },
  { PPC::R22, 22U },
  { PPC::R23, 23U },
  { PPC::R24, 24U },
  { PPC::R25, 25U },
  { PPC::R26, 26U },
  { PPC::R27, 27U },
  { PPC::R28, 28U },
  { PPC::R29, 29U },
  { PPC::R30, 30U },
  { PPC::R31, 31U },
  { PPC::S0, 1200U },
  { PPC::S1, 1201U },
  { PPC::S2, 1202U },
  { PPC::S3, 1203U },
  { PPC::S4, 1204U },
  { PPC::S5, 1205U },
  { PPC::S6, 1206U },
  { PPC::S7, 1207U },
  { PPC::S8, 1208U },
  { PPC::S9, 1209U },
  { PPC::S10, 1210U },
  { PPC::S11, 1211U },
  { PPC::S12, 1212U },
  { PPC::S13, 1213U },
  { PPC::S14, 1214U },
  { PPC::S15, 1215U },
  { PPC::S16, 1216U },
  { PPC::S17, 1217U },
  { PPC::S18, 1218U },
  { PPC::S19, 1219U },
  { PPC::S20, 1220U },
  { PPC::S21, 1221U },
  { PPC::S22, 1222U },
  { PPC::S23, 1223U },
  { PPC::S24, 1224U },
  { PPC::S25, 1225U },
  { PPC::S26, 1226U },
  { PPC::S27, 1227U },
  { PPC::S28, 1228U },
  { PPC::S29, 1229U },
  { PPC::S30, 1230U },
  { PPC::S31, 1231U },
  { PPC::V0, 77U },
  { PPC::V1, 78U },
  { PPC::V2, 79U },
  { PPC::V3, 80U },
  { PPC::V4, 81U },
  { PPC::V5, 82U },
  { PPC::V6, 83U },
  { PPC::V7, 84U },
  { PPC::V8, 85U },
  { PPC::V9, 86U },
  { PPC::V10, 87U },
  { PPC::V11, 88U },
  { PPC::V12, 89U },
  { PPC::V13, 90U },
  { PPC::V14, 91U },
  { PPC::V15, 92U },
  { PPC::V16, 93U },
  { PPC::V17, 94U },
  { PPC::V18, 95U },
  { PPC::V19, 96U },
  { PPC::V20, 97U },
  { PPC::V21, 98U },
  { PPC::V22, 99U },
  { PPC::V23, 100U },
  { PPC::V24, 101U },
  { PPC::V25, 102U },
  { PPC::V26, 103U },
  { PPC::V27, 104U },
  { PPC::V28, 105U },
  { PPC::V29, 106U },
  { PPC::V30, 107U },
  { PPC::V31, 108U },
  { PPC::VF0, 77U },
  { PPC::VF1, 78U },
  { PPC::VF2, 79U },
  { PPC::VF3, 80U },
  { PPC::VF4, 81U },
  { PPC::VF5, 82U },
  { PPC::VF6, 83U },
  { PPC::VF7, 84U },
  { PPC::VF8, 85U },
  { PPC::VF9, 86U },
  { PPC::VF10, 87U },
  { PPC::VF11, 88U },
  { PPC::VF12, 89U },
  { PPC::VF13, 90U },
  { PPC::VF14, 91U },
  { PPC::VF15, 92U },
  { PPC::VF16, 93U },
  { PPC::VF17, 94U },
  { PPC::VF18, 95U },
  { PPC::VF19, 96U },
  { PPC::VF20, 97U },
  { PPC::VF21, 98U },
  { PPC::VF22, 99U },
  { PPC::VF23, 100U },
  { PPC::VF24, 101U },
  { PPC::VF25, 102U },
  { PPC::VF26, 103U },
  { PPC::VF27, 104U },
  { PPC::VF28, 105U },
  { PPC::VF29, 106U },
  { PPC::VF30, 107U },
  { PPC::VF31, 108U },
  { PPC::VSL0, 32U },
  { PPC::VSL1, 33U },
  { PPC::VSL2, 34U },
  { PPC::VSL3, 35U },
  { PPC::VSL4, 36U },
  { PPC::VSL5, 37U },
  { PPC::VSL6, 38U },
  { PPC::VSL7, 39U },
  { PPC::VSL8, 40U },
  { PPC::VSL9, 41U },
  { PPC::VSL10, 42U },
  { PPC::VSL11, 43U },
  { PPC::VSL12, 44U },
  { PPC::VSL13, 45U },
  { PPC::VSL14, 46U },
  { PPC::VSL15, 47U },
  { PPC::VSL16, 48U },
  { PPC::VSL17, 49U },
  { PPC::VSL18, 50U },
  { PPC::VSL19, 51U },
  { PPC::VSL20, 52U },
  { PPC::VSL21, 53U },
  { PPC::VSL22, 54U },
  { PPC::VSL23, 55U },
  { PPC::VSL24, 56U },
  { PPC::VSL25, 57U },
  { PPC::VSL26, 58U },
  { PPC::VSL27, 59U },
  { PPC::VSL28, 60U },
  { PPC::VSL29, 61U },
  { PPC::VSL30, 62U },
  { PPC::VSL31, 63U },
  { PPC::X0, -2U },
  { PPC::X1, -2U },
  { PPC::X2, -2U },
  { PPC::X3, -2U },
  { PPC::X4, -2U },
  { PPC::X5, -2U },
  { PPC::X6, -2U },
  { PPC::X7, -2U },
  { PPC::X8, -2U },
  { PPC::X9, -2U },
  { PPC::X10, -2U },
  { PPC::X11, -2U },
  { PPC::X12, -2U },
  { PPC::X13, -2U },
  { PPC::X14, -2U },
  { PPC::X15, -2U },
  { PPC::X16, -2U },
  { PPC::X17, -2U },
  { PPC::X18, -2U },
  { PPC::X19, -2U },
  { PPC::X20, -2U },
  { PPC::X21, -2U },
  { PPC::X22, -2U },
  { PPC::X23, -2U },
  { PPC::X24, -2U },
  { PPC::X25, -2U },
  { PPC::X26, -2U },
  { PPC::X27, -2U },
  { PPC::X28, -2U },
  { PPC::X29, -2U },
  { PPC::X30, -2U },
  { PPC::X31, -2U },
  { PPC::ZERO8, -2U },
};
extern const unsigned PPCEHFlavour1L2DwarfSize = array_lengthof(PPCEHFlavour1L2Dwarf);

extern const uint16_t PPCRegEncodingTable[] = {
  0,
  0,
  1,
  9,
  0,
  8,
  0,
  512,
  256,
  1,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  2,
  6,
  10,
  14,
  18,
  22,
  26,
  30,
  1,
  5,
  9,
  13,
  17,
  21,
  25,
  29,
  0,
  4,
  8,
  12,
  16,
  20,
  24,
  28,
  3,
  7,
  11,
  15,
  19,
  23,
  27,
  31,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
};
static inline void InitPPCMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(PPCRegDesc, 376, RA, PC, PPCMCRegisterClasses, 45, PPCRegUnitRoots, 171, PPCRegDiffLists, PPCLaneMaskLists, PPCRegStrings, PPCRegClassStrings, PPCSubRegIdxLists, 19,
PPCSubRegIdxRanges, PPCRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(PPCDwarfFlavour0Dwarf2L, PPCDwarfFlavour0Dwarf2LSize, false);
    break;
  case 1:
    RI->mapDwarfRegsToLLVMRegs(PPCDwarfFlavour1Dwarf2L, PPCDwarfFlavour1Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(PPCEHFlavour0Dwarf2L, PPCEHFlavour0Dwarf2LSize, true);
    break;
  case 1:
    RI->mapDwarfRegsToLLVMRegs(PPCEHFlavour1Dwarf2L, PPCEHFlavour1Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(PPCDwarfFlavour0L2Dwarf, PPCDwarfFlavour0L2DwarfSize, false);
    break;
  case 1:
    RI->mapLLVMRegsToDwarfRegs(PPCDwarfFlavour1L2Dwarf, PPCDwarfFlavour1L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(PPCEHFlavour0L2Dwarf, PPCEHFlavour0L2DwarfSize, true);
    break;
  case 1:
    RI->mapLLVMRegsToDwarfRegs(PPCEHFlavour1L2Dwarf, PPCEHFlavour1L2DwarfSize, true);
    break;
  }
}

} // end namespace llvm

#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Register Information Header Fragment                                       *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER

#include "llvm/CodeGen/TargetRegisterInfo.h"

namespace llvm {

class PPCFrameLowering;

struct PPCGenRegisterInfo : public TargetRegisterInfo {
  explicit PPCGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0,
      unsigned PC = 0, unsigned HwMode = 0);
  unsigned composeSubRegIndicesImpl(unsigned, unsigned) const override;
  LaneBitmask composeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  LaneBitmask reverseComposeSubRegIndexLaneMaskImpl(unsigned, LaneBitmask) const override;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass *, unsigned) const override;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const override;
  unsigned getRegUnitWeight(unsigned RegUnit) const override;
  unsigned getNumRegPressureSets() const override;
  const char *getRegPressureSetName(unsigned Idx) const override;
  unsigned getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const override;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const override;
  const int *getRegUnitPressureSets(unsigned RegUnit) const override;
  ArrayRef<const char *> getRegMaskNames() const override;
  ArrayRef<const uint32_t *> getRegMasks() const override;
  bool isGeneralPurposeRegister(const MachineFunction &, MCRegister) const override;
  bool isFixedRegister(const MachineFunction &, MCRegister) const override;
  bool isArgumentRegister(const MachineFunction &, MCRegister) const override;
  /// Devirtualized TargetFrameLowering.
  static const PPCFrameLowering *getFrameLowering(
      const MachineFunction &MF);
};

namespace PPC { // Register classes
  extern const TargetRegisterClass VSSRCRegClass;
  extern const TargetRegisterClass GPRCRegClass;
  extern const TargetRegisterClass GPRC_NOR0RegClass;
  extern const TargetRegisterClass GPRC_and_GPRC_NOR0RegClass;
  extern const TargetRegisterClass CRBITRCRegClass;
  extern const TargetRegisterClass F4RCRegClass;
  extern const TargetRegisterClass CRRCRegClass;
  extern const TargetRegisterClass CARRYRCRegClass;
  extern const TargetRegisterClass CTRRCRegClass;
  extern const TargetRegisterClass LRRCRegClass;
  extern const TargetRegisterClass VRSAVERCRegClass;
  extern const TargetRegisterClass SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass VSFRCRegClass;
  extern const TargetRegisterClass G8RCRegClass;
  extern const TargetRegisterClass G8RC_NOX0RegClass;
  extern const TargetRegisterClass SPILLTOVSRRC_and_VSFRCRegClass;
  extern const TargetRegisterClass G8RC_and_G8RC_NOX0RegClass;
  extern const TargetRegisterClass F8RCRegClass;
  extern const TargetRegisterClass SPERCRegClass;
  extern const TargetRegisterClass VFRCRegClass;
  extern const TargetRegisterClass SPERC_with_sub_32_in_GPRC_NOR0RegClass;
  extern const TargetRegisterClass SPILLTOVSRRC_and_VFRCRegClass;
  extern const TargetRegisterClass SPILLTOVSRRC_and_F4RCRegClass;
  extern const TargetRegisterClass CTRRC8RegClass;
  extern const TargetRegisterClass LR8RCRegClass;
  extern const TargetRegisterClass VSRCRegClass;
  extern const TargetRegisterClass VSRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass VRRCRegClass;
  extern const TargetRegisterClass VSLRCRegClass;
  extern const TargetRegisterClass VRRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass G8pRCRegClass;
  extern const TargetRegisterClass G8pRC_with_sub_32_in_GPRC_NOR0RegClass;
  extern const TargetRegisterClass VSLRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass VSRpRCRegClass;
  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass VSRpRC_with_sub_64_in_F4RCRegClass;
  extern const TargetRegisterClass VSRpRC_with_sub_64_in_VFRCRegClass;
  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClass;
  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClass;
  extern const TargetRegisterClass ACCRCRegClass;
  extern const TargetRegisterClass UACCRCRegClass;
  extern const TargetRegisterClass ACCRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass UACCRC_with_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass;
  extern const TargetRegisterClass UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass;
} // end namespace PPC

} // end namespace llvm

#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Register and Register Classes Information                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC

namespace llvm {

extern const MCRegisterClass PPCMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i32, MVT::Other,
  /* 4 */ MVT::i64, MVT::Other,
  /* 6 */ MVT::i128, MVT::Other,
  /* 8 */ MVT::i32, MVT::f32, MVT::Other,
  /* 11 */ MVT::i64, MVT::f64, MVT::Other,
  /* 14 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v1i128, MVT::v4f32, MVT::v2f64, MVT::f128, MVT::Other,
  /* 23 */ MVT::v256i1, MVT::Other,
  /* 25 */ MVT::v512i1, MVT::Other,
  /* 27 */ MVT::v4i32, MVT::v4f32, MVT::v2f64, MVT::v2i64, MVT::Other,
};

static const char *SubRegIndexNameTable[] = { "sub_32", "sub_64", "sub_eq", "sub_gp8_x0", "sub_gp8_x1", "sub_gt", "sub_lt", "sub_pair0", "sub_pair1", "sub_un", "sub_vsx0", "sub_vsx1", "sub_vsx1_then_sub_64", "sub_pair1_then_sub_64", "sub_pair1_then_sub_vsx0", "sub_pair1_then_sub_vsx1", "sub_pair1_then_sub_vsx1_then_sub_64", "sub_gp8_x1_then_sub_32", "" };


static const LaneBitmask SubRegIndexLaneMaskTable[] = {
  LaneBitmask::getAll(),
  LaneBitmask(0x0000000000000001), // sub_32
  LaneBitmask(0x0000000000000002), // sub_64
  LaneBitmask(0x0000000000000004), // sub_eq
  LaneBitmask(0x0000000000000001), // sub_gp8_x0
  LaneBitmask(0x0000000000000200), // sub_gp8_x1
  LaneBitmask(0x0000000000000008), // sub_gt
  LaneBitmask(0x0000000000000010), // sub_lt
  LaneBitmask(0x0000000000000042), // sub_pair0
  LaneBitmask(0x0000000000000180), // sub_pair1
  LaneBitmask(0x0000000000000020), // sub_un
  LaneBitmask(0x0000000000000002), // sub_vsx0
  LaneBitmask(0x0000000000000040), // sub_vsx1
  LaneBitmask(0x0000000000000040), // sub_vsx1_then_sub_64
  LaneBitmask(0x0000000000000080), // sub_pair1_then_sub_64
  LaneBitmask(0x0000000000000080), // sub_pair1_then_sub_vsx0
  LaneBitmask(0x0000000000000100), // sub_pair1_then_sub_vsx1
  LaneBitmask(0x0000000000000100), // sub_pair1_then_sub_vsx1_then_sub_64
  LaneBitmask(0x0000000000000200), // sub_gp8_x1_then_sub_32
 };



static const TargetRegisterInfo::RegClassInfo RegClassInfos[] = {
  // Mode = 0 (Default)
  { 32, 32, 32, VTLists+9 },    // VSSRC
  { 32, 32, 32, VTLists+8 },    // GPRC
  { 32, 32, 32, VTLists+8 },    // GPRC_NOR0
  { 32, 32, 32, VTLists+8 },    // GPRC_and_GPRC_NOR0
  { 32, 32, 32, VTLists+0 },    // CRBITRC
  { 32, 32, 32, VTLists+9 },    // F4RC
  { 32, 32, 32, VTLists+2 },    // CRRC
  { 32, 32, 32, VTLists+2 },    // CARRYRC
  { 32, 32, 32, VTLists+2 },    // CTRRC
  { 32, 32, 32, VTLists+2 },    // LRRC
  { 32, 32, 32, VTLists+2 },    // VRSAVERC
  { 64, 64, 64, VTLists+11 },    // SPILLTOVSRRC
  { 64, 64, 64, VTLists+12 },    // VSFRC
  { 64, 64, 64, VTLists+4 },    // G8RC
  { 64, 64, 64, VTLists+4 },    // G8RC_NOX0
  { 64, 64, 64, VTLists+12 },    // SPILLTOVSRRC_and_VSFRC
  { 64, 64, 64, VTLists+4 },    // G8RC_and_G8RC_NOX0
  { 64, 64, 64, VTLists+12 },    // F8RC
  { 64, 64, 64, VTLists+12 },    // SPERC
  { 64, 64, 64, VTLists+12 },    // VFRC
  { 64, 64, 64, VTLists+12 },    // SPERC_with_sub_32_in_GPRC_NOR0
  { 64, 64, 64, VTLists+12 },    // SPILLTOVSRRC_and_VFRC
  { 64, 64, 64, VTLists+12 },    // SPILLTOVSRRC_and_F4RC
  { 64, 64, 64, VTLists+4 },    // CTRRC8
  { 64, 64, 64, VTLists+4 },    // LR8RC
  { 128, 128, 128, VTLists+27 },    // VSRC
  { 128, 128, 128, VTLists+27 },    // VSRC_with_sub_64_in_SPILLTOVSRRC
  { 128, 128, 128, VTLists+14 },    // VRRC
  { 128, 128, 128, VTLists+27 },    // VSLRC
  { 128, 128, 128, VTLists+14 },    // VRRC_with_sub_64_in_SPILLTOVSRRC
  { 128, 128, 128, VTLists+6 },    // G8pRC
  { 128, 128, 128, VTLists+6 },    // G8pRC_with_sub_32_in_GPRC_NOR0
  { 128, 128, 128, VTLists+27 },    // VSLRC_with_sub_64_in_SPILLTOVSRRC
  { 256, 256, 128, VTLists+23 },    // VSRpRC
  { 256, 256, 128, VTLists+23 },    // VSRpRC_with_sub_64_in_SPILLTOVSRRC
  { 256, 256, 128, VTLists+23 },    // VSRpRC_with_sub_64_in_F4RC
  { 256, 256, 128, VTLists+23 },    // VSRpRC_with_sub_64_in_VFRC
  { 256, 256, 128, VTLists+23 },    // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
  { 256, 256, 128, VTLists+23 },    // VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
  { 512, 512, 128, VTLists+25 },    // ACCRC
  { 512, 512, 128, VTLists+25 },    // UACCRC
  { 512, 512, 128, VTLists+25 },    // ACCRC_with_sub_64_in_SPILLTOVSRRC
  { 512, 512, 128, VTLists+25 },    // UACCRC_with_sub_64_in_SPILLTOVSRRC
  { 512, 512, 128, VTLists+25 },    // ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
  { 512, 512, 128, VTLists+25 },    // UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
};

static const TargetRegisterClass *const NullRegClasses[] = { nullptr };

static const uint32_t VSSRCSubClassMask[] = {
  0x006a9021, 0x00000000, 
  0x3e000000, 0x00001fff, // sub_64
  0x00000000, 0x00001ffe, // sub_vsx1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t GPRCSubClassMask[] = {
  0x0000000a, 0x00000000, 
  0xc0152000, 0x00000000, // sub_32
  0xc0000000, 0x00000000, // sub_gp8_x1_then_sub_32
};

static const uint32_t GPRC_NOR0SubClassMask[] = {
  0x0000000c, 0x00000000, 
  0x80114000, 0x00000000, // sub_32
  0xc0000000, 0x00000000, // sub_gp8_x1_then_sub_32
};

static const uint32_t GPRC_and_GPRC_NOR0SubClassMask[] = {
  0x00000008, 0x00000000, 
  0x80110000, 0x00000000, // sub_32
  0xc0000000, 0x00000000, // sub_gp8_x1_then_sub_32
};

static const uint32_t CRBITRCSubClassMask[] = {
  0x00000010, 0x00000000, 
  0x00000040, 0x00000000, // sub_eq
  0x00000040, 0x00000000, // sub_gt
  0x00000040, 0x00000000, // sub_lt
  0x00000040, 0x00000000, // sub_un
};

static const uint32_t F4RCSubClassMask[] = {
  0x00420020, 0x00000000, 
  0x10000000, 0x00001fc9, // sub_64
  0x00000000, 0x00001fc8, // sub_vsx1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t CRRCSubClassMask[] = {
  0x00000040, 0x00000000, 
};

static const uint32_t CARRYRCSubClassMask[] = {
  0x00000080, 0x00000000, 
};

static const uint32_t CTRRCSubClassMask[] = {
  0x00000100, 0x00000000, 
};

static const uint32_t LRRCSubClassMask[] = {
  0x00000200, 0x00000000, 
};

static const uint32_t VRSAVERCSubClassMask[] = {
  0x00000400, 0x00000000, 
};

static const uint32_t SPILLTOVSRRCSubClassMask[] = {
  0x0061a800, 0x00000000, 
  0x24000000, 0x00001e65, // sub_64
  0xc0000000, 0x00000000, // sub_gp8_x0
  0xc0000000, 0x00000000, // sub_gp8_x1
  0x00000000, 0x00001e64, // sub_vsx1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t VSFRCSubClassMask[] = {
  0x006a9000, 0x00000000, 
  0x3e000000, 0x00001fff, // sub_64
  0x00000000, 0x00001ffe, // sub_vsx1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t G8RCSubClassMask[] = {
  0x00012000, 0x00000000, 
  0xc0000000, 0x00000000, // sub_gp8_x0
  0xc0000000, 0x00000000, // sub_gp8_x1
};

static const uint32_t G8RC_NOX0SubClassMask[] = {
  0x00014000, 0x00000000, 
  0x80000000, 0x00000000, // sub_gp8_x0
  0xc0000000, 0x00000000, // sub_gp8_x1
};

static const uint32_t SPILLTOVSRRC_and_VSFRCSubClassMask[] = {
  0x00608000, 0x00000000, 
  0x24000000, 0x00001e65, // sub_64
  0x00000000, 0x00001e64, // sub_vsx1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t G8RC_and_G8RC_NOX0SubClassMask[] = {
  0x00010000, 0x00000000, 
  0x80000000, 0x00000000, // sub_gp8_x0
  0xc0000000, 0x00000000, // sub_gp8_x1
};

static const uint32_t F8RCSubClassMask[] = {
  0x00420000, 0x00000000, 
  0x10000000, 0x00001fc9, // sub_64
  0x00000000, 0x00001fc8, // sub_vsx1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_64
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t SPERCSubClassMask[] = {
  0x00140000, 0x00000000, 
};

static const uint32_t VFRCSubClassMask[] = {
  0x00280000, 0x00000000, 
  0x28000000, 0x00000030, // sub_64
  0x00000000, 0x00000030, // sub_vsx1_then_sub_64
};

static const uint32_t SPERC_with_sub_32_in_GPRC_NOR0SubClassMask[] = {
  0x00100000, 0x00000000, 
};

static const uint32_t SPILLTOVSRRC_and_VFRCSubClassMask[] = {
  0x00200000, 0x00000000, 
  0x20000000, 0x00000020, // sub_64
  0x00000000, 0x00000020, // sub_vsx1_then_sub_64
};

static const uint32_t SPILLTOVSRRC_and_F4RCSubClassMask[] = {
  0x00400000, 0x00000000, 
  0x00000000, 0x00001e41, // sub_64
  0x00000000, 0x00001e40, // sub_vsx1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_64
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx1_then_sub_64
};

static const uint32_t CTRRC8SubClassMask[] = {
  0x00800000, 0x00000000, 
};

static const uint32_t LR8RCSubClassMask[] = {
  0x01000000, 0x00000000, 
};

static const uint32_t VSRCSubClassMask[] = {
  0x3e000000, 0x00000001, 
  0x00000000, 0x00001ffe, // sub_vsx0
  0x00000000, 0x00001ffe, // sub_vsx1
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx0
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1
};

static const uint32_t VSRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x24000000, 0x00000001, 
  0x00000000, 0x00001e64, // sub_vsx0
  0x00000000, 0x00001e64, // sub_vsx1
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx0
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx1
};

static const uint32_t VRRCSubClassMask[] = {
  0x28000000, 0x00000000, 
  0x00000000, 0x00000030, // sub_vsx0
  0x00000000, 0x00000030, // sub_vsx1
};

static const uint32_t VSLRCSubClassMask[] = {
  0x10000000, 0x00000001, 
  0x00000000, 0x00001fc8, // sub_vsx0
  0x00000000, 0x00001fc8, // sub_vsx1
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx0
  0x00000000, 0x00001f80, // sub_pair1_then_sub_vsx1
};

static const uint32_t VRRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x20000000, 0x00000000, 
  0x00000000, 0x00000020, // sub_vsx0
  0x00000000, 0x00000020, // sub_vsx1
};

static const uint32_t G8pRCSubClassMask[] = {
  0xc0000000, 0x00000000, 
};

static const uint32_t G8pRC_with_sub_32_in_GPRC_NOR0SubClassMask[] = {
  0x80000000, 0x00000000, 
};

static const uint32_t VSLRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00000001, 
  0x00000000, 0x00001e40, // sub_vsx0
  0x00000000, 0x00001e40, // sub_vsx1
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx0
  0x00000000, 0x00001800, // sub_pair1_then_sub_vsx1
};

static const uint32_t VSRpRCSubClassMask[] = {
  0x00000000, 0x0000007e, 
  0x00000000, 0x00001f80, // sub_pair0
  0x00000000, 0x00001f80, // sub_pair1
};

static const uint32_t VSRpRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00000064, 
  0x00000000, 0x00001e00, // sub_pair0
  0x00000000, 0x00001800, // sub_pair1
};

static const uint32_t VSRpRC_with_sub_64_in_F4RCSubClassMask[] = {
  0x00000000, 0x00000048, 
  0x00000000, 0x00001f80, // sub_pair0
  0x00000000, 0x00001f80, // sub_pair1
};

static const uint32_t VSRpRC_with_sub_64_in_VFRCSubClassMask[] = {
  0x00000000, 0x00000030, 
};

static const uint32_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCSubClassMask[] = {
  0x00000000, 0x00000020, 
};

static const uint32_t VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCSubClassMask[] = {
  0x00000000, 0x00000040, 
  0x00000000, 0x00001e00, // sub_pair0
  0x00000000, 0x00001800, // sub_pair1
};

static const uint32_t ACCRCSubClassMask[] = {
  0x00000000, 0x00000a80, 
};

static const uint32_t UACCRCSubClassMask[] = {
  0x00000000, 0x00001500, 
};

static const uint32_t ACCRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00000a00, 
};

static const uint32_t UACCRC_with_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00001400, 
};

static const uint32_t ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00000800, 
};

static const uint32_t UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSubClassMask[] = {
  0x00000000, 0x00001000, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 4, 5, 0,
  /* 3 */ 8, 9, 0,
  /* 6 */ 3, 6, 7, 10, 0,
  /* 11 */ 11, 12, 0,
  /* 14 */ 2, 13, 0,
  /* 17 */ 11, 12, 15, 16, 0,
  /* 22 */ 2, 13, 14, 17, 0,
  /* 27 */ 2, 4, 5, 13, 14, 17, 0,
  /* 34 */ 1, 18, 0,
};

static const TargetRegisterClass *const GPRC_and_GPRC_NOR0Superclasses[] = {
  &PPC::GPRCRegClass,
  &PPC::GPRC_NOR0RegClass,
  nullptr
};

static const TargetRegisterClass *const F4RCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSFRCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  nullptr
};

static const TargetRegisterClass *const G8RCSuperclasses[] = {
  &PPC::SPILLTOVSRRCRegClass,
  nullptr
};

static const TargetRegisterClass *const SPILLTOVSRRC_and_VSFRCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  &PPC::SPILLTOVSRRCRegClass,
  &PPC::VSFRCRegClass,
  nullptr
};

static const TargetRegisterClass *const G8RC_and_G8RC_NOX0Superclasses[] = {
  &PPC::SPILLTOVSRRCRegClass,
  &PPC::G8RCRegClass,
  &PPC::G8RC_NOX0RegClass,
  nullptr
};

static const TargetRegisterClass *const F8RCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  &PPC::F4RCRegClass,
  &PPC::VSFRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VFRCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  &PPC::VSFRCRegClass,
  nullptr
};

static const TargetRegisterClass *const SPERC_with_sub_32_in_GPRC_NOR0Superclasses[] = {
  &PPC::SPERCRegClass,
  nullptr
};

static const TargetRegisterClass *const SPILLTOVSRRC_and_VFRCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  &PPC::SPILLTOVSRRCRegClass,
  &PPC::VSFRCRegClass,
  &PPC::SPILLTOVSRRC_and_VSFRCRegClass,
  &PPC::VFRCRegClass,
  nullptr
};

static const TargetRegisterClass *const SPILLTOVSRRC_and_F4RCSuperclasses[] = {
  &PPC::VSSRCRegClass,
  &PPC::F4RCRegClass,
  &PPC::SPILLTOVSRRCRegClass,
  &PPC::VSFRCRegClass,
  &PPC::SPILLTOVSRRC_and_VSFRCRegClass,
  &PPC::F8RCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::VSRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VRRCSuperclasses[] = {
  &PPC::VSRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSLRCSuperclasses[] = {
  &PPC::VSRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VRRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::VSRCRegClass,
  &PPC::VSRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  &PPC::VRRCRegClass,
  nullptr
};

static const TargetRegisterClass *const G8pRC_with_sub_32_in_GPRC_NOR0Superclasses[] = {
  &PPC::G8pRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSLRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::VSRCRegClass,
  &PPC::VSRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  &PPC::VSLRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRpRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::VSRpRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRpRC_with_sub_64_in_F4RCSuperclasses[] = {
  &PPC::VSRpRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRpRC_with_sub_64_in_VFRCSuperclasses[] = {
  &PPC::VSRpRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCSuperclasses[] = {
  &PPC::VSRpRCRegClass,
  &PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  &PPC::VSRpRC_with_sub_64_in_VFRCRegClass,
  nullptr
};

static const TargetRegisterClass *const VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCSuperclasses[] = {
  &PPC::VSRpRCRegClass,
  &PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  &PPC::VSRpRC_with_sub_64_in_F4RCRegClass,
  nullptr
};

static const TargetRegisterClass *const ACCRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::ACCRCRegClass,
  nullptr
};

static const TargetRegisterClass *const UACCRC_with_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::UACCRCRegClass,
  nullptr
};

static const TargetRegisterClass *const ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::ACCRCRegClass,
  &PPC::ACCRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  nullptr
};

static const TargetRegisterClass *const UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSuperclasses[] = {
  &PPC::UACCRCRegClass,
  &PPC::UACCRC_with_sub_64_in_SPILLTOVSRRCRegClass,
  nullptr
};


static inline unsigned GPRCAltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> GPRCGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R0, PPC::R1, PPC::FP, PPC::BP, PPC::R2 };
  static const MCPhysReg AltOrder2[] = { PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R31, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R0, PPC::R1, PPC::FP, PPC::BP };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::GPRCRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRCAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned GPRC_NOR0AltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> GPRC_NOR0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R1, PPC::FP, PPC::BP, PPC::ZERO, PPC::R2 };
  static const MCPhysReg AltOrder2[] = { PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R31, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R1, PPC::FP, PPC::BP, PPC::ZERO };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::GPRC_NOR0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRC_NOR0AltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned GPRC_and_GPRC_NOR0AltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> GPRC_and_GPRC_NOR0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R31, PPC::R1, PPC::FP, PPC::BP, PPC::R2 };
  static const MCPhysReg AltOrder2[] = { PPC::R2, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::R31, PPC::R30, PPC::R29, PPC::R28, PPC::R27, PPC::R26, PPC::R25, PPC::R24, PPC::R23, PPC::R22, PPC::R21, PPC::R20, PPC::R19, PPC::R18, PPC::R17, PPC::R16, PPC::R15, PPC::R14, PPC::R13, PPC::R1, PPC::FP, PPC::BP };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::GPRC_and_GPRC_NOR0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRC_and_GPRC_NOR0AltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned CRBITRCAltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().isELFv2ABI() &&
           MF.getInfo<PPCFunctionInfo>()->isNonVolatileCRDisabled();
  }

static ArrayRef<MCPhysReg> CRBITRCGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::CR5LT, PPC::CR5GT, PPC::CR5EQ, PPC::CR5UN, PPC::CR6LT, PPC::CR6GT, PPC::CR6EQ, PPC::CR6UN, PPC::CR7LT, PPC::CR7GT, PPC::CR7EQ, PPC::CR7UN, PPC::CR1LT, PPC::CR1GT, PPC::CR1EQ, PPC::CR1UN, PPC::CR0LT, PPC::CR0GT, PPC::CR0EQ, PPC::CR0UN };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::CRBITRCRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = CRBITRCAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned CRRCAltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().isELFv2ABI() &&
           MF.getInfo<PPCFunctionInfo>()->isNonVolatileCRDisabled();
  }

static ArrayRef<MCPhysReg> CRRCGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::CRRCRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = CRRCAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned G8RCAltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> G8RCGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X0, PPC::X1, PPC::FP8, PPC::BP8, PPC::X2 };
  static const MCPhysReg AltOrder2[] = { PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X31, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X13, PPC::X0, PPC::X1, PPC::FP8, PPC::BP8 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::G8RCRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = G8RCAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned G8RC_NOX0AltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> G8RC_NOX0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8, PPC::ZERO8, PPC::X2 };
  static const MCPhysReg AltOrder2[] = { PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X31, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8, PPC::ZERO8 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::G8RC_NOX0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = G8RC_NOX0AltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned G8RC_and_G8RC_NOX0AltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().getGPRAllocationOrderIdx();
  }

static ArrayRef<MCPhysReg> G8RC_and_G8RC_NOX0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X31, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8, PPC::X2 };
  static const MCPhysReg AltOrder2[] = { PPC::X2, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::X31, PPC::X30, PPC::X29, PPC::X28, PPC::X27, PPC::X26, PPC::X25, PPC::X24, PPC::X23, PPC::X22, PPC::X21, PPC::X20, PPC::X19, PPC::X18, PPC::X17, PPC::X16, PPC::X15, PPC::X14, PPC::X13, PPC::X1, PPC::FP8, PPC::BP8 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::G8RC_and_G8RC_NOX0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = G8RC_and_G8RC_NOX0AltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned G8pRCAltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().is64BitELFABI();
  }

static ArrayRef<MCPhysReg> G8pRCGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::G8p2, PPC::G8p3, PPC::G8p4, PPC::G8p5, PPC::G8p14, PPC::G8p13, PPC::G8p12, PPC::G8p11, PPC::G8p10, PPC::G8p9, PPC::G8p8, PPC::G8p7, PPC::G8p15, PPC::G8p6, PPC::G8p0, PPC::G8p1 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::G8pRCRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = G8pRCAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned G8pRC_with_sub_32_in_GPRC_NOR0AltOrderSelect(const MachineFunction &MF) {
    return MF.getSubtarget<PPCSubtarget>().is64BitELFABI();
  }

static ArrayRef<MCPhysReg> G8pRC_with_sub_32_in_GPRC_NOR0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { PPC::G8p2, PPC::G8p3, PPC::G8p4, PPC::G8p5, PPC::G8p14, PPC::G8p13, PPC::G8p12, PPC::G8p11, PPC::G8p10, PPC::G8p9, PPC::G8p8, PPC::G8p7, PPC::G8p15, PPC::G8p6, PPC::G8p1 };
  const MCRegisterClass &MCR = PPCMCRegisterClasses[PPC::G8pRC_with_sub_32_in_GPRC_NOR0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = G8pRC_with_sub_32_in_GPRC_NOR0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

namespace PPC {   // Register class instances
  extern const TargetRegisterClass VSSRCRegClass = {
    &PPCMCRegisterClasses[VSSRCRegClassID],
    VSSRCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass GPRCRegClass = {
    &PPCMCRegisterClasses[GPRCRegClassID],
    GPRCSubClassMask,
    SuperRegIdxSeqs + 34,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    GPRCGetRawAllocationOrder
  };

  extern const TargetRegisterClass GPRC_NOR0RegClass = {
    &PPCMCRegisterClasses[GPRC_NOR0RegClassID],
    GPRC_NOR0SubClassMask,
    SuperRegIdxSeqs + 34,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    GPRC_NOR0GetRawAllocationOrder
  };

  extern const TargetRegisterClass GPRC_and_GPRC_NOR0RegClass = {
    &PPCMCRegisterClasses[GPRC_and_GPRC_NOR0RegClassID],
    GPRC_and_GPRC_NOR0SubClassMask,
    SuperRegIdxSeqs + 34,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    GPRC_and_GPRC_NOR0Superclasses,
    GPRC_and_GPRC_NOR0GetRawAllocationOrder
  };

  extern const TargetRegisterClass CRBITRCRegClass = {
    &PPCMCRegisterClasses[CRBITRCRegClassID],
    CRBITRCSubClassMask,
    SuperRegIdxSeqs + 6,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    CRBITRCGetRawAllocationOrder
  };

  extern const TargetRegisterClass F4RCRegClass = {
    &PPCMCRegisterClasses[F4RCRegClassID],
    F4RCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    F4RCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CRRCRegClass = {
    &PPCMCRegisterClasses[CRRCRegClassID],
    CRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x000000000000003C),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    CRRCGetRawAllocationOrder
  };

  extern const TargetRegisterClass CARRYRCRegClass = {
    &PPCMCRegisterClasses[CARRYRCRegClassID],
    CARRYRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass CTRRCRegClass = {
    &PPCMCRegisterClasses[CTRRCRegClassID],
    CTRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LRRCRegClass = {
    &PPCMCRegisterClasses[LRRCRegClassID],
    LRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VRSAVERCRegClass = {
    &PPCMCRegisterClasses[VRSAVERCRegClassID],
    VRSAVERCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[SPILLTOVSRRCRegClassID],
    SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 27,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VSFRCRegClass = {
    &PPCMCRegisterClasses[VSFRCRegClassID],
    VSFRCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass G8RCRegClass = {
    &PPCMCRegisterClasses[G8RCRegClassID],
    G8RCSubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    G8RCSuperclasses,
    G8RCGetRawAllocationOrder
  };

  extern const TargetRegisterClass G8RC_NOX0RegClass = {
    &PPCMCRegisterClasses[G8RC_NOX0RegClassID],
    G8RC_NOX0SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    G8RC_NOX0GetRawAllocationOrder
  };

  extern const TargetRegisterClass SPILLTOVSRRC_and_VSFRCRegClass = {
    &PPCMCRegisterClasses[SPILLTOVSRRC_and_VSFRCRegClassID],
    SPILLTOVSRRC_and_VSFRCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    SPILLTOVSRRC_and_VSFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass G8RC_and_G8RC_NOX0RegClass = {
    &PPCMCRegisterClasses[G8RC_and_G8RC_NOX0RegClassID],
    G8RC_and_G8RC_NOX0SubClassMask,
    SuperRegIdxSeqs + 0,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    G8RC_and_G8RC_NOX0Superclasses,
    G8RC_and_G8RC_NOX0GetRawAllocationOrder
  };

  extern const TargetRegisterClass F8RCRegClass = {
    &PPCMCRegisterClasses[F8RCRegClassID],
    F8RCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    F8RCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass SPERCRegClass = {
    &PPCMCRegisterClasses[SPERCRegClassID],
    SPERCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VFRCRegClass = {
    &PPCMCRegisterClasses[VFRCRegClassID],
    VFRCSubClassMask,
    SuperRegIdxSeqs + 14,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass SPERC_with_sub_32_in_GPRC_NOR0RegClass = {
    &PPCMCRegisterClasses[SPERC_with_sub_32_in_GPRC_NOR0RegClassID],
    SPERC_with_sub_32_in_GPRC_NOR0SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    SPERC_with_sub_32_in_GPRC_NOR0Superclasses,
    nullptr
  };

  extern const TargetRegisterClass SPILLTOVSRRC_and_VFRCRegClass = {
    &PPCMCRegisterClasses[SPILLTOVSRRC_and_VFRCRegClassID],
    SPILLTOVSRRC_and_VFRCSubClassMask,
    SuperRegIdxSeqs + 14,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    SPILLTOVSRRC_and_VFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass SPILLTOVSRRC_and_F4RCRegClass = {
    &PPCMCRegisterClasses[SPILLTOVSRRC_and_F4RCRegClassID],
    SPILLTOVSRRC_and_F4RCSubClassMask,
    SuperRegIdxSeqs + 22,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    SPILLTOVSRRC_and_F4RCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass CTRRC8RegClass = {
    &PPCMCRegisterClasses[CTRRC8RegClassID],
    CTRRC8SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass LR8RCRegClass = {
    &PPCMCRegisterClasses[LR8RCRegClassID],
    LR8RCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000001),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VSRCRegClass = {
    &PPCMCRegisterClasses[VSRCRegClassID],
    VSRCSubClassMask,
    SuperRegIdxSeqs + 17,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VSRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[VSRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    VSRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 17,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VRRCRegClass = {
    &PPCMCRegisterClasses[VRRCRegClassID],
    VRRCSubClassMask,
    SuperRegIdxSeqs + 11,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSLRCRegClass = {
    &PPCMCRegisterClasses[VSLRCRegClassID],
    VSLRCSubClassMask,
    SuperRegIdxSeqs + 17,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSLRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VRRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[VRRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    VRRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 11,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VRRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass G8pRCRegClass = {
    &PPCMCRegisterClasses[G8pRCRegClassID],
    G8pRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000201),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    G8pRCGetRawAllocationOrder
  };

  extern const TargetRegisterClass G8pRC_with_sub_32_in_GPRC_NOR0RegClass = {
    &PPCMCRegisterClasses[G8pRC_with_sub_32_in_GPRC_NOR0RegClassID],
    G8pRC_with_sub_32_in_GPRC_NOR0SubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000201),
    0,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    G8pRC_with_sub_32_in_GPRC_NOR0Superclasses,
    G8pRC_with_sub_32_in_GPRC_NOR0GetRawAllocationOrder
  };

  extern const TargetRegisterClass VSLRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[VSLRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    VSLRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 17,
    LaneBitmask(0x0000000000000002),
    0,
    0x00, /* TSFlags */
    false, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSLRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRCRegClass = {
    &PPCMCRegisterClasses[VSRpRCRegClassID],
    VSRpRCSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    VSRpRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRpRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRC_with_sub_64_in_F4RCRegClass = {
    &PPCMCRegisterClasses[VSRpRC_with_sub_64_in_F4RCRegClassID],
    VSRpRC_with_sub_64_in_F4RCSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRpRC_with_sub_64_in_F4RCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRC_with_sub_64_in_VFRCRegClass = {
    &PPCMCRegisterClasses[VSRpRC_with_sub_64_in_VFRCRegClassID],
    VSRpRC_with_sub_64_in_VFRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRpRC_with_sub_64_in_VFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClass = {
    &PPCMCRegisterClasses[VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClassID],
    VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClass = {
    &PPCMCRegisterClasses[VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClassID],
    VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCSubClassMask,
    SuperRegIdxSeqs + 3,
    LaneBitmask(0x0000000000000042),
    2,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ACCRCRegClass = {
    &PPCMCRegisterClasses[ACCRCRegClassID],
    ACCRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    63,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass UACCRCRegClass = {
    &PPCMCRegisterClasses[UACCRCRegClassID],
    UACCRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    36,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    NullRegClasses,
    nullptr
  };

  extern const TargetRegisterClass ACCRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[ACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    ACCRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    63,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    ACCRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass UACCRC_with_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[UACCRC_with_sub_64_in_SPILLTOVSRRCRegClassID],
    UACCRC_with_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    36,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    UACCRC_with_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID],
    ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    63,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

  extern const TargetRegisterClass UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass = {
    &PPCMCRegisterClasses[UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClassID],
    UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSubClassMask,
    SuperRegIdxSeqs + 2,
    LaneBitmask(0x00000000000001C2),
    36,
    0x00, /* TSFlags */
    true, /* HasDisjunctSubRegs */
    false, /* CoveredBySubRegs */
    UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCSuperclasses,
    nullptr
  };

} // end namespace PPC

namespace {
  const TargetRegisterClass *const RegisterClasses[] = {
    &PPC::VSSRCRegClass,
    &PPC::GPRCRegClass,
    &PPC::GPRC_NOR0RegClass,
    &PPC::GPRC_and_GPRC_NOR0RegClass,
    &PPC::CRBITRCRegClass,
    &PPC::F4RCRegClass,
    &PPC::CRRCRegClass,
    &PPC::CARRYRCRegClass,
    &PPC::CTRRCRegClass,
    &PPC::LRRCRegClass,
    &PPC::VRSAVERCRegClass,
    &PPC::SPILLTOVSRRCRegClass,
    &PPC::VSFRCRegClass,
    &PPC::G8RCRegClass,
    &PPC::G8RC_NOX0RegClass,
    &PPC::SPILLTOVSRRC_and_VSFRCRegClass,
    &PPC::G8RC_and_G8RC_NOX0RegClass,
    &PPC::F8RCRegClass,
    &PPC::SPERCRegClass,
    &PPC::VFRCRegClass,
    &PPC::SPERC_with_sub_32_in_GPRC_NOR0RegClass,
    &PPC::SPILLTOVSRRC_and_VFRCRegClass,
    &PPC::SPILLTOVSRRC_and_F4RCRegClass,
    &PPC::CTRRC8RegClass,
    &PPC::LR8RCRegClass,
    &PPC::VSRCRegClass,
    &PPC::VSRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::VRRCRegClass,
    &PPC::VSLRCRegClass,
    &PPC::VRRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::G8pRCRegClass,
    &PPC::G8pRC_with_sub_32_in_GPRC_NOR0RegClass,
    &PPC::VSLRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::VSRpRCRegClass,
    &PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::VSRpRC_with_sub_64_in_F4RCRegClass,
    &PPC::VSRpRC_with_sub_64_in_VFRCRegClass,
    &PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRCRegClass,
    &PPC::VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RCRegClass,
    &PPC::ACCRCRegClass,
    &PPC::UACCRCRegClass,
    &PPC::ACCRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::UACCRC_with_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass,
    &PPC::UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRCRegClass,
  };
} // end anonymous namespace

static const uint8_t CostPerUseTable[] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


static const bool InAllocatableClassTable[] = { 
false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, };


static const TargetRegisterInfoDesc PPCRegInfoDesc = { // Extra Descriptors
CostPerUseTable, 1, InAllocatableClassTable};

unsigned PPCGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[18] = {
    0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 3, 0, 0, 
  };
  static const uint8_t Rows[4][18] = {
    { PPC::sub_32, PPC::sub_64, 0, 0, 0, 0, 0, 0, 0, 0, PPC::sub_vsx0, PPC::sub_vsx1, PPC::sub_vsx1_then_sub_64, 0, 0, 0, 0, 0, },
    { PPC::sub_gp8_x1_then_sub_32, PPC::sub_pair1_then_sub_64, 0, 0, 0, 0, 0, 0, 0, 0, PPC::sub_pair1_then_sub_vsx0, PPC::sub_pair1_then_sub_vsx1, PPC::sub_pair1_then_sub_vsx1_then_sub_64, 0, 0, 0, 0, 0, },
    { 0, PPC::sub_vsx1_then_sub_64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, PPC::sub_pair1_then_sub_vsx1_then_sub_64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 18); (void) IdxA;
  --IdxB; assert(IdxB < 18);
  return Rows[RowMap[IdxA]][IdxB];
}

  struct MaskRolOp {
    LaneBitmask Mask;
    uint8_t  RotateLeft;
  };
  static const MaskRolOp LaneMaskComposeSequences[] = {
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  0 }, { LaneBitmask::getNone(), 0 },   // Sequence 0
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  1 }, { LaneBitmask::getNone(), 0 },   // Sequence 2
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 4
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  9 }, { LaneBitmask::getNone(), 0 },   // Sequence 6
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  3 }, { LaneBitmask::getNone(), 0 },   // Sequence 8
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  4 }, { LaneBitmask::getNone(), 0 },   // Sequence 10
    { LaneBitmask(0x0000000000000002),  6 }, { LaneBitmask(0x0000000000000040),  2 }, { LaneBitmask::getNone(), 0 },   // Sequence 12
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  5 }, { LaneBitmask::getNone(), 0 },   // Sequence 15
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  6 }, { LaneBitmask::getNone(), 0 },   // Sequence 17
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  7 }, { LaneBitmask::getNone(), 0 },   // Sequence 19
    { LaneBitmask(0xFFFFFFFFFFFFFFFF),  8 }, { LaneBitmask::getNone(), 0 }  // Sequence 21
  };
  static const uint8_t CompositeSequences[] = {
    0, // to sub_32
    2, // to sub_64
    4, // to sub_eq
    0, // to sub_gp8_x0
    6, // to sub_gp8_x1
    8, // to sub_gt
    10, // to sub_lt
    0, // to sub_pair0
    12, // to sub_pair1
    15, // to sub_un
    0, // to sub_vsx0
    15, // to sub_vsx1
    17, // to sub_vsx1_then_sub_64
    19, // to sub_pair1_then_sub_64
    17, // to sub_pair1_then_sub_vsx0
    19, // to sub_pair1_then_sub_vsx1
    21, // to sub_pair1_then_sub_vsx1_then_sub_64
    6 // to sub_gp8_x1_then_sub_32
  };

LaneBitmask PPCGenRegisterInfo::composeSubRegIndexLaneMaskImpl(unsigned IdxA, LaneBitmask LaneMask) const {
  --IdxA; assert(IdxA < 18 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger() & Ops->Mask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M << S) | (M >> (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

LaneBitmask PPCGenRegisterInfo::reverseComposeSubRegIndexLaneMaskImpl(unsigned IdxA,  LaneBitmask LaneMask) const {
  LaneMask &= getSubRegIndexLaneMask(IdxA);
  --IdxA; assert(IdxA < 18 && "Subregister index out of bounds");
  LaneBitmask Result;
  for (const MaskRolOp *Ops =
       &LaneMaskComposeSequences[CompositeSequences[IdxA]];
       Ops->Mask.any(); ++Ops) {
    LaneBitmask::Type M = LaneMask.getAsInteger();
    if (unsigned S = Ops->RotateLeft)
      Result |= LaneBitmask((M >> S) | (M << (LaneBitmask::BitWidth - S)));
    else
      Result |= LaneBitmask(M);
  }
  return Result;
}

const TargetRegisterClass *PPCGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[45][18] = {
    {	// VSSRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// GPRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// GPRC_NOR0
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// GPRC_and_GPRC_NOR0
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// CRBITRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// F4RC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// CRRC
      0,	// sub_32
      0,	// sub_64
      7,	// sub_eq -> CRRC
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      7,	// sub_gt -> CRRC
      7,	// sub_lt -> CRRC
      0,	// sub_pair0
      0,	// sub_pair1
      7,	// sub_un -> CRRC
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// CARRYRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// CTRRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// LRRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VRSAVERC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPILLTOVSRRC
      14,	// sub_32 -> G8RC
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSFRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// G8RC
      14,	// sub_32 -> G8RC
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// G8RC_NOX0
      15,	// sub_32 -> G8RC_NOX0
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPILLTOVSRRC_and_VSFRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// G8RC_and_G8RC_NOX0
      17,	// sub_32 -> G8RC_and_G8RC_NOX0
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// F8RC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPERC
      19,	// sub_32 -> SPERC
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VFRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPERC_with_sub_32_in_GPRC_NOR0
      21,	// sub_32 -> SPERC_with_sub_32_in_GPRC_NOR0
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPILLTOVSRRC_and_VFRC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// SPILLTOVSRRC_and_F4RC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// CTRRC8
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// LR8RC
      0,	// sub_32
      0,	// sub_64
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRC
      0,	// sub_32
      26,	// sub_64 -> VSRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      27,	// sub_64 -> VSRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VRRC
      0,	// sub_32
      28,	// sub_64 -> VRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSLRC
      0,	// sub_32
      29,	// sub_64 -> VSLRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VRRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      30,	// sub_64 -> VRRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// G8pRC
      31,	// sub_32 -> G8pRC
      0,	// sub_64
      0,	// sub_eq
      31,	// sub_gp8_x0 -> G8pRC
      31,	// sub_gp8_x1 -> G8pRC
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      31,	// sub_gp8_x1_then_sub_32 -> G8pRC
    },
    {	// G8pRC_with_sub_32_in_GPRC_NOR0
      32,	// sub_32 -> G8pRC_with_sub_32_in_GPRC_NOR0
      0,	// sub_64
      0,	// sub_eq
      32,	// sub_gp8_x0 -> G8pRC_with_sub_32_in_GPRC_NOR0
      32,	// sub_gp8_x1 -> G8pRC_with_sub_32_in_GPRC_NOR0
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      32,	// sub_gp8_x1_then_sub_32 -> G8pRC_with_sub_32_in_GPRC_NOR0
    },
    {	// VSLRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      33,	// sub_64 -> VSLRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      0,	// sub_vsx0
      0,	// sub_vsx1
      0,	// sub_vsx1_then_sub_64
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC
      0,	// sub_32
      34,	// sub_64 -> VSRpRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      34,	// sub_vsx0 -> VSRpRC
      34,	// sub_vsx1 -> VSRpRC
      34,	// sub_vsx1_then_sub_64 -> VSRpRC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      35,	// sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      35,	// sub_vsx0 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC
      35,	// sub_vsx1 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC
      35,	// sub_vsx1_then_sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC_with_sub_64_in_F4RC
      0,	// sub_32
      36,	// sub_64 -> VSRpRC_with_sub_64_in_F4RC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      36,	// sub_vsx0 -> VSRpRC_with_sub_64_in_F4RC
      36,	// sub_vsx1 -> VSRpRC_with_sub_64_in_F4RC
      36,	// sub_vsx1_then_sub_64 -> VSRpRC_with_sub_64_in_F4RC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC_with_sub_64_in_VFRC
      0,	// sub_32
      37,	// sub_64 -> VSRpRC_with_sub_64_in_VFRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      37,	// sub_vsx0 -> VSRpRC_with_sub_64_in_VFRC
      37,	// sub_vsx1 -> VSRpRC_with_sub_64_in_VFRC
      37,	// sub_vsx1_then_sub_64 -> VSRpRC_with_sub_64_in_VFRC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
      0,	// sub_32
      38,	// sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      38,	// sub_vsx0 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
      38,	// sub_vsx1 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
      38,	// sub_vsx1_then_sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
      0,	// sub_32
      39,	// sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      0,	// sub_pair0
      0,	// sub_pair1
      0,	// sub_un
      39,	// sub_vsx0 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
      39,	// sub_vsx1 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
      39,	// sub_vsx1_then_sub_64 -> VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
      0,	// sub_pair1_then_sub_64
      0,	// sub_pair1_then_sub_vsx0
      0,	// sub_pair1_then_sub_vsx1
      0,	// sub_pair1_then_sub_vsx1_then_sub_64
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// ACCRC
      0,	// sub_32
      40,	// sub_64 -> ACCRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      40,	// sub_pair0 -> ACCRC
      40,	// sub_pair1 -> ACCRC
      0,	// sub_un
      40,	// sub_vsx0 -> ACCRC
      40,	// sub_vsx1 -> ACCRC
      40,	// sub_vsx1_then_sub_64 -> ACCRC
      40,	// sub_pair1_then_sub_64 -> ACCRC
      40,	// sub_pair1_then_sub_vsx0 -> ACCRC
      40,	// sub_pair1_then_sub_vsx1 -> ACCRC
      40,	// sub_pair1_then_sub_vsx1_then_sub_64 -> ACCRC
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// UACCRC
      0,	// sub_32
      41,	// sub_64 -> UACCRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      41,	// sub_pair0 -> UACCRC
      41,	// sub_pair1 -> UACCRC
      0,	// sub_un
      41,	// sub_vsx0 -> UACCRC
      41,	// sub_vsx1 -> UACCRC
      41,	// sub_vsx1_then_sub_64 -> UACCRC
      41,	// sub_pair1_then_sub_64 -> UACCRC
      41,	// sub_pair1_then_sub_vsx0 -> UACCRC
      41,	// sub_pair1_then_sub_vsx1 -> UACCRC
      41,	// sub_pair1_then_sub_vsx1_then_sub_64 -> UACCRC
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// ACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      42,	// sub_64 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      42,	// sub_pair0 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_pair1 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_un
      42,	// sub_vsx0 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_vsx1 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_vsx1_then_sub_64 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_pair1_then_sub_64 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_pair1_then_sub_vsx0 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_pair1_then_sub_vsx1 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      42,	// sub_pair1_then_sub_vsx1_then_sub_64 -> ACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// UACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      43,	// sub_64 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      43,	// sub_pair0 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_pair1 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_un
      43,	// sub_vsx0 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_vsx1 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_vsx1_then_sub_64 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_pair1_then_sub_64 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_pair1_then_sub_vsx0 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_pair1_then_sub_vsx1 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      43,	// sub_pair1_then_sub_vsx1_then_sub_64 -> UACCRC_with_sub_64_in_SPILLTOVSRRC
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      44,	// sub_64 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      44,	// sub_pair0 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_pair1 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_un
      44,	// sub_vsx0 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_vsx1 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_vsx1_then_sub_64 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_pair1_then_sub_64 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_pair1_then_sub_vsx0 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_pair1_then_sub_vsx1 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      44,	// sub_pair1_then_sub_vsx1_then_sub_64 -> ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_gp8_x1_then_sub_32
    },
    {	// UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_32
      45,	// sub_64 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_eq
      0,	// sub_gp8_x0
      0,	// sub_gp8_x1
      0,	// sub_gt
      0,	// sub_lt
      45,	// sub_pair0 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_pair1 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_un
      45,	// sub_vsx0 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_vsx1 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_vsx1_then_sub_64 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_pair1_then_sub_64 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_pair1_then_sub_vsx0 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_pair1_then_sub_vsx1 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      45,	// sub_pair1_then_sub_vsx1_then_sub_64 -> UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
      0,	// sub_gp8_x1_then_sub_32
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 18 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : nullptr;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &PPCGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 64},  	// VSSRC
    {1, 34},  	// GPRC
    {1, 34},  	// GPRC_NOR0
    {1, 33},  	// GPRC_and_GPRC_NOR0
    {1, 32},  	// CRBITRC
    {1, 32},  	// F4RC
    {4, 32},  	// CRRC
    {1, 1},  	// CARRYRC
    {0, 0},  	// CTRRC
    {0, 0},  	// LRRC
    {1, 1},  	// VRSAVERC
    {1, 68},  	// SPILLTOVSRRC
    {1, 64},  	// VSFRC
    {1, 34},  	// G8RC
    {1, 34},  	// G8RC_NOX0
    {1, 34},  	// SPILLTOVSRRC_and_VSFRC
    {1, 33},  	// G8RC_and_G8RC_NOX0
    {1, 32},  	// F8RC
    {1, 32},  	// SPERC
    {1, 32},  	// VFRC
    {1, 31},  	// SPERC_with_sub_32_in_GPRC_NOR0
    {1, 20},  	// SPILLTOVSRRC_and_VFRC
    {1, 14},  	// SPILLTOVSRRC_and_F4RC
    {0, 0},  	// CTRRC8
    {0, 0},  	// LR8RC
    {1, 64},  	// VSRC
    {1, 34},  	// VSRC_with_sub_64_in_SPILLTOVSRRC
    {1, 32},  	// VRRC
    {1, 32},  	// VSLRC
    {1, 20},  	// VRRC_with_sub_64_in_SPILLTOVSRRC
    {2, 32},  	// G8pRC
    {2, 30},  	// G8pRC_with_sub_32_in_GPRC_NOR0
    {1, 14},  	// VSLRC_with_sub_64_in_SPILLTOVSRRC
    {2, 64},  	// VSRpRC
    {2, 34},  	// VSRpRC_with_sub_64_in_SPILLTOVSRRC
    {2, 32},  	// VSRpRC_with_sub_64_in_F4RC
    {2, 32},  	// VSRpRC_with_sub_64_in_VFRC
    {2, 20},  	// VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_VFRC
    {2, 14},  	// VSRpRC_with_sub_64_in_SPILLTOVSRRC_and_F4RC
    {4, 32},  	// ACCRC
    {4, 32},  	// UACCRC
    {4, 16},  	// ACCRC_with_sub_64_in_SPILLTOVSRRC
    {4, 16},  	// UACCRC_with_sub_64_in_SPILLTOVSRRC
    {4, 12},  	// ACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
    {4, 12},  	// UACCRC_with_sub_pair1_then_sub_64_in_SPILLTOVSRRC
  };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned PPCGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned PPCGenRegisterInfo::getNumRegPressureSets() const {
  return 17;
}

// Get the name of this register unit pressure set.
const char *PPCGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "CARRYRC",
    "VRSAVERC",
    "SPILLTOVSRRC_and_F4RC",
    "SPILLTOVSRRC_and_VFRC",
    "CRBITRC",
    "F4RC",
    "VFRC",
    "GPRC",
    "SPILLTOVSRRC_and_VSFRC",
    "SPILLTOVSRRC_and_VSFRC_with_VFRC",
    "F4RC_with_SPILLTOVSRRC_and_VSFRC",
    "VSSRC",
    "SPILLTOVSRRC",
    "SPILLTOVSRRC_with_SPILLTOVSRRC_and_F4RC",
    "SPILLTOVSRRC_with_VFRC",
    "F4RC_with_SPILLTOVSRRC",
    "VSSRC_with_SPILLTOVSRRC",
  };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned PPCGenRegisterInfo::
getRegPressureSetLimit(const MachineFunction &MF, unsigned Idx) const {
  static const uint8_t PressureLimitTable[] = {
    1,  	// 0: CARRYRC
    1,  	// 1: VRSAVERC
    16,  	// 2: SPILLTOVSRRC_and_F4RC
    20,  	// 3: SPILLTOVSRRC_and_VFRC
    32,  	// 4: CRBITRC
    32,  	// 5: F4RC
    32,  	// 6: VFRC
    35,  	// 7: GPRC
    36,  	// 8: SPILLTOVSRRC_and_VSFRC
    46,  	// 9: SPILLTOVSRRC_and_VSFRC_with_VFRC
    52,  	// 10: F4RC_with_SPILLTOVSRRC_and_VSFRC
    64,  	// 11: VSSRC
    69,  	// 12: SPILLTOVSRRC
    70,  	// 13: SPILLTOVSRRC_with_SPILLTOVSRRC_and_F4RC
    80,  	// 14: SPILLTOVSRRC_with_VFRC
    86,  	// 15: F4RC_with_SPILLTOVSRRC
    98,  	// 16: VSSRC_with_SPILLTOVSRRC
  };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
  /* 0 */ 0, -1,
  /* 2 */ 1, -1,
  /* 4 */ 4, -1,
  /* 6 */ 7, 12, -1,
  /* 9 */ 11, 16, -1,
  /* 12 */ 6, 9, 11, 14, 16, -1,
  /* 18 */ 5, 10, 11, 15, 16, -1,
  /* 24 */ 2, 5, 8, 10, 11, 13, 15, 16, -1,
  /* 33 */ 7, 12, 13, 14, 15, 16, -1,
  /* 40 */ 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, -1,
  /* 52 */ 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, -1,
};

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int *PPCGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const uint8_t RCSetStartTable[] = {
    9,33,6,33,4,18,4,0,1,1,2,34,9,33,6,42,33,18,33,12,33,52,40,1,1,9,42,12,18,52,33,33,40,9,42,18,12,52,40,18,18,24,24,40,40,};
  return &RCSetsTable[RCSetStartTable[RC->getID()]];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int *PPCGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 171 && "invalid register unit");
  static const uint8_t RUSetStartTable[] = {
    33,0,1,33,1,1,1,2,6,40,40,40,40,40,40,40,40,40,40,40,40,40,40,24,24,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,12,12,12,12,12,12,12,12,12,12,12,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,};
  return &RCSetsTable[RUSetStartTable[RegUnit]];
}

extern const MCRegisterDesc PPCRegDesc[];
extern const MCPhysReg PPCRegDiffLists[];
extern const LaneBitmask PPCLaneMaskLists[];
extern const char PPCRegStrings[];
extern const char PPCRegClassStrings[];
extern const MCPhysReg PPCRegUnitRoots[][2];
extern const uint16_t PPCSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits PPCSubRegIdxRanges[];
extern const uint16_t PPCRegEncodingTable[];
// PPC Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour0Dwarf2L[];
extern const unsigned PPCDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour1Dwarf2L[];
extern const unsigned PPCDwarfFlavour1Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour0Dwarf2L[];
extern const unsigned PPCEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour1Dwarf2L[];
extern const unsigned PPCEHFlavour1Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour0L2Dwarf[];
extern const unsigned PPCDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCDwarfFlavour1L2Dwarf[];
extern const unsigned PPCDwarfFlavour1L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour0L2Dwarf[];
extern const unsigned PPCEHFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair PPCEHFlavour1L2Dwarf[];
extern const unsigned PPCEHFlavour1L2DwarfSize;

PPCGenRegisterInfo::
PPCGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour,
      unsigned PC, unsigned HwMode)
  : TargetRegisterInfo(&PPCRegInfoDesc, RegisterClasses, RegisterClasses+45,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable,
             LaneBitmask(0xFFFFFFFFFFFFFC00), RegClassInfos, HwMode) {
  InitMCRegisterInfo(PPCRegDesc, 376, RA, PC,
                     PPCMCRegisterClasses, 45,
                     PPCRegUnitRoots,
                     171,
                     PPCRegDiffLists,
                     PPCLaneMaskLists,
                     PPCRegStrings,
                     PPCRegClassStrings,
                     PPCSubRegIdxLists,
                     19,
                     PPCSubRegIdxRanges,
                     PPCRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(PPCDwarfFlavour0Dwarf2L, PPCDwarfFlavour0Dwarf2LSize, false);
    break;
  case 1:
    mapDwarfRegsToLLVMRegs(PPCDwarfFlavour1Dwarf2L, PPCDwarfFlavour1Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(PPCEHFlavour0Dwarf2L, PPCEHFlavour0Dwarf2LSize, true);
    break;
  case 1:
    mapDwarfRegsToLLVMRegs(PPCEHFlavour1Dwarf2L, PPCEHFlavour1Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(PPCDwarfFlavour0L2Dwarf, PPCDwarfFlavour0L2DwarfSize, false);
    break;
  case 1:
    mapLLVMRegsToDwarfRegs(PPCDwarfFlavour1L2Dwarf, PPCDwarfFlavour1L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(PPCEHFlavour0L2Dwarf, PPCEHFlavour0L2DwarfSize, true);
    break;
  case 1:
    mapLLVMRegsToDwarfRegs(PPCEHFlavour1L2Dwarf, PPCEHFlavour1L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_64_AllRegs_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint32_t CSR_64_AllRegs_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_64_AllRegs_AIX_Dflt_Altivec_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, 0 };
static const uint32_t CSR_64_AllRegs_AIX_Dflt_Altivec_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0x07ffff80, 0x07ffff80, 0x00000000, 0x00000000, 0x00000000, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_64_AllRegs_AIX_Dflt_VSX_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::VSL14, PPC::VSL15, PPC::VSL16, PPC::VSL17, PPC::VSL18, PPC::VSL19, 0 };
static const uint32_t CSR_64_AllRegs_AIX_Dflt_VSX_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0xffffff80, 0xffffffff, 0x07ffffff, 0x00000000, 0x00000000, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_64_AllRegs_Altivec_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_64_AllRegs_Altivec_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0xffffff80, 0xffffffff, 0x0000007f, 0x00000000, 0x00000000, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_64_AllRegs_VSRP_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::VSL14, PPC::VSL15, PPC::VSL16, PPC::VSL17, PPC::VSL18, PPC::VSL19, PPC::VSL20, PPC::VSL21, PPC::VSL22, PPC::VSL23, PPC::VSL24, PPC::VSL25, PPC::VSL26, PPC::VSL27, PPC::VSL28, PPC::VSL29, PPC::VSL30, PPC::VSL31, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp7, PPC::VSRp8, PPC::VSRp9, PPC::VSRp10, PPC::VSRp11, PPC::VSRp12, PPC::VSRp13, PPC::VSRp14, PPC::VSRp15, PPC::VSRp16, PPC::VSRp17, PPC::VSRp18, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_64_AllRegs_VSRP_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0xffffff80, 0xffffffff, 0xffffffff, 0xffffffff, 0x0000007f, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_64_AllRegs_VSX_SaveList[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F1, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V2, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSL0, PPC::VSL1, PPC::VSL2, PPC::VSL3, PPC::VSL4, PPC::VSL5, PPC::VSL6, PPC::VSL7, PPC::VSL8, PPC::VSL9, PPC::VSL10, PPC::VSL11, PPC::VSL12, PPC::VSL13, PPC::VSL14, PPC::VSL15, PPC::VSL16, PPC::VSL17, PPC::VSL18, PPC::VSL19, PPC::VSL20, PPC::VSL21, PPC::VSL22, PPC::VSL23, PPC::VSL24, PPC::VSL25, PPC::VSL26, PPC::VSL27, PPC::VSL28, PPC::VSL29, PPC::VSL30, PPC::VSL31, 0 };
static const uint32_t CSR_64_AllRegs_VSX_RegMask[] = { 0xeff00000, 0x9fffffff, 0x7fffe3fc, 0x00000000, 0xffffff80, 0xffffffff, 0xffffffff, 0x0000007f, 0x00000000, 0xffe3fc80, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_AIX32_SaveList[] = { PPC::R13, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, 0 };
static const uint32_t CSR_AIX32_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7ffff000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_AIX32_Altivec_SaveList[] = { PPC::R13, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_AIX32_Altivec_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7ffff000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_ALL_VSRP_SaveList[] = { PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp7, PPC::VSRp8, PPC::VSRp9, PPC::VSRp10, PPC::VSRp11, PPC::VSRp12, PPC::VSRp13, PPC::VSRp14, PPC::VSRp15, PPC::VSRp16, PPC::VSRp17, PPC::VSRp18, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_ALL_VSRP_RegMask[] = { 0xe0000000, 0x1fffffff, 0x00000000, 0x00000000, 0xffffff80, 0xffffffff, 0xffffffff, 0xffffffff, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_Altivec_SaveList[] = { PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_Altivec_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_NoRegs_SaveList[] = { 0 };
static const uint32_t CSR_NoRegs_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_PPC64_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, 0 };
static const uint32_t CSR_PPC64_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffe00000, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_PPC64_Altivec_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_PPC64_Altivec_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x00000000, 0xffe00000, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_PPC64_R2_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::X2, 0 };
static const uint32_t CSR_PPC64_R2_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffe00200, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_PPC64_R2_Altivec_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::X2, 0 };
static const uint32_t CSR_PPC64_R2_Altivec_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe002, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x00000000, 0xffe00200, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_SPE_SaveList[] = { PPC::S14, PPC::S15, PPC::S16, PPC::S17, PPC::S18, PPC::S19, PPC::S20, PPC::S21, PPC::S22, PPC::S23, PPC::S24, PPC::S25, PPC::S26, PPC::S27, PPC::S28, PPC::S29, PPC::S30, PPC::S31, 0 };
static const uint32_t CSR_SPE_RegMask[] = { 0x00000000, 0x00000000, 0x7fffe000, 0x7fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_SVR32_ColdCC_SaveList[] = { PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, 0 };
static const uint32_t CSR_SVR32_ColdCC_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x000000ff, };
static const MCPhysReg CSR_SVR32_ColdCC_Altivec_SaveList[] = { PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::V0, PPC::V1, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_SVR32_ColdCC_Altivec_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0xfffffd80, 0xfffffdff, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x000000ff, };
static const MCPhysReg CSR_SVR32_ColdCC_Common_SaveList[] = { PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint32_t CSR_SVR32_ColdCC_Common_RegMask[] = { 0x0ff00000, 0x00000000, 0x7fffe3f8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x000000ff, };
static const MCPhysReg CSR_SVR32_ColdCC_SPE_SaveList[] = { PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::S4, PPC::S5, PPC::S6, PPC::S7, PPC::S8, PPC::S9, PPC::S10, PPC::S14, PPC::S15, PPC::S16, PPC::S17, PPC::S18, PPC::S19, PPC::S20, PPC::S21, PPC::S22, PPC::S23, PPC::S24, PPC::S25, PPC::S26, PPC::S27, PPC::S28, PPC::S29, PPC::S30, PPC::S31, 0 };
static const uint32_t CSR_SVR32_ColdCC_SPE_RegMask[] = { 0x0ff00000, 0x00000000, 0x7fffe3f8, 0x7fffe3f8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff00, 0x000000ff, };
static const MCPhysReg CSR_SVR32_ColdCC_VSRP_SaveList[] = { PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::V0, PPC::V1, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp7, PPC::VSRp8, PPC::VSRp9, PPC::VSRp10, PPC::VSRp11, PPC::VSRp12, PPC::VSRp13, PPC::VSRp14, PPC::VSRp15, PPC::VSRp16, PPC::VSRp18, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_SVR32_ColdCC_VSRP_RegMask[] = { 0xeff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0xfffffd80, 0xfffffdff, 0xffffffff, 0xfeffffff, 0x0000007f, 0x00000000, 0xffffff00, 0x000000ff, };
static const MCPhysReg CSR_SVR432_SaveList[] = { PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, 0 };
static const uint32_t CSR_SVR432_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_SVR432_Altivec_SaveList[] = { PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_SVR432_Altivec_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_SVR432_COMM_SaveList[] = { PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR2, PPC::CR3, PPC::CR4, 0 };
static const uint32_t CSR_SVR432_COMM_RegMask[] = { 0x01c00000, 0x00000000, 0x7fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_SVR432_SPE_SaveList[] = { PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::S14, PPC::S15, PPC::S16, PPC::S17, PPC::S18, PPC::S19, PPC::S20, PPC::S21, PPC::S22, PPC::S23, PPC::S24, PPC::S25, PPC::S26, PPC::S27, PPC::S28, PPC::S29, PPC::S30, PPC::S31, 0 };
static const uint32_t CSR_SVR432_SPE_RegMask[] = { 0x01c00000, 0x00000000, 0x7fffe000, 0x7fffe000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_SVR432_VSRP_SaveList[] = { PPC::R14, PPC::R15, PPC::R16, PPC::R17, PPC::R18, PPC::R19, PPC::R20, PPC::R21, PPC::R22, PPC::R23, PPC::R24, PPC::R25, PPC::R26, PPC::R27, PPC::R28, PPC::R29, PPC::R30, PPC::R31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_SVR432_VSRP_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x0000007e, 0x00000000, 0x1c1c1c00, 0x0000001c, };
static const MCPhysReg CSR_SVR464_R2_VSRP_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, PPC::X2, 0 };
static const uint32_t CSR_SVR464_R2_VSRP_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe002, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x0000007e, 0xffe00200, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_SVR464_VSRP_SaveList[] = { PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR2, PPC::CR3, PPC::CR4, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_SVR464_VSRP_RegMask[] = { 0x01c00000, 0x1ffff800, 0x7fffe000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x0000007e, 0xffe00000, 0x1c1c1c7f, 0x0000001c, };
static const MCPhysReg CSR_SVR64_ColdCC_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const uint32_t CSR_SVR64_ColdCC_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffe3f800, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_SVR64_ColdCC_Altivec_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, 0 };
static const uint32_t CSR_SVR64_ColdCC_Altivec_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0xfffffd80, 0xfffffdff, 0x0000007f, 0x00000000, 0x00000000, 0xffe3f800, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_SVR64_ColdCC_R2_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::X2, 0 };
static const uint32_t CSR_SVR64_ColdCC_R2_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3fa, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffe3fa00, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_SVR64_ColdCC_R2_Altivec_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::V0, PPC::V1, PPC::V3, PPC::V4, PPC::V5, PPC::V6, PPC::V7, PPC::V8, PPC::V9, PPC::V10, PPC::V11, PPC::V12, PPC::V13, PPC::V14, PPC::V15, PPC::V16, PPC::V17, PPC::V18, PPC::V19, PPC::V20, PPC::V21, PPC::V22, PPC::V23, PPC::V24, PPC::V25, PPC::V26, PPC::V27, PPC::V28, PPC::V29, PPC::V30, PPC::V31, PPC::X2, 0 };
static const uint32_t CSR_SVR64_ColdCC_R2_Altivec_RegMask[] = { 0xaff00000, 0x1fffffff, 0x7fffe3fa, 0x00000000, 0xfffffd80, 0xfffffdff, 0x0000007f, 0x00000000, 0x00000000, 0xffe3fa00, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_SVR64_ColdCC_R2_VSRP_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp7, PPC::VSRp8, PPC::VSRp9, PPC::VSRp10, PPC::VSRp11, PPC::VSRp12, PPC::VSRp13, PPC::VSRp14, PPC::VSRp15, PPC::VSRp16, PPC::VSRp18, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, PPC::X2, 0 };
static const uint32_t CSR_SVR64_ColdCC_R2_VSRP_RegMask[] = { 0xeff00000, 0x1fffffff, 0x7fffe3fa, 0x00000000, 0xfffff980, 0xfffff9ff, 0xffffffff, 0xfeffffff, 0x0000007f, 0xffe3fa00, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_SVR64_ColdCC_VSRP_SaveList[] = { PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X14, PPC::X15, PPC::X16, PPC::X17, PPC::X18, PPC::X19, PPC::X20, PPC::X21, PPC::X22, PPC::X23, PPC::X24, PPC::X25, PPC::X26, PPC::X27, PPC::X28, PPC::X29, PPC::X30, PPC::X31, PPC::F0, PPC::F2, PPC::F3, PPC::F4, PPC::F5, PPC::F6, PPC::F7, PPC::F8, PPC::F9, PPC::F10, PPC::F11, PPC::F12, PPC::F13, PPC::F14, PPC::F15, PPC::F16, PPC::F17, PPC::F18, PPC::F19, PPC::F20, PPC::F21, PPC::F22, PPC::F23, PPC::F24, PPC::F25, PPC::F26, PPC::F27, PPC::F28, PPC::F29, PPC::F30, PPC::F31, PPC::CR0, PPC::CR1, PPC::CR2, PPC::CR3, PPC::CR4, PPC::CR5, PPC::CR6, PPC::CR7, PPC::VSRp0, PPC::VSRp1, PPC::VSRp2, PPC::VSRp3, PPC::VSRp4, PPC::VSRp5, PPC::VSRp6, PPC::VSRp7, PPC::VSRp8, PPC::VSRp9, PPC::VSRp10, PPC::VSRp11, PPC::VSRp12, PPC::VSRp13, PPC::VSRp14, PPC::VSRp15, PPC::VSRp16, PPC::VSRp18, PPC::VSRp19, PPC::VSRp20, PPC::VSRp21, PPC::VSRp22, PPC::VSRp23, PPC::VSRp24, PPC::VSRp25, PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_SVR64_ColdCC_VSRP_RegMask[] = { 0xeff00000, 0x1fffffff, 0x7fffe3f8, 0x00000000, 0xfffff980, 0xfffff9ff, 0xffffffff, 0xfeffffff, 0x0000007f, 0xffe3f800, 0xffffff7f, 0x000000ff, };
static const MCPhysReg CSR_VSRP_SaveList[] = { PPC::VSRp26, PPC::VSRp27, PPC::VSRp28, PPC::VSRp29, PPC::VSRp30, PPC::VSRp31, 0 };
static const uint32_t CSR_VSRP_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xf8000000, 0xf800007f, 0x0000007f, 0x00000000, 0x0000007e, 0x00000000, 0x00000000, 0x00000000, };


ArrayRef<const uint32_t *> PPCGenRegisterInfo::getRegMasks() const {
  static const uint32_t *const Masks[] = {
    CSR_64_AllRegs_RegMask,
    CSR_64_AllRegs_AIX_Dflt_Altivec_RegMask,
    CSR_64_AllRegs_AIX_Dflt_VSX_RegMask,
    CSR_64_AllRegs_Altivec_RegMask,
    CSR_64_AllRegs_VSRP_RegMask,
    CSR_64_AllRegs_VSX_RegMask,
    CSR_AIX32_RegMask,
    CSR_AIX32_Altivec_RegMask,
    CSR_ALL_VSRP_RegMask,
    CSR_Altivec_RegMask,
    CSR_NoRegs_RegMask,
    CSR_PPC64_RegMask,
    CSR_PPC64_Altivec_RegMask,
    CSR_PPC64_R2_RegMask,
    CSR_PPC64_R2_Altivec_RegMask,
    CSR_SPE_RegMask,
    CSR_SVR32_ColdCC_RegMask,
    CSR_SVR32_ColdCC_Altivec_RegMask,
    CSR_SVR32_ColdCC_Common_RegMask,
    CSR_SVR32_ColdCC_SPE_RegMask,
    CSR_SVR32_ColdCC_VSRP_RegMask,
    CSR_SVR432_RegMask,
    CSR_SVR432_Altivec_RegMask,
    CSR_SVR432_COMM_RegMask,
    CSR_SVR432_SPE_RegMask,
    CSR_SVR432_VSRP_RegMask,
    CSR_SVR464_R2_VSRP_RegMask,
    CSR_SVR464_VSRP_RegMask,
    CSR_SVR64_ColdCC_RegMask,
    CSR_SVR64_ColdCC_Altivec_RegMask,
    CSR_SVR64_ColdCC_R2_RegMask,
    CSR_SVR64_ColdCC_R2_Altivec_RegMask,
    CSR_SVR64_ColdCC_R2_VSRP_RegMask,
    CSR_SVR64_ColdCC_VSRP_RegMask,
    CSR_VSRP_RegMask,
  };
  return makeArrayRef(Masks);
}

bool PPCGenRegisterInfo::
isGeneralPurposeRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool PPCGenRegisterInfo::
isFixedRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

bool PPCGenRegisterInfo::
isArgumentRegister(const MachineFunction &MF, MCRegister PhysReg) const {
  return
      false;
}

ArrayRef<const char *> PPCGenRegisterInfo::getRegMaskNames() const {
  static const char *Names[] = {
    "CSR_64_AllRegs",
    "CSR_64_AllRegs_AIX_Dflt_Altivec",
    "CSR_64_AllRegs_AIX_Dflt_VSX",
    "CSR_64_AllRegs_Altivec",
    "CSR_64_AllRegs_VSRP",
    "CSR_64_AllRegs_VSX",
    "CSR_AIX32",
    "CSR_AIX32_Altivec",
    "CSR_ALL_VSRP",
    "CSR_Altivec",
    "CSR_NoRegs",
    "CSR_PPC64",
    "CSR_PPC64_Altivec",
    "CSR_PPC64_R2",
    "CSR_PPC64_R2_Altivec",
    "CSR_SPE",
    "CSR_SVR32_ColdCC",
    "CSR_SVR32_ColdCC_Altivec",
    "CSR_SVR32_ColdCC_Common",
    "CSR_SVR32_ColdCC_SPE",
    "CSR_SVR32_ColdCC_VSRP",
    "CSR_SVR432",
    "CSR_SVR432_Altivec",
    "CSR_SVR432_COMM",
    "CSR_SVR432_SPE",
    "CSR_SVR432_VSRP",
    "CSR_SVR464_R2_VSRP",
    "CSR_SVR464_VSRP",
    "CSR_SVR64_ColdCC",
    "CSR_SVR64_ColdCC_Altivec",
    "CSR_SVR64_ColdCC_R2",
    "CSR_SVR64_ColdCC_R2_Altivec",
    "CSR_SVR64_ColdCC_R2_VSRP",
    "CSR_SVR64_ColdCC_VSRP",
    "CSR_VSRP",
  };
  return makeArrayRef(Names);
}

const PPCFrameLowering *
PPCGenRegisterInfo::getFrameLowering(const MachineFunction &MF) {
  return static_cast<const PPCFrameLowering *>(
      MF.getSubtarget().getFrameLowering());
}

} // end namespace llvm

#endif // GET_REGINFO_TARGET_DESC

